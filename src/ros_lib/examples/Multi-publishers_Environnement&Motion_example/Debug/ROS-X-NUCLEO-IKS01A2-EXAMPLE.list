
ROS-X-NUCLEO-IKS01A2-EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dee4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800e078  0800e078  0001e078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e728  0800e728  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800e728  0800e728  0001e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e730  0800e730  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e734  0800e734  0001e734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800e738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000164  0800e89c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800e89c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048ed3  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000074a5  00000000  00000000  00069067  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002530  00000000  00000000  00070510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002350  00000000  00000000  00072a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c681  00000000  00000000  00074d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b3fc  00000000  00000000  00091411  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000990a8  00000000  00000000  000ac80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001458b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a494  00000000  00000000  00145930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000164 	.word	0x20000164
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800e060 	.word	0x0800e060

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000168 	.word	0x20000168
 80001d0:	0800e060 	.word	0x0800e060

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000322:	f1a4 0401 	sub.w	r4, r4, #1
 8000326:	d1e9      	bne.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_uldivmod>:
 800055c:	b953      	cbnz	r3, 8000574 <__aeabi_uldivmod+0x18>
 800055e:	b94a      	cbnz	r2, 8000574 <__aeabi_uldivmod+0x18>
 8000560:	2900      	cmp	r1, #0
 8000562:	bf08      	it	eq
 8000564:	2800      	cmpeq	r0, #0
 8000566:	bf1c      	itt	ne
 8000568:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800056c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000570:	f000 b972 	b.w	8000858 <__aeabi_idiv0>
 8000574:	f1ad 0c08 	sub.w	ip, sp, #8
 8000578:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800057c:	f000 f806 	bl	800058c <__udivmoddi4>
 8000580:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000588:	b004      	add	sp, #16
 800058a:	4770      	bx	lr

0800058c <__udivmoddi4>:
 800058c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000590:	9e08      	ldr	r6, [sp, #32]
 8000592:	4604      	mov	r4, r0
 8000594:	4688      	mov	r8, r1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d14b      	bne.n	8000632 <__udivmoddi4+0xa6>
 800059a:	428a      	cmp	r2, r1
 800059c:	4615      	mov	r5, r2
 800059e:	d967      	bls.n	8000670 <__udivmoddi4+0xe4>
 80005a0:	fab2 f282 	clz	r2, r2
 80005a4:	b14a      	cbz	r2, 80005ba <__udivmoddi4+0x2e>
 80005a6:	f1c2 0720 	rsb	r7, r2, #32
 80005aa:	fa01 f302 	lsl.w	r3, r1, r2
 80005ae:	fa20 f707 	lsr.w	r7, r0, r7
 80005b2:	4095      	lsls	r5, r2
 80005b4:	ea47 0803 	orr.w	r8, r7, r3
 80005b8:	4094      	lsls	r4, r2
 80005ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005be:	0c23      	lsrs	r3, r4, #16
 80005c0:	fbb8 f7fe 	udiv	r7, r8, lr
 80005c4:	fa1f fc85 	uxth.w	ip, r5
 80005c8:	fb0e 8817 	mls	r8, lr, r7, r8
 80005cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005d0:	fb07 f10c 	mul.w	r1, r7, ip
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d909      	bls.n	80005ec <__udivmoddi4+0x60>
 80005d8:	18eb      	adds	r3, r5, r3
 80005da:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80005de:	f080 811b 	bcs.w	8000818 <__udivmoddi4+0x28c>
 80005e2:	4299      	cmp	r1, r3
 80005e4:	f240 8118 	bls.w	8000818 <__udivmoddi4+0x28c>
 80005e8:	3f02      	subs	r7, #2
 80005ea:	442b      	add	r3, r5
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80005f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005fc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000600:	45a4      	cmp	ip, r4
 8000602:	d909      	bls.n	8000618 <__udivmoddi4+0x8c>
 8000604:	192c      	adds	r4, r5, r4
 8000606:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800060a:	f080 8107 	bcs.w	800081c <__udivmoddi4+0x290>
 800060e:	45a4      	cmp	ip, r4
 8000610:	f240 8104 	bls.w	800081c <__udivmoddi4+0x290>
 8000614:	3802      	subs	r0, #2
 8000616:	442c      	add	r4, r5
 8000618:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800061c:	eba4 040c 	sub.w	r4, r4, ip
 8000620:	2700      	movs	r7, #0
 8000622:	b11e      	cbz	r6, 800062c <__udivmoddi4+0xa0>
 8000624:	40d4      	lsrs	r4, r2
 8000626:	2300      	movs	r3, #0
 8000628:	e9c6 4300 	strd	r4, r3, [r6]
 800062c:	4639      	mov	r1, r7
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	428b      	cmp	r3, r1
 8000634:	d909      	bls.n	800064a <__udivmoddi4+0xbe>
 8000636:	2e00      	cmp	r6, #0
 8000638:	f000 80eb 	beq.w	8000812 <__udivmoddi4+0x286>
 800063c:	2700      	movs	r7, #0
 800063e:	e9c6 0100 	strd	r0, r1, [r6]
 8000642:	4638      	mov	r0, r7
 8000644:	4639      	mov	r1, r7
 8000646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800064a:	fab3 f783 	clz	r7, r3
 800064e:	2f00      	cmp	r7, #0
 8000650:	d147      	bne.n	80006e2 <__udivmoddi4+0x156>
 8000652:	428b      	cmp	r3, r1
 8000654:	d302      	bcc.n	800065c <__udivmoddi4+0xd0>
 8000656:	4282      	cmp	r2, r0
 8000658:	f200 80fa 	bhi.w	8000850 <__udivmoddi4+0x2c4>
 800065c:	1a84      	subs	r4, r0, r2
 800065e:	eb61 0303 	sbc.w	r3, r1, r3
 8000662:	2001      	movs	r0, #1
 8000664:	4698      	mov	r8, r3
 8000666:	2e00      	cmp	r6, #0
 8000668:	d0e0      	beq.n	800062c <__udivmoddi4+0xa0>
 800066a:	e9c6 4800 	strd	r4, r8, [r6]
 800066e:	e7dd      	b.n	800062c <__udivmoddi4+0xa0>
 8000670:	b902      	cbnz	r2, 8000674 <__udivmoddi4+0xe8>
 8000672:	deff      	udf	#255	; 0xff
 8000674:	fab2 f282 	clz	r2, r2
 8000678:	2a00      	cmp	r2, #0
 800067a:	f040 808f 	bne.w	800079c <__udivmoddi4+0x210>
 800067e:	1b49      	subs	r1, r1, r5
 8000680:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000684:	fa1f f885 	uxth.w	r8, r5
 8000688:	2701      	movs	r7, #1
 800068a:	fbb1 fcfe 	udiv	ip, r1, lr
 800068e:	0c23      	lsrs	r3, r4, #16
 8000690:	fb0e 111c 	mls	r1, lr, ip, r1
 8000694:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000698:	fb08 f10c 	mul.w	r1, r8, ip
 800069c:	4299      	cmp	r1, r3
 800069e:	d907      	bls.n	80006b0 <__udivmoddi4+0x124>
 80006a0:	18eb      	adds	r3, r5, r3
 80006a2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80006a6:	d202      	bcs.n	80006ae <__udivmoddi4+0x122>
 80006a8:	4299      	cmp	r1, r3
 80006aa:	f200 80cd 	bhi.w	8000848 <__udivmoddi4+0x2bc>
 80006ae:	4684      	mov	ip, r0
 80006b0:	1a59      	subs	r1, r3, r1
 80006b2:	b2a3      	uxth	r3, r4
 80006b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80006b8:	fb0e 1410 	mls	r4, lr, r0, r1
 80006bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006c0:	fb08 f800 	mul.w	r8, r8, r0
 80006c4:	45a0      	cmp	r8, r4
 80006c6:	d907      	bls.n	80006d8 <__udivmoddi4+0x14c>
 80006c8:	192c      	adds	r4, r5, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ce:	d202      	bcs.n	80006d6 <__udivmoddi4+0x14a>
 80006d0:	45a0      	cmp	r8, r4
 80006d2:	f200 80b6 	bhi.w	8000842 <__udivmoddi4+0x2b6>
 80006d6:	4618      	mov	r0, r3
 80006d8:	eba4 0408 	sub.w	r4, r4, r8
 80006dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006e0:	e79f      	b.n	8000622 <__udivmoddi4+0x96>
 80006e2:	f1c7 0c20 	rsb	ip, r7, #32
 80006e6:	40bb      	lsls	r3, r7
 80006e8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006ec:	ea4e 0e03 	orr.w	lr, lr, r3
 80006f0:	fa01 f407 	lsl.w	r4, r1, r7
 80006f4:	fa20 f50c 	lsr.w	r5, r0, ip
 80006f8:	fa21 f30c 	lsr.w	r3, r1, ip
 80006fc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000700:	4325      	orrs	r5, r4
 8000702:	fbb3 f9f8 	udiv	r9, r3, r8
 8000706:	0c2c      	lsrs	r4, r5, #16
 8000708:	fb08 3319 	mls	r3, r8, r9, r3
 800070c:	fa1f fa8e 	uxth.w	sl, lr
 8000710:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000714:	fb09 f40a 	mul.w	r4, r9, sl
 8000718:	429c      	cmp	r4, r3
 800071a:	fa02 f207 	lsl.w	r2, r2, r7
 800071e:	fa00 f107 	lsl.w	r1, r0, r7
 8000722:	d90b      	bls.n	800073c <__udivmoddi4+0x1b0>
 8000724:	eb1e 0303 	adds.w	r3, lr, r3
 8000728:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800072c:	f080 8087 	bcs.w	800083e <__udivmoddi4+0x2b2>
 8000730:	429c      	cmp	r4, r3
 8000732:	f240 8084 	bls.w	800083e <__udivmoddi4+0x2b2>
 8000736:	f1a9 0902 	sub.w	r9, r9, #2
 800073a:	4473      	add	r3, lr
 800073c:	1b1b      	subs	r3, r3, r4
 800073e:	b2ad      	uxth	r5, r5
 8000740:	fbb3 f0f8 	udiv	r0, r3, r8
 8000744:	fb08 3310 	mls	r3, r8, r0, r3
 8000748:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800074c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000750:	45a2      	cmp	sl, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x1da>
 8000754:	eb1e 0404 	adds.w	r4, lr, r4
 8000758:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800075c:	d26b      	bcs.n	8000836 <__udivmoddi4+0x2aa>
 800075e:	45a2      	cmp	sl, r4
 8000760:	d969      	bls.n	8000836 <__udivmoddi4+0x2aa>
 8000762:	3802      	subs	r0, #2
 8000764:	4474      	add	r4, lr
 8000766:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800076a:	fba0 8902 	umull	r8, r9, r0, r2
 800076e:	eba4 040a 	sub.w	r4, r4, sl
 8000772:	454c      	cmp	r4, r9
 8000774:	46c2      	mov	sl, r8
 8000776:	464b      	mov	r3, r9
 8000778:	d354      	bcc.n	8000824 <__udivmoddi4+0x298>
 800077a:	d051      	beq.n	8000820 <__udivmoddi4+0x294>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d069      	beq.n	8000854 <__udivmoddi4+0x2c8>
 8000780:	ebb1 050a 	subs.w	r5, r1, sl
 8000784:	eb64 0403 	sbc.w	r4, r4, r3
 8000788:	fa04 fc0c 	lsl.w	ip, r4, ip
 800078c:	40fd      	lsrs	r5, r7
 800078e:	40fc      	lsrs	r4, r7
 8000790:	ea4c 0505 	orr.w	r5, ip, r5
 8000794:	e9c6 5400 	strd	r5, r4, [r6]
 8000798:	2700      	movs	r7, #0
 800079a:	e747      	b.n	800062c <__udivmoddi4+0xa0>
 800079c:	f1c2 0320 	rsb	r3, r2, #32
 80007a0:	fa20 f703 	lsr.w	r7, r0, r3
 80007a4:	4095      	lsls	r5, r2
 80007a6:	fa01 f002 	lsl.w	r0, r1, r2
 80007aa:	fa21 f303 	lsr.w	r3, r1, r3
 80007ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007b2:	4338      	orrs	r0, r7
 80007b4:	0c01      	lsrs	r1, r0, #16
 80007b6:	fbb3 f7fe 	udiv	r7, r3, lr
 80007ba:	fa1f f885 	uxth.w	r8, r5
 80007be:	fb0e 3317 	mls	r3, lr, r7, r3
 80007c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c6:	fb07 f308 	mul.w	r3, r7, r8
 80007ca:	428b      	cmp	r3, r1
 80007cc:	fa04 f402 	lsl.w	r4, r4, r2
 80007d0:	d907      	bls.n	80007e2 <__udivmoddi4+0x256>
 80007d2:	1869      	adds	r1, r5, r1
 80007d4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80007d8:	d22f      	bcs.n	800083a <__udivmoddi4+0x2ae>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d92d      	bls.n	800083a <__udivmoddi4+0x2ae>
 80007de:	3f02      	subs	r7, #2
 80007e0:	4429      	add	r1, r5
 80007e2:	1acb      	subs	r3, r1, r3
 80007e4:	b281      	uxth	r1, r0
 80007e6:	fbb3 f0fe 	udiv	r0, r3, lr
 80007ea:	fb0e 3310 	mls	r3, lr, r0, r3
 80007ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f2:	fb00 f308 	mul.w	r3, r0, r8
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d907      	bls.n	800080a <__udivmoddi4+0x27e>
 80007fa:	1869      	adds	r1, r5, r1
 80007fc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000800:	d217      	bcs.n	8000832 <__udivmoddi4+0x2a6>
 8000802:	428b      	cmp	r3, r1
 8000804:	d915      	bls.n	8000832 <__udivmoddi4+0x2a6>
 8000806:	3802      	subs	r0, #2
 8000808:	4429      	add	r1, r5
 800080a:	1ac9      	subs	r1, r1, r3
 800080c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000810:	e73b      	b.n	800068a <__udivmoddi4+0xfe>
 8000812:	4637      	mov	r7, r6
 8000814:	4630      	mov	r0, r6
 8000816:	e709      	b.n	800062c <__udivmoddi4+0xa0>
 8000818:	4607      	mov	r7, r0
 800081a:	e6e7      	b.n	80005ec <__udivmoddi4+0x60>
 800081c:	4618      	mov	r0, r3
 800081e:	e6fb      	b.n	8000618 <__udivmoddi4+0x8c>
 8000820:	4541      	cmp	r1, r8
 8000822:	d2ab      	bcs.n	800077c <__udivmoddi4+0x1f0>
 8000824:	ebb8 0a02 	subs.w	sl, r8, r2
 8000828:	eb69 020e 	sbc.w	r2, r9, lr
 800082c:	3801      	subs	r0, #1
 800082e:	4613      	mov	r3, r2
 8000830:	e7a4      	b.n	800077c <__udivmoddi4+0x1f0>
 8000832:	4660      	mov	r0, ip
 8000834:	e7e9      	b.n	800080a <__udivmoddi4+0x27e>
 8000836:	4618      	mov	r0, r3
 8000838:	e795      	b.n	8000766 <__udivmoddi4+0x1da>
 800083a:	4667      	mov	r7, ip
 800083c:	e7d1      	b.n	80007e2 <__udivmoddi4+0x256>
 800083e:	4681      	mov	r9, r0
 8000840:	e77c      	b.n	800073c <__udivmoddi4+0x1b0>
 8000842:	3802      	subs	r0, #2
 8000844:	442c      	add	r4, r5
 8000846:	e747      	b.n	80006d8 <__udivmoddi4+0x14c>
 8000848:	f1ac 0c02 	sub.w	ip, ip, #2
 800084c:	442b      	add	r3, r5
 800084e:	e72f      	b.n	80006b0 <__udivmoddi4+0x124>
 8000850:	4638      	mov	r0, r7
 8000852:	e708      	b.n	8000666 <__udivmoddi4+0xda>
 8000854:	4637      	mov	r7, r6
 8000856:	e6e9      	b.n	800062c <__udivmoddi4+0xa0>

08000858 <__aeabi_idiv0>:
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	0a5a      	lsrs	r2, r3, #9
 800086c:	490f      	ldr	r1, [pc, #60]	; (80008ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800086e:	fba1 1202 	umull	r1, r2, r1, r2
 8000872:	09d2      	lsrs	r2, r2, #7
 8000874:	490e      	ldr	r1, [pc, #56]	; (80008b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000876:	fb01 f202 	mul.w	r2, r1, r2
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	09db      	lsrs	r3, r3, #7
 800088c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	441a      	add	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	00044b83 	.word	0x00044b83
 80008b0:	3b9aca00 	.word	0x3b9aca00

080008b4 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	Flush_C_ROSserial(m_c_rosSerial);
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <HAL_UART_TxCpltCallback+0x1c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f982 	bl	8002bca <Flush_C_ROSserial>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000180 	.word	0x20000180

080008d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	Reset_C_ROSserial(m_c_rosSerial);
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <HAL_UART_RxCpltCallback+0x1c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 f961 	bl	8002ba8 <Reset_C_ROSserial>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000180 	.word	0x20000180

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f009 fc28 	bl	800a14c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f824 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 f8e0 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000904:	f000 f8b6 	bl	8000a74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000908:	f000 f88a 	bl	8000a20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  m_c_rosSerial = new_C_ROSserial();
 800090c:	f002 f93e 	bl	8002b8c <new_C_ROSserial>
 8000910:	4602      	mov	r2, r0
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <main+0x4c>)
 8000914:	601a      	str	r2, [r3, #0]
  MX_MEMS_Init();
 8000916:	f00d f88d 	bl	800da34 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091a:	2120      	movs	r1, #32
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <main+0x50>)
 800091e:	f00a fbc8 	bl	800b0b2 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  MX_MEMS_Process(m_c_rosSerial);
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <main+0x4c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f00d f88a 	bl	800da40 <MX_MEMS_Process>
	  SpinOnce_C_ROSserial(m_c_rosSerial);
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <main+0x4c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f95b 	bl	8002bec <SpinOnce_C_ROSserial>
	  HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f009 fc7a 	bl	800a230 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800093c:	e7ed      	b.n	800091a <main+0x26>
 800093e:	bf00      	nop
 8000940:	20000180 	.word	0x20000180
 8000944:	40020000 	.word	0x40020000

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2230      	movs	r2, #48	; 0x30
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f00d fa45 	bl	800dde6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <SystemClock_Config+0xd0>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <SystemClock_Config+0xd0>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <SystemClock_Config+0xd0>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <SystemClock_Config+0xd4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <SystemClock_Config+0xd4>)
 8000996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <SystemClock_Config+0xd4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ca:	2307      	movs	r3, #7
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00b fb96 	bl	800c104 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009de:	f000 f8e9 	bl	8000bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2102      	movs	r1, #2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00b fdf0 	bl	800c5e4 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a0a:	f000 f8d3 	bl	8000bb4 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	; 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART2_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f00b ffb6 	bl	800c9c8 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f8a7 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000384 	.word	0x20000384
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2010      	movs	r0, #16
 8000a9c:	f009 fcc5 	bl	800a42a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	f009 fcde 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2011      	movs	r0, #17
 8000aac:	f009 fcbd 	bl	800a42a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ab0:	2011      	movs	r0, #17
 8000ab2:	f009 fcd6 	bl	800a462 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a30      	ldr	r2, [pc, #192]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0xe0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <MX_GPIO_Init+0xe4>)
 8000b50:	f00a fa96 	bl	800b080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_GPIO_Init+0xec>)
 8000b6a:	f00a f825 	bl	800abb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <MX_GPIO_Init+0xe4>)
 8000b86:	f00a f817 	bl	800abb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2028      	movs	r0, #40	; 0x28
 8000b90:	f009 fc4b 	bl	800a42a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f009 fc64 	bl	800a462 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f009 fc06 	bl	800a414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a4b      	ldr	r2, [pc, #300]	; (8000d60 <HAL_UART_MspInit+0x14c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	f040 8090 	bne.w	8000d58 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <HAL_UART_MspInit+0x150>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a48      	ldr	r2, [pc, #288]	; (8000d64 <HAL_UART_MspInit+0x150>)
 8000c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b46      	ldr	r3, [pc, #280]	; (8000d64 <HAL_UART_MspInit+0x150>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <HAL_UART_MspInit+0x150>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <HAL_UART_MspInit+0x150>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <HAL_UART_MspInit+0x150>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c70:	230c      	movs	r3, #12
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c80:	2307      	movs	r3, #7
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4837      	ldr	r0, [pc, #220]	; (8000d68 <HAL_UART_MspInit+0x154>)
 8000c8c:	f009 ff94 	bl	800abb8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000c92:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <HAL_UART_MspInit+0x15c>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000c98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9e:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cd0:	4826      	ldr	r0, [pc, #152]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000cd2:	f009 fbe1 	bl	800a498 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000cdc:	f7ff ff6a 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce6:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <HAL_UART_MspInit+0x158>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000cee:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <HAL_UART_MspInit+0x164>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d2e:	f009 fbb3 	bl	800a498 <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000d38:	f7ff ff3c 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <HAL_UART_MspInit+0x160>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2026      	movs	r0, #38	; 0x26
 8000d4e:	f009 fb6c 	bl	800a42a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d52:	2026      	movs	r0, #38	; 0x26
 8000d54:	f009 fb85 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	200002c4 	.word	0x200002c4
 8000d70:	40026088 	.word	0x40026088
 8000d74:	20000324 	.word	0x20000324
 8000d78:	400260a0 	.word	0x400260a0

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f009 fa0e 	bl	800a1f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <DMA1_Stream5_IRQHandler+0x10>)
 8000dde:	f009 fc83 	bl	800a6e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200002c4 	.word	0x200002c4

08000dec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <DMA1_Stream6_IRQHandler+0x10>)
 8000df2:	f009 fc79 	bl	800a6e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000324 	.word	0x20000324

08000e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <USART2_IRQHandler+0x10>)
 8000e06:	f00b ff25 	bl	800cc54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000384 	.word	0x20000384

08000e14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <BSP_I2C1_Init+0x5c>)
 8000e32:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <BSP_I2C1_Init+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	4912      	ldr	r1, [pc, #72]	; (8000e84 <BSP_I2C1_Init+0x60>)
 8000e3c:	600a      	str	r2, [r1, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d117      	bne.n	8000e72 <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e44:	f00a fdec 	bl	800ba20 <HAL_I2C_GetState>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d111      	bne.n	8000e72 <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e50:	f000 f8e2 	bl	8001018 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10b      	bne.n	8000e72 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e5c:	f000 f8a8 	bl	8000fb0 <MX_I2C1_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000e66:	f06f 0307 	mvn.w	r3, #7
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	e001      	b.n	8000e72 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
        }
      }	
    }
  }
  return ret;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200003f0 	.word	0x200003f0
 8000e80:	40005400 	.word	0x40005400
 8000e84:	20000184 	.word	0x20000184

08000e88 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d014      	beq.n	8000ec4 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */ 
      I2C1_MspDeInit(&hi2c1);
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <BSP_I2C1_DeInit+0x4c>)
 8000eae:	f000 f8ed 	bl	800108c <I2C1_MspDeInit>
  #endif  
      /* DeInit the I2C */ 
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <BSP_I2C1_DeInit+0x4c>)
 8000eb4:	f00a fa50 	bl	800b358 <HAL_I2C_DeInit>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000ebe:	f06f 0307 	mvn.w	r3, #7
 8000ec2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000184 	.word	0x20000184
 8000ed4:	200003f0 	.word	0x200003f0

08000ed8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	81fb      	strh	r3, [r7, #14]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	81bb      	strh	r3, [r7, #12]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ef2:	89ba      	ldrh	r2, [r7, #12]
 8000ef4:	89f9      	ldrh	r1, [r7, #14]
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <BSP_I2C1_WriteReg+0x60>)
 8000f08:	f00a fa6a 	bl	800b3e0 <HAL_I2C_Mem_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <BSP_I2C1_WriteReg+0x60>)
 8000f14:	f00a fd92 	bl	800ba3c <HAL_I2C_GetError>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d103      	bne.n	8000f26 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f1e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e002      	b.n	8000f2c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f26:	f06f 0303 	mvn.w	r3, #3
 8000f2a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f2c:	697b      	ldr	r3, [r7, #20]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200003f0 	.word	0x200003f0

08000f3c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	81fb      	strh	r3, [r7, #14]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	81bb      	strh	r3, [r7, #12]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	89f9      	ldrh	r1, [r7, #14]
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <BSP_I2C1_ReadReg+0x60>)
 8000f6c:	f00a fb32 	bl	800b5d4 <HAL_I2C_Mem_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00c      	beq.n	8000f90 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <BSP_I2C1_ReadReg+0x60>)
 8000f78:	f00a fd60 	bl	800ba3c <HAL_I2C_GetError>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d103      	bne.n	8000f8a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f82:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e002      	b.n	8000f90 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f8a:	f06f 0303 	mvn.w	r3, #3
 8000f8e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f90:	697b      	ldr	r3, [r7, #20]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200003f0 	.word	0x200003f0

08000fa0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000fa4:	f009 f938 	bl	800a218 <HAL_GetTick>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <MX_I2C1_Init+0x60>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <MX_I2C1_Init+0x64>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f00a f877 	bl	800b0e8 <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40005400 	.word	0x40005400
 8001014:	00061a80 	.word	0x00061a80

08001018 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <I2C1_MspInit+0x6c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a16      	ldr	r2, [pc, #88]	; (8001084 <I2C1_MspInit+0x6c>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <I2C1_MspInit+0x6c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104e:	2304      	movs	r3, #4
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <I2C1_MspInit+0x70>)
 800105a:	f009 fdad 	bl	800abb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <I2C1_MspInit+0x6c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a07      	ldr	r2, [pc, #28]	; (8001084 <I2C1_MspInit+0x6c>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <I2C1_MspInit+0x6c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <I2C1_MspDeInit+0x28>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <I2C1_MspDeInit+0x28>)
 800109a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80010a0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <I2C1_MspDeInit+0x2c>)
 80010a6:	f009 ff09 	bl	800aebc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010d6:	f00c fe41 	bl	800dd5c <__errno>
 80010da:	4602      	mov	r2, r0
 80010dc:	2316      	movs	r3, #22
 80010de:	6013      	str	r3, [r2, #0]
	return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x50>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x16>
		heap_end = &end;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <_sbrk+0x50>)
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <_sbrk+0x54>)
 8001114:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <_sbrk+0x50>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <_sbrk+0x50>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	466a      	mov	r2, sp
 8001126:	4293      	cmp	r3, r2
 8001128:	d907      	bls.n	800113a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800112a:	f00c fe17 	bl	800dd5c <__errno>
 800112e:	4602      	mov	r2, r0
 8001130:	230c      	movs	r3, #12
 8001132:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001138:	e006      	b.n	8001148 <_sbrk+0x48>
	}

	heap_end += incr;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <_sbrk+0x50>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a03      	ldr	r2, [pc, #12]	; (8001150 <_sbrk+0x50>)
 8001144:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000188 	.word	0x20000188
 8001154:	20000458 	.word	0x20000458

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SystemInit+0x28>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SystemInit+0x28>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SystemInit+0x28>)
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	609a      	str	r2, [r3, #8]
#endif
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <_ZN3ros3MsgC1Ev+0x1c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	0800e668 	.word	0x0800e668

080011c8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
      data()
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffe8 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3304      	adds	r3, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffce 	bl	8001184 <_ZN3ros4TimeC1Ev>
    {
    }
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	0800e650 	.word	0x0800e650

080011f8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6859      	ldr	r1, [r3, #4]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	0a19      	lsrs	r1, r3, #8
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	b2ca      	uxtb	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0c19      	lsrs	r1, r3, #16
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3302      	adds	r3, #2
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4413      	add	r3, r2
 8001234:	b2ca      	uxtb	r2, r1
 8001236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	0e19      	lsrs	r1, r3, #24
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3303      	adds	r3, #3
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3304      	adds	r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6899      	ldr	r1, [r3, #8]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	0a19      	lsrs	r1, r3, #8
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	4413      	add	r3, r2
 800126c:	b2ca      	uxtb	r2, r1
 800126e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	0c19      	lsrs	r1, r3, #16
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3302      	adds	r3, #2
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	0e19      	lsrs	r1, r3, #24
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3303      	adds	r3, #3
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3304      	adds	r3, #4
 8001298:	60fb      	str	r3, [r7, #12]
      return offset;
 800129a:	68fb      	ldr	r3, [r7, #12]
    }
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	440b      	add	r3, r1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3302      	adds	r3, #2
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	440b      	add	r3, r1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3303      	adds	r3, #3
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	440b      	add	r3, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	061b      	lsls	r3, r3, #24
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3301      	adds	r3, #1
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	440b      	add	r3, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3302      	adds	r3, #2
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	440b      	add	r3, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3303      	adds	r3, #3
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	440b      	add	r3, r1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3304      	adds	r3, #4
 8001360:	60fb      	str	r3, [r7, #12]
     return offset;
 8001362:	68fb      	ldr	r3, [r7, #12]
    }
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0800e078 	.word	0x0800e078

0800138c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	0800e088 	.word	0x0800e088

080013a8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fef8 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	809a      	strh	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
    {
    }
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800e638 	.word	0x0800e638
 80013ec:	0800e0ac 	.word	0x0800e0ac

080013f0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	8899      	ldrh	r1, [r3, #4]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	b2ca      	uxtb	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	889b      	ldrh	r3, [r3, #4]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b299      	uxth	r1, r3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3301      	adds	r3, #1
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	4413      	add	r3, r2
 800141c:	b2ca      	uxtb	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	3302      	adds	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fed2 	bl	80001d4 <strlen>
 8001430:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	69b9      	ldr	r1, [r7, #24]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fe75 	bl	800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3304      	adds	r3, #4
 8001444:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	18d0      	adds	r0, r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4619      	mov	r1, r3
 8001454:	f00c fcbc 	bl	800ddd0 <memcpy>
      offset += length_topic_name;
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4413      	add	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe feb5 	bl	80001d4 <strlen>
 800146a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	6979      	ldr	r1, [r7, #20]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fe58 	bl	800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	18d0      	adds	r0, r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4619      	mov	r1, r3
 800148e:	f00c fc9f 	bl	800ddd0 <memcpy>
      offset += length_message_type;
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	4413      	add	r3, r2
 8001498:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fe98 	bl	80001d4 <strlen>
 80014a4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	6939      	ldr	r1, [r7, #16]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fe3b 	bl	800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3304      	adds	r3, #4
 80014b8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	18d0      	adds	r0, r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00c fc82 	bl	800ddd0 <memcpy>
      offset += length_md5sum;
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4413      	add	r3, r2
 80014d2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	0a19      	lsrs	r1, r3, #8
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	0c19      	lsrs	r1, r3, #16
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3302      	adds	r3, #2
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	0e19      	lsrs	r1, r3, #24
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3303      	adds	r3, #3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	61fb      	str	r3, [r7, #28]
      return offset;
 800151c:	69fb      	ldr	r3, [r7, #28]
    }
 800151e:	4618      	mov	r0, r3
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001526:	b580      	push	{r7, lr}
 8001528:	b08a      	sub	sp, #40	; 0x28
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	889b      	ldrh	r3, [r3, #4]
 8001546:	b21a      	sxth	r2, r3
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	3301      	adds	r3, #1
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	440b      	add	r3, r1
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21b      	sxth	r3, r3
 800155a:	b29a      	uxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	3302      	adds	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	441a      	add	r2, r3
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fdf7 	bl	8002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	3304      	adds	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	429a      	cmp	r2, r3
 800158c:	d20c      	bcs.n	80015a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	441a      	add	r2, r3
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	440b      	add	r3, r1
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	e7ec      	b.n	8001582 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	4413      	add	r3, r2
 80015ae:	3b01      	subs	r3, #1
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	441a      	add	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	441a      	add	r2, r3
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fdc4 	bl	8002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	3304      	adds	r3, #4
 80015e2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	623b      	str	r3, [r7, #32]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	6a3a      	ldr	r2, [r7, #32]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d20c      	bcs.n	800160e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	441a      	add	r2, r3
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	440b      	add	r3, r1
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	3301      	adds	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	e7ec      	b.n	80015e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4413      	add	r3, r2
 8001614:	3b01      	subs	r3, #1
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3b01      	subs	r3, #1
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	441a      	add	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	441a      	add	r2, r3
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fd91 	bl	8002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	3304      	adds	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20c      	bcs.n	8001674 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	441a      	add	r2, r3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3b01      	subs	r3, #1
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	440b      	add	r3, r1
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3301      	adds	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e7ec      	b.n	800164e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	3b01      	subs	r3, #1
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	4413      	add	r3, r2
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	3b01      	subs	r3, #1
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	441a      	add	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	6839      	ldr	r1, [r7, #0]
 80016a2:	440a      	add	r2, r1
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	3301      	adds	r3, #1
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	440b      	add	r3, r1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	3302      	adds	r3, #2
 80016c2:	6839      	ldr	r1, [r7, #0]
 80016c4:	440b      	add	r3, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3303      	adds	r3, #3
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	440b      	add	r3, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	061b      	lsls	r3, r3, #24
 80016dc:	4313      	orrs	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	3304      	adds	r3, #4
 80016ea:	61bb      	str	r3, [r7, #24]
     return offset;
 80016ec:	69bb      	ldr	r3, [r7, #24]
    }
 80016ee:	4618      	mov	r0, r3
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	0800e0b0 	.word	0x0800e0b0

08001714 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	0800e0cc 	.word	0x0800e0cc

08001730 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd34 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	711a      	strb	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a04      	ldr	r2, [pc, #16]	; (8001760 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001750:	609a      	str	r2, [r3, #8]
    {
    }
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	0800e620 	.word	0x0800e620
 8001760:	0800e0ac 	.word	0x0800e0ac

08001764 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4413      	add	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	7912      	ldrb	r2, [r2, #4]
 800177c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd23 	bl	80001d4 <strlen>
 800178e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fcc6 	bl	800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	18d0      	adds	r0, r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f00c fb0d 	bl	800ddd0 <memcpy>
      offset += length_msg;
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
      return offset;
 80017be:	68fb      	ldr	r3, [r7, #12]
    }
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3301      	adds	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	441a      	add	r2, r3
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fcb6 	bl	8002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3304      	adds	r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	d20c      	bcs.n	800182a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	441a      	add	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3b01      	subs	r3, #1
 800181a:	6839      	ldr	r1, [r7, #0]
 800181c:	440b      	add	r3, r1
 800181e:	7812      	ldrb	r2, [r2, #0]
 8001820:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e7ec      	b.n	8001804 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	3b01      	subs	r3, #1
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3b01      	subs	r3, #1
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	441a      	add	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
     return offset;
 800184e:	693b      	ldr	r3, [r7, #16]
    }
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	0800e0f0 	.word	0x0800e0f0

08001874 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	0800e104 	.word	0x0800e104

08001890 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fc84 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 80018a0:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0800e608 	.word	0x0800e608

080018d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0a19      	lsrs	r1, r3, #8
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	3301      	adds	r3, #1
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4413      	add	r3, r2
 8001902:	b2ca      	uxtb	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0c19      	lsrs	r1, r3, #16
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3302      	adds	r3, #2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0e19      	lsrs	r1, r3, #24
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	3303      	adds	r3, #3
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3304      	adds	r3, #4
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	6a3a      	ldr	r2, [r7, #32]
 800193a:	429a      	cmp	r2, r3
 800193c:	d22b      	bcs.n	8001996 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800194c:	6939      	ldr	r1, [r7, #16]
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	0a19      	lsrs	r1, r3, #8
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3301      	adds	r3, #1
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	0c19      	lsrs	r1, r3, #16
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3302      	adds	r3, #2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	0e19      	lsrs	r1, r3, #24
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	3303      	adds	r3, #3
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	b2ca      	uxtb	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3304      	adds	r3, #4
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	3301      	adds	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	e7ce      	b.n	8001934 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6919      	ldr	r1, [r3, #16]
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	0a19      	lsrs	r1, r3, #8
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	0c19      	lsrs	r1, r3, #16
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3302      	adds	r3, #2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	0e19      	lsrs	r1, r3, #24
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3303      	adds	r3, #3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3304      	adds	r3, #4
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d22b      	bcs.n	8001a46 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	b2ca      	uxtb	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	0a19      	lsrs	r1, r3, #8
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3301      	adds	r3, #1
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2ca      	uxtb	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	0c19      	lsrs	r1, r3, #16
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3302      	adds	r3, #2
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	0e19      	lsrs	r1, r3, #24
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3303      	adds	r3, #3
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	b2ca      	uxtb	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	e7ce      	b.n	80019e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69d9      	ldr	r1, [r3, #28]
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2ca      	uxtb	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	0a19      	lsrs	r1, r3, #8
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	0c19      	lsrs	r1, r3, #16
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3302      	adds	r3, #2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2ca      	uxtb	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	0e19      	lsrs	r1, r3, #24
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3303      	adds	r3, #3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d228      	bcs.n	8001af0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fb92 	bl	80001d4 <strlen>
 8001ab0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	6979      	ldr	r1, [r7, #20]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fb35 	bl	800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	18d0      	adds	r0, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4619      	mov	r1, r3
 8001adc:	f00c f978 	bl	800ddd0 <memcpy>
      offset += length_stringsi;
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	3301      	adds	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e7d1      	b.n	8001a94 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001af2:	4618      	mov	r0, r3
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b08e      	sub	sp, #56	; 0x38
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	3301      	adds	r3, #1
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	6a3a      	ldr	r2, [r7, #32]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	3302      	adds	r3, #2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	3303      	adds	r3, #3
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	6a3a      	ldr	r2, [r7, #32]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	6a3a      	ldr	r2, [r7, #32]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d90a      	bls.n	8001b6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f00c f9f0 	bl	800df48 <realloc>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a3a      	ldr	r2, [r7, #32]
 8001b72:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b74:	2300      	movs	r3, #0
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d236      	bcs.n	8001bf0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	440a      	add	r2, r1
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	3301      	adds	r3, #1
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	440b      	add	r3, r1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	3302      	adds	r3, #2
 8001bac:	6839      	ldr	r1, [r7, #0]
 8001bae:	440b      	add	r3, r1
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	3301      	adds	r3, #1
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
 8001bee:	e7c3      	b.n	8001b78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0e:	3302      	adds	r3, #2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	3303      	adds	r3, #3
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	3304      	adds	r3, #4
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d90a      	bls.n	8001c56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f00c f97c 	bl	800df48 <realloc>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d236      	bcs.n	8001cd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	440a      	add	r2, r1
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	3301      	adds	r3, #1
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	440b      	add	r3, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	3302      	adds	r3, #2
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	440b      	add	r3, r1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	440b      	add	r3, r1
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	3304      	adds	r3, #4
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	3214      	adds	r2, #20
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd6:	e7c3      	b.n	8001c60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	3303      	adds	r3, #3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d90a      	bls.n	8001d3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f00c f908 	bl	800df48 <realloc>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d23f      	bcs.n	8001dd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	441a      	add	r2, r3
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fa01 	bl	8002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	3304      	adds	r3, #4
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d20c      	bcs.n	8001d94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	441a      	add	r2, r3
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6839      	ldr	r1, [r7, #0]
 8001d86:	440b      	add	r3, r1
 8001d88:	7812      	ldrb	r2, [r2, #0]
 8001d8a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3301      	adds	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	e7ec      	b.n	8001d6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	3b01      	subs	r3, #1
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	441a      	add	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	3220      	adds	r2, #32
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	3301      	adds	r3, #1
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd0:	e7ba      	b.n	8001d48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3738      	adds	r7, #56	; 0x38
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	0800e5bc 	.word	0x0800e5bc

08001df8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	0800e128 	.word	0x0800e128

08001e14 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
  }
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	425b      	negs	r3, r3
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <_ZN13STM32HardwareC1Ev+0x34>)
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000384 	.word	0x20000384

08001e88 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f804 	bl	8001e9e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f00a fe4e 	bl	800cb54 <HAL_UART_Receive_DMA>
    }
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ecc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffa9 	bl	8001e2c <_ZN13STM32Hardware10getRdmaIndEv>
 8001eda:	4603      	mov	r3, r0
 8001edc:	429c      	cmp	r4, r3
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ef0:	1c59      	adds	r1, r3, #1
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001f10:	68fb      	ldr	r3, [r7, #12]
    }
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}
	...

08001f1c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d108      	bne.n	8001f44 <_ZN13STM32Hardware5flushEv+0x28>
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <_ZN13STM32Hardware5flushEv+0x28>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <_ZN13STM32Hardware5flushEv+0x2a>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03f      	beq.n	8001fca <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d031      	beq.n	8001fc4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d20a      	bcs.n	8001f86 <_ZN13STM32Hardware5flushEv+0x6a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	e006      	b.n	8001f94 <_ZN13STM32Hardware5flushEv+0x78>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	89fa      	ldrh	r2, [r7, #14]
 8001faa:	4619      	mov	r1, r3
 8001fac:	f00a fd66 	bl	800ca7c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
      }
    }
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000018c 	.word	0x2000018c

08001fd8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
      int n = length;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fee:	bfa8      	it	ge
 8001ff0:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001ff4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ffc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4293      	cmp	r3, r2
 8002004:	bf28      	it	cs
 8002006:	4613      	movcs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	4618      	mov	r0, r3
 800201e:	f00b fed7 	bl	800ddd0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	4413      	add	r3, r2
 800202c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	429a      	cmp	r2, r3
 800203c:	d00b      	beq.n	8002056 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	18d1      	adds	r1, r2, r3
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	461a      	mov	r2, r3
 8002052:	f00b febd 	bl	800ddd0 <memcpy>
      }

      flush();
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f7ff ff60 	bl	8001f1c <_ZN13STM32Hardware5flushEv>
    }
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	f008 f8d4 	bl	800a218 <HAL_GetTick>
 8002070:	4603      	mov	r3, r0
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <_ZN9ROSserial11getInstanceEv>:

ROSserial * ROSserial::instance = NULL;

//	Singleton pattern design
ROSserial * ROSserial::getInstance()
{
 800207c:	b598      	push	{r3, r4, r7, lr}
 800207e:	af00      	add	r7, sp, #0
	if(!instance)
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <_ZN9ROSserial11getInstanceEv+0x2c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <_ZN9ROSserial11getInstanceEv+0x22>
	{
    	instance = new ROSserial();
 8002088:	f640 103c 	movw	r0, #2364	; 0x93c
 800208c:	f00b fe33 	bl	800dcf6 <_Znwj>
 8002090:	4603      	mov	r3, r0
 8002092:	461c      	mov	r4, r3
 8002094:	4620      	mov	r0, r4
 8002096:	f000 f809 	bl	80020ac <_ZN9ROSserialC1Ev>
 800209a:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN9ROSserial11getInstanceEv+0x2c>)
 800209c:	601c      	str	r4, [r3, #0]
    }

    return instance;
 800209e:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <_ZN9ROSserial11getInstanceEv+0x2c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd98      	pop	{r3, r4, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000190 	.word	0x20000190

080020ac <_ZN9ROSserialC1Ev>:

ROSserial::ROSserial()
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f88a 	bl	80021d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
{
   // Initialize ROS node
   this->nh.initNode();
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f906 	bl	80022d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
}
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZN9ROSserial11FlushBufferEv>:

bool ROSserial::FlushBuffer(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f916 	bl	800230a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80020de:	4603      	mov	r3, r0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff1b 	bl	8001f1c <_ZN13STM32Hardware5flushEv>

	return true;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZN9ROSserial11ResetBufferEv>:

bool ROSserial::ResetBuffer(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f905 	bl	800230a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002100:	4603      	mov	r3, r0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fecb 	bl	8001e9e <_ZN13STM32Hardware10reset_rbufEv>

	return true;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZN9ROSserial8SpinOnceEv>:

void ROSserial::SpinOnce(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	nh.spinOnce();
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f900 	bl	8002322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d80d      	bhi.n	800215a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	fa22 f103 	lsr.w	r1, r2, r3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e7ee      	b.n	8002138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d811      	bhi.n	80021a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	440a      	add	r2, r1
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	4611      	mov	r1, r2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	00d2      	lsls	r2, r2, #3
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e7ea      	b.n	800217a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	0800e5f4 	.word	0x0800e5f4

080021d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ffe8 	bl	80021b0 <_ZN3ros15NodeHandleBase_C1Ev>
 80021e0:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3304      	adds	r3, #4
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fe30 	bl	8001e50 <_ZN13STM32HardwareC1Ev>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fb46 	bl	8001890 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b18      	cmp	r3, #24
 800220c:	d80b      	bhi.n	8002226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e7f0      	b.n	8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b18      	cmp	r3, #24
 800222e:	d80a      	bhi.n	8002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002238:	2100      	movs	r1, #0
 800223a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3301      	adds	r3, #1
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e7f1      	b.n	800222a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002250:	d20a      	bcs.n	8002268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3301      	adds	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e7f0      	b.n	800224a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002272:	d20a      	bcs.n	800228a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	e7f0      	b.n	800226c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	0800e5e0 	.word	0x0800e5e0

080022d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fdd3 	bl	8001e88 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
  }
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fe98 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 8002334:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002344:	4293      	cmp	r3, r2
 8002346:	d903      	bls.n	8002350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	429a      	cmp	r2, r3
 8002364:	d903      	bls.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002374:	2b00      	cmp	r3, #0
 8002376:	d014      	beq.n	80023a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe71 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad2      	subs	r2, r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800238e:	429a      	cmp	r2, r3
 8002390:	bf8c      	ite	hi
 8002392:	2301      	movhi	r3, #1
 8002394:	2300      	movls	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800239c:	f06f 0301 	mvn.w	r3, #1
 80023a0:	e197      	b.n	80026d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
        }
      }
      int data = hardware_.read();
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fd8a 	bl	8001ec0 <_ZN13STM32Hardware4readEv>
 80023ac:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f2c0 8177 	blt.w	80026a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
        break;
      checksum_ += data;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023cc:	2b07      	cmp	r3, #7
 80023ce:	d11e      	bne.n	800240e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	b2d1      	uxtb	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	460a      	mov	r2, r1
 80023e8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1b4      	bne.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2208      	movs	r2, #8
 8002408:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800240c:	e7af      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002414:	2b00      	cmp	r3, #0
 8002416:	d128      	bne.n	800246a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d10d      	bne.n	800243a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f103 0214 	add.w	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002438:	e799      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe10 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	bf8c      	ite	hi
 8002452:	2301      	movhi	r3, #1
 8002454:	2300      	movls	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d088      	beq.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002464:	f06f 0301 	mvn.w	r3, #1
 8002468:	e133      	b.n	80026d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11b      	bne.n	80024ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
      {
        if (data == PROTOCOL_VER)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2bfe      	cmp	r3, #254	; 0xfe
 8002478:	d107      	bne.n	800248a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002488:	e771      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f43f af65 	beq.w	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f918 	bl	80026da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80024aa:	e760      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d113      	bne.n	80024de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
      {
        bytes_ = data;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80024dc:	e747      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d110      	bne.n	800250a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
      {
        bytes_ += data << 8;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002508:	e731      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002510:	2b04      	cmp	r3, #4
 8002512:	d116      	bne.n	8002542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
      {
        if ((checksum_ % 256) == 255)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800251a:	425a      	negs	r2, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	bf58      	it	pl
 8002522:	4253      	negpl	r3, r2
 8002524:	2bff      	cmp	r3, #255	; 0xff
 8002526:	d107      	bne.n	8002538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002536:	e71a      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002540:	e715      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10f      	bne.n	800256c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
      {
        topic_ = data;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800256a:	e700      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002572:	2b06      	cmp	r3, #6
 8002574:	d117      	bne.n	80025a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
      {
        topic_ += data << 8;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	441a      	add	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2207      	movs	r2, #7
 800258c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f aee9 	bne.w	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2208      	movs	r2, #8
 80025a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80025a4:	e6e3      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	f47f aede 	bne.w	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80025c0:	425a      	negs	r2, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	bf58      	it	pl
 80025c8:	4253      	negpl	r3, r2
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	f47f aecf 	bne.w	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d110      	bne.n	80025fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
          {
            requestSyncTime();
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f87d 	bl	80026da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f898 	bl	8002716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fa:	e06a      	b.n	80026d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002602:	2b0a      	cmp	r3, #10
 8002604:	d107      	bne.n	8002616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
          {
            syncTime(message_in);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f966 	bl	80028e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002614:	e6ab      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800261c:	2b06      	cmp	r3, #6
 800261e:	d10e      	bne.n	800263e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
          {
            req_param_resp.deserialize(message_in);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f7ff fa63 	bl	8001afa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800263c:	e697      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002644:	2b0b      	cmp	r3, #11
 8002646:	d104      	bne.n	8002652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
          {
            configured_ = false;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002650:	e68d      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002658:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f43f ae81 	beq.w	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002672:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f202 2222 	addw	r2, r2, #546	; 0x222
 800267c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002686:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800269e:	4611      	mov	r1, r2
 80026a0:	4798      	blx	r3
    while (true)
 80026a2:	e664      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80026a4:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00f      	beq.n	80026d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80026be:	4293      	cmp	r3, r2
 80026c0:	d906      	bls.n	80026d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
    {
      requestSyncTime();
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f809 	bl	80026da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 80026d0:	2300      	movs	r3, #0
  }
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fd6e 	bl	80011c8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f107 020c 	add.w	r2, r7, #12
 80026f6:	210a      	movs	r1, #10
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
    rt_time = hardware_.time();
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fcaf 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002716:	b590      	push	{r4, r7, lr}
 8002718:	b08b      	sub	sp, #44	; 0x2c
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fe40 	bl	80013a8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2b18      	cmp	r3, #24
 8002730:	dc66      	bgt.n	8002800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
    {
      if (publishers[i] != 0) // non-empty slot
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d059      	beq.n	80027f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe2>
      {
        ti.topic_id = publishers[i]->id_;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	b29b      	uxth	r3, r3
 8002756:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3308      	adds	r3, #8
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4608      	mov	r0, r1
 8002792:	4798      	blx	r3
 8002794:	4603      	mov	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4608      	mov	r0, r1
 80027c0:	4798      	blx	r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80027c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ca:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681c      	ldr	r4, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fb17 	bl	8001e14 <_ZN3ros9Publisher15getEndpointTypeEv>
 80027e6:	4601      	mov	r1, r0
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	461a      	mov	r2, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	47a0      	blx	r4
        HAL_Delay(50);	//	$$SFossaert : Python ROS node isn't fast enough
 80027f2:	2032      	movs	r0, #50	; 0x32
 80027f4:	f007 fd1c 	bl	800a230 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3301      	adds	r3, #1
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e795      	b.n	800272c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	2b18      	cmp	r3, #24
 8002808:	dc62      	bgt.n	80028d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d056      	beq.n	80028c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b2>
      {
        ti.topic_id = subscribers[i]->id_;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	b29b      	uxth	r3, r3
 800282a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3308      	adds	r3, #8
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4608      	mov	r0, r1
 800285c:	4798      	blx	r3
 800285e:	4603      	mov	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	f202 2222 	addw	r2, r2, #546	; 0x222
 800286a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4608      	mov	r0, r1
 8002882:	4798      	blx	r3
 8002884:	4603      	mov	r3, r0
 8002886:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681c      	ldr	r4, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	f202 2222 	addw	r2, r2, #546	; 0x222
 800289c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3304      	adds	r3, #4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4608      	mov	r0, r1
 80028b4:	4798      	blx	r3
 80028b6:	4601      	mov	r1, r0
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	461a      	mov	r2, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	47a0      	blx	r4
        HAL_Delay(50);	// $$SFossaert : Python ROS node isn't fast enough
 80028c2:	2032      	movs	r0, #50	; 0x32
 80028c4:	f007 fcb4 	bl	800a230 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e799      	b.n	8002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xee>
      }
    }
    configured_ = true;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80028d8:	bf00      	nop
 80028da:	372c      	adds	r7, #44	; 0x2c
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fc6a 	bl	80011c8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fbb3 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fcc9 	bl	80012a8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4915      	ldr	r1, [pc, #84]	; (8002970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800291c:	fba1 1303 	umull	r1, r3, r1, r3
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002926:	6939      	ldr	r1, [r7, #16]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800292c:	fba3 0302 	umull	r0, r3, r3, r2
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	440b      	add	r3, r1
 8002944:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	3304      	adds	r3, #4
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8a4 	bl	8002a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fb83 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	10624dd3 	.word	0x10624dd3
 8002974:	000f4240 	.word	0x000f4240

08002978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b63      	cmp	r3, #99	; 0x63
 8002988:	dd09      	ble.n	800299e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800299a:	2300      	movs	r3, #0
 800299c:	e077      	b.n	8002a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80029aa:	3207      	adds	r2, #7
 80029ac:	4611      	mov	r1, r2
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
 80029b2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	22fe      	movs	r2, #254	; 0xfe
 80029c0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	121b      	asrs	r3, r3, #8
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80029e8:	4413      	add	r3, r2
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	121b      	asrs	r3, r3, #8
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002a12:	2305      	movs	r3, #5
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3307      	adds	r3, #7
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	da0d      	bge.n	8002a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e7ec      	b.n	8002a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3307      	adds	r3, #7
 8002a40:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	425a      	negs	r2, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	bf58      	it	pl
 8002a4c:	4253      	negpl	r3, r2
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	6179      	str	r1, [r7, #20]
 8002a56:	43d2      	mvns	r2, r2
 8002a58:	b2d1      	uxtb	r1, r2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	460a      	mov	r2, r1
 8002a60:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6a:	dc0a      	bgt.n	8002a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1d18      	adds	r0, r3, #4
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7ff faad 	bl	8001fd8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	e005      	b.n	8002a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002a82:	4905      	ldr	r1, [pc, #20]	; (8002a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f849 	bl	8002b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	0800e14c 	.word	0x0800e14c

08002a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fada 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 8002ab0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4915      	ldr	r1, [pc, #84]	; (8002b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002aba:	fba1 1303 	umull	r1, r3, r1, r3
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002adc:	fb00 f303 	mul.w	r3, r0, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	1aca      	subs	r2, r1, r3
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002aec:	4413      	add	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fd feaa 	bl	800085c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	10624dd3 	.word	0x10624dd3
 8002b14:	000f4240 	.word	0x000f4240
 8002b18:	3b9aca00 	.word	0x3b9aca00

08002b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	2103      	movs	r1, #3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f804 	bl	8002b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	460b      	mov	r3, r1
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fdf0 	bl	8001730 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002b50:	7afb      	ldrb	r3, [r7, #11]
 8002b52:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f107 0214 	add.w	r2, r7, #20
 8002b62:	2107      	movs	r1, #7
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	4798      	blx	r3
  }
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    return configured_;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <new_C_ROSserial>:
#include "app_x-cube-mems1.h"

ROSserial * rosSerialInstance = NULL;

C_ROSserial_t * new_C_ROSserial(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	rosSerialInstance = rosSerialInstance->getInstance();
 8002b90:	f7ff fa74 	bl	800207c <_ZN9ROSserial11getInstanceEv>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <new_C_ROSserial+0x18>)
 8002b98:	601a      	str	r2, [r3, #0]

	return reinterpret_cast<C_ROSserial_t*>(rosSerialInstance);
 8002b9a:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <new_C_ROSserial+0x18>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000194 	.word	0x20000194

08002ba8 <Reset_C_ROSserial>:
{
	delete reinterpret_cast<ROSserial*>(c_ROSserial);
}

uint8_t Reset_C_ROSserial(C_ROSserial_t * c_ROSserial)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	if(NULL == c_ROSserial)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <Reset_C_ROSserial+0x12>
	{
		return false;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e003      	b.n	8002bc2 <Reset_C_ROSserial+0x1a>
	}

	return (bool) reinterpret_cast<ROSserial*>(c_ROSserial)->ResetBuffer();
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fa98 	bl	80020f0 <_ZN9ROSserial11ResetBufferEv>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <Flush_C_ROSserial>:

uint8_t Flush_C_ROSserial(C_ROSserial_t * c_ROSserial)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
	if(NULL == c_ROSserial)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <Flush_C_ROSserial+0x12>
	{
		return false;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e003      	b.n	8002be4 <Flush_C_ROSserial+0x1a>
	}

	return (bool) reinterpret_cast<ROSserial*>(c_ROSserial)->FlushBuffer();
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fa76 	bl	80020ce <_ZN9ROSserial11FlushBufferEv>
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <SpinOnce_C_ROSserial>:

void SpinOnce_C_ROSserial(C_ROSserial_t * c_ROSserial)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	reinterpret_cast<ROSserial*>(c_ROSserial)->SpinOnce();
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fa8c 	bl	8002112 <_ZN9ROSserial8SpinOnceEv>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c0a:	e003      	b.n	8002c14 <LoopCopyDataInit>

08002c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c12:	3104      	adds	r1, #4

08002c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c14:	480b      	ldr	r0, [pc, #44]	; (8002c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c1c:	d3f6      	bcc.n	8002c0c <CopyDataInit>
  ldr  r2, =_sbss
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c20:	e002      	b.n	8002c28 <LoopFillZerobss>

08002c22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c24:	f842 3b04 	str.w	r3, [r2], #4

08002c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c2c:	d3f9      	bcc.n	8002c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c2e:	f7fe fa93 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f00b f899 	bl	800dd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7fd fe5d 	bl	80008f4 <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c3c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002c40:	0800e738 	.word	0x0800e738
  ldr  r0, =_sdata
 8002c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c48:	20000164 	.word	0x20000164
  ldr  r2, =_sbss
 8002c4c:	20000164 	.word	0x20000164
  ldr  r3, = _ebss
 8002c50:	20000458 	.word	0x20000458

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e030      	b.n	8002cd2 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	7b1a      	ldrb	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <HTS221_RegisterBusIO+0x84>)
 8002cac:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <HTS221_RegisterBusIO+0x88>)
 8002cb2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4798      	blx	r3
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	e002      	b.n	8002cd2 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	080033e7 	.word	0x080033e7
 8002ce0:	08003449 	.word	0x08003449

08002ce4 <HTS221_Init>:
 * @param  pObj the device pObj
 * @param  Capabilities the device capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj, HTS221_Capabilities_t * Capabilities)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  if (pObj->is_initialized == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d119      	bne.n	8002d2c <HTS221_Init+0x48>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb0f 	bl	800331c <HTS221_Initialize>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HTS221_Init+0x26>
    {
      return HTS221_ERROR;
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d08:	e015      	b.n	8002d36 <HTS221_Init+0x52>
    }

    if(new_C_HTS221_rosService())
 8002d0a:	f001 fe8b 	bl	8004a24 <new_C_HTS221_rosService>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HTS221_Init+0x36>
    {
    	return HTS221_ERROR;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d18:	e00d      	b.n	8002d36 <HTS221_Init+0x52>
    }

    //	Initialize HTS221 ROS serial node
    if(HTS221_OK != HTS221_RosAdvertize(Capabilities))
 8002d1a:	6838      	ldr	r0, [r7, #0]
 8002d1c:	f001 feaa 	bl	8004a74 <HTS221_RosAdvertize>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HTS221_Init+0x48>
    {
    	return HTS221_ERROR;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d2a:	e004      	b.n	8002d36 <HTS221_Init+0x52>
    }
  }

  pObj->is_initialized = 1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d113      	bne.n	8002d78 <HTS221_DeInit+0x3a>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f87a 	bl	8002e4a <HTS221_HUM_Disable>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d60:	e00f      	b.n	8002d82 <HTS221_DeInit+0x44>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f98d 	bl	8003082 <HTS221_TEMP_Disable>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d72:	e006      	b.n	8002d82 <HTS221_DeInit+0x44>
    }

    del_C_HTS221_rosService();
 8002d74:	f001 fe6e 	bl	8004a54 <del_C_HTS221_rosService>
  }

  pObj->is_initialized = 0;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	331c      	adds	r3, #28
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fc5c 	bl	8003658 <hts221_device_id_get>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002daa:	e000      	b.n	8002dae <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HTS221_GetCapabilities+0x44>)
 8002dde:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <HTS221_GetCapabilities+0x44>)
 8002de4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	41480000 	.word	0x41480000

08002e00 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e015      	b.n	8002e42 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	331c      	adds	r3, #28
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc27 	bl	800367a <hts221_power_on_set>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e36:	e004      	b.n	8002e42 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e015      	b.n	8002e8c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	331c      	adds	r3, #28
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fc02 	bl	800367a <hts221_power_on_set>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e80:	e004      	b.n	8002e8c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f9c7 	bl	8003234 <HTS221_GetOutputDataRate>
 8002ea6:	4603      	mov	r3, r0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002ebc:	ed97 0a00 	vldr	s0, [r7]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f9fb 	bl	80032bc <HTS221_SetOutputDataRate>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	331c      	adds	r3, #28
 8002ede:	f107 0218 	add.w	r2, r7, #24
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fc70 	bl	80037ca <hts221_hum_adc_point_0_get>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef4:	e097      	b.n	8003026 <HTS221_HUM_GetHumidity+0x156>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 8002ef6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f02:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	331c      	adds	r3, #28
 8002f0a:	f107 0218 	add.w	r2, r7, #24
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fbd8 	bl	80036c6 <hts221_hum_rh_point_0_get>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f20:	e081      	b.n	8003026 <HTS221_HUM_GetHumidity+0x156>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8002f22:	7e3b      	ldrb	r3, [r7, #24]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	331c      	adds	r3, #28
 8002f34:	f107 0218 	add.w	r2, r7, #24
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fc56 	bl	80037ec <hts221_hum_adc_point_1_get>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4a:	e06c      	b.n	8003026 <HTS221_HUM_GetHumidity+0x156>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8002f4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f58:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	331c      	adds	r3, #28
 8002f60:	f107 0218 	add.w	r2, r7, #24
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fbc4 	bl	80036f4 <hts221_hum_rh_point_1_get>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f76:	e056      	b.n	8003026 <HTS221_HUM_GetHumidity+0x156>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8002f78:	7e3b      	ldrb	r3, [r7, #24]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f82:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f00a ff29 	bl	800dde6 <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	331c      	adds	r3, #28
 8002f98:	f107 021c 	add.w	r2, r7, #28
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fb38 	bl	8003614 <hts221_humidity_raw_get>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fae:	e03a      	b.n	8003026 <HTS221_HUM_GetHumidity+0x156>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002fb0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f9d5 	bl	8003374 <Linear_Interpolation>
 8002fca:	eef0 7a40 	vmov.f32	s15, s0
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	d503      	bpl.n	8002fec <HTS221_HUM_GetHumidity+0x11c>
  {
    *Value = 0.0f;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003030 <HTS221_HUM_GetHumidity+0x160>
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	dd02      	ble.n	8003006 <HTS221_HUM_GetHumidity+0x136>
  {
    *Value = 100.0f;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <HTS221_HUM_GetHumidity+0x164>)
 8003004:	601a      	str	r2, [r3, #0]
  }

  HTS221_RosSetHumidity(pObj, (double) *Value);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fa4e 	bl	80004ac <__aeabi_f2d>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	ec44 3b10 	vmov	d0, r3, r4
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 fd65 	bl	8004ae8 <HTS221_RosSetHumidity>
  HTS221_RosHumidityPublish(pObj);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f001 fd96 	bl	8004b50 <HTS221_RosHumidityPublish>

  return HTS221_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}
 800302e:	bf00      	nop
 8003030:	42c80000 	.word	0x42c80000
 8003034:	42c80000 	.word	0x42c80000

08003038 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e015      	b.n	800307a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	331c      	adds	r3, #28
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fb0b 	bl	800367a <hts221_power_on_set>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800306e:	e004      	b.n	800307a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e015      	b.n	80030c4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	331c      	adds	r3, #28
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fae6 	bl	800367a <hts221_power_on_set>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030b8:	e004      	b.n	80030c4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f8ab 	bl	8003234 <HTS221_GetOutputDataRate>
 80030de:	4603      	mov	r3, r0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80030f4:	ed97 0a00 	vldr	s0, [r7]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8df 	bl	80032bc <HTS221_SetOutputDataRate>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	331c      	adds	r3, #28
 8003116:	f107 0218 	add.w	r2, r7, #24
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fb76 	bl	800380e <hts221_temp_adc_point_0_get>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800312c:	e07e      	b.n	800322c <HTS221_TEMP_GetTemperature+0x124>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 800312e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313a:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	331c      	adds	r3, #28
 8003142:	f107 0218 	add.w	r2, r7, #24
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f000 faea 	bl	8003722 <hts221_temp_deg_point_0_get>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003158:	e068      	b.n	800322c <HTS221_TEMP_GetTemperature+0x124>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 800315a:	7e3b      	ldrb	r3, [r7, #24]
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003164:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	331c      	adds	r3, #28
 800316c:	f107 0218 	add.w	r2, r7, #24
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fb5c 	bl	8003830 <hts221_temp_adc_point_1_get>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003182:	e053      	b.n	800322c <HTS221_TEMP_GetTemperature+0x124>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8003184:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003190:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	331c      	adds	r3, #28
 8003198:	f107 0218 	add.w	r2, r7, #24
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fae9 	bl	8003776 <hts221_temp_deg_point_1_get>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ae:	e03d      	b.n	800322c <HTS221_TEMP_GetTemperature+0x124>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 80031b0:	7e3b      	ldrb	r3, [r7, #24]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	2202      	movs	r2, #2
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00a fe0d 	bl	800dde6 <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	331c      	adds	r3, #28
 80031d0:	f107 021c 	add.w	r2, r7, #28
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fa2d 	bl	8003636 <hts221_temperature_raw_get>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031e6:	e021      	b.n	800322c <HTS221_TEMP_GetTemperature+0x124>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80031e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	eeb0 0a67 	vmov.f32	s0, s15
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f8b9 	bl	8003374 <Linear_Interpolation>
 8003202:	eef0 7a40 	vmov.f32	s15, s0
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	edc3 7a00 	vstr	s15, [r3]

  HTS221_RosSetTemperature(pObj, (double) *Value);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f94b 	bl	80004ac <__aeabi_f2d>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	ec44 3b10 	vmov	d0, r3, r4
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f001 fc46 	bl	8004ab0 <HTS221_RosSetTemperature>
  HTS221_RosTemperaturePublish(pObj);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 fc7b 	bl	8004b20 <HTS221_RosTemperaturePublish>

  return HTS221_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3724      	adds	r7, #36	; 0x24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}

08003234 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	331c      	adds	r3, #28
 8003246:	f107 020b 	add.w	r2, r7, #11
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f983 	bl	8003558 <hts221_data_rate_get>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800325c:	e025      	b.n	80032aa <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d81d      	bhi.n	80032a0 <HTS221_GetOutputDataRate+0x6c>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HTS221_GetOutputDataRate+0x38>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003287 	.word	0x08003287
 8003274:	08003291 	.word	0x08003291
 8003278:	08003299 	.word	0x08003299
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
      break;
 8003284:	e010      	b.n	80032a8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800328c:	601a      	str	r2, [r3, #0]
      break;
 800328e:	e00b      	b.n	80032a8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HTS221_GetOutputDataRate+0x80>)
 8003294:	601a      	str	r2, [r3, #0]
      break;
 8003296:	e007      	b.n	80032a8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HTS221_GetOutputDataRate+0x84>)
 800329c:	601a      	str	r2, [r3, #0]
      break;
 800329e:	e003      	b.n	80032a8 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a4:	60fb      	str	r3, [r7, #12]
      break;
 80032a6:	bf00      	nop
  }

  return ret;
 80032a8:	68fb      	ldr	r3, [r7, #12]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40e00000 	.word	0x40e00000
 80032b8:	41480000 	.word	0x41480000

080032bc <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80032c8:	edd7 7a00 	vldr	s15, [r7]
 80032cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d801      	bhi.n	80032de <HTS221_SetOutputDataRate+0x22>
 80032da:	2301      	movs	r3, #1
 80032dc:	e00b      	b.n	80032f6 <HTS221_SetOutputDataRate+0x3a>
 80032de:	edd7 7a00 	vldr	s15, [r7]
 80032e2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	d801      	bhi.n	80032f4 <HTS221_SetOutputDataRate+0x38>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e000      	b.n	80032f6 <HTS221_SetOutputDataRate+0x3a>
 80032f4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80032f6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	331c      	adds	r3, #28
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f902 	bl	800350a <hts221_data_rate_set>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003310:	e000      	b.n	8003314 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	331c      	adds	r3, #28
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9a5 	bl	800367a <hts221_power_on_set>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800333a:	e017      	b.n	800336c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	331c      	adds	r3, #28
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f940 	bl	80035c8 <hts221_block_data_update_set>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003352:	e00b      	b.n	800336c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003354:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ffaf 	bl	80032bc <HTS221_SetOutputDataRate>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003368:	e000      	b.n	800336c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	ed93 7a03 	vldr	s14, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	edd3 7a01 	vldr	s15, [r3, #4]
 800338c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003390:	edd7 7a00 	vldr	s15, [r7]
 8003394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	edd3 6a02 	vldr	s13, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	ed93 6a00 	vldr	s12, [r3]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80033b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80033d8:	eeb0 0a67 	vmov.f32	s0, s15
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033e6:	b590      	push	{r4, r7, lr}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	461a      	mov	r2, r3
 80033f2:	460b      	mov	r3, r1
 80033f4:	72fb      	strb	r3, [r7, #11]
 80033f6:	4613      	mov	r3, r2
 80033f8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	695c      	ldr	r4, [r3, #20]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	7b1b      	ldrb	r3, [r3, #12]
 800340e:	b298      	uxth	r0, r3
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003416:	b2db      	uxtb	r3, r3
 8003418:	b299      	uxth	r1, r3
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	47a0      	blx	r4
 8003420:	4603      	mov	r3, r0
 8003422:	e00d      	b.n	8003440 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	695c      	ldr	r4, [r3, #20]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	7b1b      	ldrb	r3, [r3, #12]
 800342c:	b298      	uxth	r0, r3
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003434:	b2db      	uxtb	r3, r3
 8003436:	b299      	uxth	r1, r3
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	47a0      	blx	r4
 800343e:	4603      	mov	r3, r0
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}

08003448 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	460b      	mov	r3, r1
 8003456:	72fb      	strb	r3, [r7, #11]
 8003458:	4613      	mov	r3, r2
 800345a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10e      	bne.n	8003486 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	691c      	ldr	r4, [r3, #16]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	7b1b      	ldrb	r3, [r3, #12]
 8003470:	b298      	uxth	r0, r3
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003478:	b2db      	uxtb	r3, r3
 800347a:	b299      	uxth	r1, r3
 800347c:	893b      	ldrh	r3, [r7, #8]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	47a0      	blx	r4
 8003482:	4603      	mov	r3, r0
 8003484:	e00d      	b.n	80034a2 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	691c      	ldr	r4, [r3, #16]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	7b1b      	ldrb	r3, [r3, #12]
 800348e:	b298      	uxth	r0, r3
 8003490:	7afb      	ldrb	r3, [r7, #11]
 8003492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003496:	b2db      	uxtb	r3, r3
 8003498:	b299      	uxth	r1, r3
 800349a:	893b      	ldrh	r3, [r7, #8]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	47a0      	blx	r4
 80034a0:	4603      	mov	r3, r0
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}

080034aa <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 80034aa:	b590      	push	{r4, r7, lr}
 80034ac:	b087      	sub	sp, #28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	461a      	mov	r2, r3
 80034b6:	460b      	mov	r3, r1
 80034b8:	72fb      	strb	r3, [r7, #11]
 80034ba:	4613      	mov	r3, r2
 80034bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685c      	ldr	r4, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6898      	ldr	r0, [r3, #8]
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	7af9      	ldrb	r1, [r7, #11]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	47a0      	blx	r4
 80034ce:	6178      	str	r0, [r7, #20]
  return ret;
 80034d0:	697b      	ldr	r3, [r7, #20]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}

080034da <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80034da:	b590      	push	{r4, r7, lr}
 80034dc:	b087      	sub	sp, #28
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	461a      	mov	r2, r3
 80034e6:	460b      	mov	r3, r1
 80034e8:	72fb      	strb	r3, [r7, #11]
 80034ea:	4613      	mov	r3, r2
 80034ec:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6898      	ldr	r0, [r3, #8]
 80034f6:	893b      	ldrh	r3, [r7, #8]
 80034f8:	7af9      	ldrb	r1, [r7, #11]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	47a0      	blx	r4
 80034fe:	6178      	str	r0, [r7, #20]
  return ret;
 8003500:	697b      	ldr	r3, [r7, #20]
}
 8003502:	4618      	mov	r0, r3
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}

0800350a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003516:	f107 0208 	add.w	r2, r7, #8
 800351a:	2301      	movs	r3, #1
 800351c:	2120      	movs	r1, #32
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffc3 	bl	80034aa <hts221_read_reg>
 8003524:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	7a3b      	ldrb	r3, [r7, #8]
 8003536:	f362 0301 	bfi	r3, r2, #0, #2
 800353a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800353c:	f107 0208 	add.w	r2, r7, #8
 8003540:	2301      	movs	r3, #1
 8003542:	2120      	movs	r1, #32
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ffc8 	bl	80034da <hts221_write_reg>
 800354a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003562:	f107 0208 	add.w	r2, r7, #8
 8003566:	2301      	movs	r3, #1
 8003568:	2120      	movs	r1, #32
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff9d 	bl	80034aa <hts221_read_reg>
 8003570:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003572:	7a3b      	ldrb	r3, [r7, #8]
 8003574:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b03      	cmp	r3, #3
 800357c:	d81a      	bhi.n	80035b4 <hts221_data_rate_get+0x5c>
 800357e:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <hts221_data_rate_get+0x2c>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	08003595 	.word	0x08003595
 8003588:	0800359d 	.word	0x0800359d
 800358c:	080035a5 	.word	0x080035a5
 8003590:	080035ad 	.word	0x080035ad
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
      break;
 800359a:	e00f      	b.n	80035bc <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
      break;
 80035a2:	e00b      	b.n	80035bc <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
      break;
 80035aa:	e007      	b.n	80035bc <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2203      	movs	r2, #3
 80035b0:	701a      	strb	r2, [r3, #0]
      break;
 80035b2:	e003      	b.n	80035bc <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2204      	movs	r2, #4
 80035b8:	701a      	strb	r2, [r3, #0]
      break;
 80035ba:	bf00      	nop
  }

  return ret;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop

080035c8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80035d4:	f107 0208 	add.w	r2, r7, #8
 80035d8:	2301      	movs	r3, #1
 80035da:	2120      	movs	r1, #32
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff64 	bl	80034aa <hts221_read_reg>
 80035e2:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	7a3b      	ldrb	r3, [r7, #8]
 80035f4:	f362 0382 	bfi	r3, r2, #2, #1
 80035f8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80035fa:	f107 0208 	add.w	r2, r7, #8
 80035fe:	2301      	movs	r3, #1
 8003600:	2120      	movs	r1, #32
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff69 	bl	80034da <hts221_write_reg>
 8003608:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800360a:	68fb      	ldr	r3, [r7, #12]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800361e:	2302      	movs	r3, #2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	2128      	movs	r1, #40	; 0x28
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ff40 	bl	80034aa <hts221_read_reg>
 800362a:	60f8      	str	r0, [r7, #12]
  return ret;
 800362c:	68fb      	ldr	r3, [r7, #12]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003640:	2302      	movs	r3, #2
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	212a      	movs	r1, #42	; 0x2a
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff2f 	bl	80034aa <hts221_read_reg>
 800364c:	60f8      	str	r0, [r7, #12]
  return ret;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003662:	2301      	movs	r3, #1
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	210f      	movs	r1, #15
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff1e 	bl	80034aa <hts221_read_reg>
 800366e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003686:	f107 0208 	add.w	r2, r7, #8
 800368a:	2301      	movs	r3, #1
 800368c:	2120      	movs	r1, #32
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff0b 	bl	80034aa <hts221_read_reg>
 8003694:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <hts221_power_on_set+0x42>
    reg.pd = val;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	7a3b      	ldrb	r3, [r7, #8]
 80036a6:	f362 13c7 	bfi	r3, r2, #7, #1
 80036aa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80036ac:	f107 0208 	add.w	r2, r7, #8
 80036b0:	2301      	movs	r3, #1
 80036b2:	2120      	movs	r1, #32
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff10 	bl	80034da <hts221_write_reg>
 80036ba:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80036d0:	2301      	movs	r3, #1
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	2130      	movs	r1, #48	; 0x30
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fee7 	bl	80034aa <hts221_read_reg>
 80036dc:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 80036fe:	2301      	movs	r3, #1
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	2131      	movs	r1, #49	; 0x31
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fed0 	bl	80034aa <hts221_read_reg>
 800370a:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	701a      	strb	r2, [r3, #0]

  return ret;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800372c:	f107 020f 	add.w	r2, r7, #15
 8003730:	2301      	movs	r3, #1
 8003732:	2132      	movs	r1, #50	; 0x32
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff feb8 	bl	80034aa <hts221_read_reg>
 800373a:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d114      	bne.n	800376c <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8003742:	f107 0210 	add.w	r2, r7, #16
 8003746:	2301      	movs	r3, #1
 8003748:	2135      	movs	r1, #53	; 0x35
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fead 	bl	80034aa <hts221_read_reg>
 8003750:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003752:	7c3b      	ldrb	r3, [r7, #16]
 8003754:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	4413      	add	r3, r2
 8003764:	10db      	asrs	r3, r3, #3
 8003766:	b2da      	uxtb	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800376c:	697b      	ldr	r3, [r7, #20]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003780:	f107 020f 	add.w	r2, r7, #15
 8003784:	2301      	movs	r3, #1
 8003786:	2133      	movs	r1, #51	; 0x33
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fe8e 	bl	80034aa <hts221_read_reg>
 800378e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d114      	bne.n	80037c0 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8003796:	f107 0210 	add.w	r2, r7, #16
 800379a:	2301      	movs	r3, #1
 800379c:	2135      	movs	r1, #53	; 0x35
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fe83 	bl	80034aa <hts221_read_reg>
 80037a4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80037a6:	7c3b      	ldrb	r3, [r7, #16]
 80037a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	4413      	add	r3, r2
 80037b8:	10db      	asrs	r3, r3, #3
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80037c0:	697b      	ldr	r3, [r7, #20]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80037d4:	2302      	movs	r3, #2
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	2136      	movs	r1, #54	; 0x36
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fe65 	bl	80034aa <hts221_read_reg>
 80037e0:	60f8      	str	r0, [r7, #12]
  return ret;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80037f6:	2302      	movs	r3, #2
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	213a      	movs	r1, #58	; 0x3a
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fe54 	bl	80034aa <hts221_read_reg>
 8003802:	60f8      	str	r0, [r7, #12]
  return ret;
 8003804:	68fb      	ldr	r3, [r7, #12]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8003818:	2302      	movs	r3, #2
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	213c      	movs	r1, #60	; 0x3c
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fe43 	bl	80034aa <hts221_read_reg>
 8003824:	60f8      	str	r0, [r7, #12]
  return ret;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800383a:	2302      	movs	r3, #2
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	213e      	movs	r1, #62	; 0x3e
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fe32 	bl	80034aa <hts221_read_reg>
 8003846:	60f8      	str	r0, [r7, #12]
  return ret;
 8003848:	68fb      	ldr	r3, [r7, #12]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint) {};
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68d8      	ldr	r0, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6891      	ldr	r1, [r2, #8]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	4798      	blx	r3
 800389e:	4603      	mov	r3, r0
  };
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fc78 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3308      	adds	r3, #8
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fc5b 	bl	8001184 <_ZN3ros4TimeC1Ev>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80038d2:	611a      	str	r2, [r3, #16]
    {
    }
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	0800e6b0 	.word	0x0800e6b0
 80038e4:	0800e188 	.word	0x0800e188

080038e8 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	b2ca      	uxtb	r2, r1
 8003902:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0a19      	lsrs	r1, r3, #8
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3301      	adds	r3, #1
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	4413      	add	r3, r2
 8003912:	b2ca      	uxtb	r2, r1
 8003914:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	0c19      	lsrs	r1, r3, #16
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3302      	adds	r3, #2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	4413      	add	r3, r2
 8003924:	b2ca      	uxtb	r2, r1
 8003926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0e19      	lsrs	r1, r3, #24
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3303      	adds	r3, #3
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	4413      	add	r3, r2
 8003936:	b2ca      	uxtb	r2, r1
 8003938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	b2ca      	uxtb	r2, r1
 800394c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0a19      	lsrs	r1, r3, #8
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4413      	add	r3, r2
 800395c:	b2ca      	uxtb	r2, r1
 800395e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	0c19      	lsrs	r1, r3, #16
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3302      	adds	r3, #2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4413      	add	r3, r2
 800396e:	b2ca      	uxtb	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0e19      	lsrs	r1, r3, #24
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3303      	adds	r3, #3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	4413      	add	r3, r2
 8003980:	b2ca      	uxtb	r2, r1
 8003982:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3304      	adds	r3, #4
 8003988:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68d9      	ldr	r1, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	4413      	add	r3, r2
 8003994:	b2ca      	uxtb	r2, r1
 8003996:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0a19      	lsrs	r1, r3, #8
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	b2ca      	uxtb	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	0c19      	lsrs	r1, r3, #16
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3302      	adds	r3, #2
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	b2ca      	uxtb	r2, r1
 80039ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0e19      	lsrs	r1, r3, #24
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3303      	adds	r3, #3
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	b2ca      	uxtb	r2, r1
 80039cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3304      	adds	r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fbfb 	bl	80001d4 <strlen>
 80039de:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fb9e 	bl	800212a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	18d0      	adds	r0, r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f00a f9e5 	bl	800ddd0 <memcpy>
      offset += length_frame_id;
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    }
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	440b      	add	r3, r1
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3302      	adds	r3, #2
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	440b      	add	r3, r1
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	3303      	adds	r3, #3
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	440b      	add	r3, r1
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3301      	adds	r3, #1
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	440b      	add	r3, r1
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	440b      	add	r3, r1
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3303      	adds	r3, #3
 8003abe:	6839      	ldr	r1, [r7, #0]
 8003ac0:	440b      	add	r3, r1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	440b      	add	r3, r1
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3302      	adds	r3, #2
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	440b      	add	r3, r1
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3303      	adds	r3, #3
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	440b      	add	r3, r1
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3304      	adds	r3, #4
 8003b26:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fb16 	bl	8002166 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d20c      	bcs.n	8003b6a <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	441a      	add	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	440b      	add	r3, r1
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e7ec      	b.n	8003b44 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3b01      	subs	r3, #1
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
     return offset;
 8003b8e:	693b      	ldr	r3, [r7, #16]
    }
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	0800e18c 	.word	0x0800e18c

08003bb4 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	0800e19c 	.word	0x0800e19c

08003bd0 <_ZN11sensor_msgs11TemperatureC1Ev>:
      typedef double _temperature_type;
      _temperature_type temperature;
      typedef double _variance_type;
      _variance_type variance;

    Temperature():
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
      header(),
      temperature(0),
      variance(0)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fae4 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <_ZN11sensor_msgs11TemperatureC1Ev+0x48>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fe5c 	bl	80038a8 <_ZN8std_msgs6HeaderC1Ev>
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	f04f 0400 	mov.w	r4, #0
 8003bfa:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}
 8003c16:	bf00      	nop
 8003c18:	0800e698 	.word	0x0800e698

08003c1c <_ZNK11sensor_msgs11Temperature9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1d18      	adds	r0, r3, #4
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7ff fe57 	bl	80038e8 <_ZNK8std_msgs6Header9serializeEPh>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003c48:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8003c4c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	440a      	add	r2, r1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8003c5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	f04f 0400 	mov.w	r4, #0
 8003c66:	0a0b      	lsrs	r3, r1, #8
 8003c68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c6c:	0a14      	lsrs	r4, r2, #8
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	3201      	adds	r2, #1
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	440a      	add	r2, r1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8003c7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	f04f 0400 	mov.w	r4, #0
 8003c86:	0c0b      	lsrs	r3, r1, #16
 8003c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c8c:	0c14      	lsrs	r4, r2, #16
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	3202      	adds	r2, #2
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	440a      	add	r2, r1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8003c9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	0e0b      	lsrs	r3, r1, #24
 8003ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003cac:	0e14      	lsrs	r4, r2, #24
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	3203      	adds	r2, #3
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_temperature.base >> (8 * 4)) & 0xFF;
 8003cba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f04f 0400 	mov.w	r4, #0
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	2400      	movs	r4, #0
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	3204      	adds	r2, #4
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_temperature.base >> (8 * 5)) & 0xFF;
 8003cd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	f04f 0400 	mov.w	r4, #0
 8003ce2:	0a13      	lsrs	r3, r2, #8
 8003ce4:	2400      	movs	r4, #0
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	3205      	adds	r2, #5
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	440a      	add	r2, r1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_temperature.base >> (8 * 6)) & 0xFF;
 8003cf2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	f04f 0400 	mov.w	r4, #0
 8003cfe:	0c13      	lsrs	r3, r2, #16
 8003d00:	2400      	movs	r4, #0
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	3206      	adds	r2, #6
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	440a      	add	r2, r1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_temperature.base >> (8 * 7)) & 0xFF;
 8003d0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	0e13      	lsrs	r3, r2, #24
 8003d1c:	2400      	movs	r4, #0
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	3207      	adds	r2, #7
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	440a      	add	r2, r1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->temperature);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.real = this->variance;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003d36:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 8003d3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	440a      	add	r2, r1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 8003d48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	f04f 0400 	mov.w	r4, #0
 8003d54:	0a0b      	lsrs	r3, r1, #8
 8003d56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d5a:	0a14      	lsrs	r4, r2, #8
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	3201      	adds	r2, #1
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	440a      	add	r2, r1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 8003d68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	f04f 0400 	mov.w	r4, #0
 8003d74:	0c0b      	lsrs	r3, r1, #16
 8003d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d7a:	0c14      	lsrs	r4, r2, #16
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	3202      	adds	r2, #2
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	440a      	add	r2, r1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 8003d88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	f04f 0400 	mov.w	r4, #0
 8003d94:	0e0b      	lsrs	r3, r1, #24
 8003d96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d9a:	0e14      	lsrs	r4, r2, #24
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	3203      	adds	r2, #3
 8003da0:	6839      	ldr	r1, [r7, #0]
 8003da2:	440a      	add	r2, r1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 8003da8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	f04f 0400 	mov.w	r4, #0
 8003db4:	0013      	movs	r3, r2
 8003db6:	2400      	movs	r4, #0
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	3204      	adds	r2, #4
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 8003dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	f04f 0400 	mov.w	r4, #0
 8003dd0:	0a13      	lsrs	r3, r2, #8
 8003dd2:	2400      	movs	r4, #0
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	3205      	adds	r2, #5
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	440a      	add	r2, r1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 8003de0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	f04f 0400 	mov.w	r4, #0
 8003dec:	0c13      	lsrs	r3, r2, #16
 8003dee:	2400      	movs	r4, #0
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	3206      	adds	r2, #6
 8003df4:	6839      	ldr	r1, [r7, #0]
 8003df6:	440a      	add	r2, r1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 8003dfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	f04f 0400 	mov.w	r4, #0
 8003e08:	0e13      	lsrs	r3, r2, #24
 8003e0a:	2400      	movs	r4, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	3207      	adds	r2, #7
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	440a      	add	r2, r1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->variance);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	61fb      	str	r3, [r7, #28]
      return offset;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
    }
 8003e20:	4618      	mov	r0, r3
 8003e22:	3724      	adds	r7, #36	; 0x24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <_ZN11sensor_msgs11Temperature11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	b08b      	sub	sp, #44	; 0x2c
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1d18      	adds	r0, r3, #4
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4413      	add	r3, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	f7ff fde8 	bl	8003a18 <_ZN8std_msgs6Header11deserializeEPh>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	4413      	add	r3, r2
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_temperature;
      u_temperature.base = 0;
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	f04f 0400 	mov.w	r4, #0
 8003e58:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	68b8      	ldr	r0, [r7, #8]
 8003e64:	4403      	add	r3, r0
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	fa5f fa83 	uxtb.w	sl, r3
 8003e6c:	f04f 0b00 	mov.w	fp, #0
 8003e70:	ea4a 0301 	orr.w	r3, sl, r1
 8003e74:	ea4b 0402 	orr.w	r4, fp, r2
 8003e78:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e7c:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	3301      	adds	r3, #1
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b2d9      	uxtb	r1, r3
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	e9c7 3400 	strd	r3, r4, [r7]
 8003e9c:	0213      	lsls	r3, r2, #8
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	020b      	lsls	r3, r1, #8
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003eb0:	ea43 030a 	orr.w	r3, r3, sl
 8003eb4:	ea44 040b 	orr.w	r4, r4, fp
 8003eb8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ebc:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b2d9      	uxtb	r1, r3
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	f04f 0400 	mov.w	r4, #0
 8003ed8:	e9c7 3400 	strd	r3, r4, [r7]
 8003edc:	0413      	lsls	r3, r2, #16
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	040b      	lsls	r3, r1, #16
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ef0:	ea43 030a 	orr.w	r3, r3, sl
 8003ef4:	ea44 040b 	orr.w	r4, r4, fp
 8003ef8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003efc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	3303      	adds	r3, #3
 8003f04:	68b8      	ldr	r0, [r7, #8]
 8003f06:	4403      	add	r3, r0
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003f14:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8003f18:	ea41 0308 	orr.w	r3, r1, r8
 8003f1c:	ea42 0409 	orr.w	r4, r2, r9
 8003f20:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	68b8      	ldr	r0, [r7, #8]
 8003f2e:	4403      	add	r3, r0
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	fa5f f883 	uxtb.w	r8, r3
 8003f36:	f04f 0900 	mov.w	r9, #0
 8003f3a:	f04f 0a00 	mov.w	sl, #0
 8003f3e:	f04f 0b00 	mov.w	fp, #0
 8003f42:	46c3      	mov	fp, r8
 8003f44:	f04f 0a00 	mov.w	sl, #0
 8003f48:	ea4a 0301 	orr.w	r3, sl, r1
 8003f4c:	ea4b 0402 	orr.w	r4, fp, r2
 8003f50:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	3305      	adds	r3, #5
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	4403      	add	r3, r0
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	fa5f f883 	uxtb.w	r8, r3
 8003f66:	f04f 0900 	mov.w	r9, #0
 8003f6a:	f04f 0a00 	mov.w	sl, #0
 8003f6e:	f04f 0b00 	mov.w	fp, #0
 8003f72:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8003f76:	f04f 0a00 	mov.w	sl, #0
 8003f7a:	ea4a 0301 	orr.w	r3, sl, r1
 8003f7e:	ea4b 0402 	orr.w	r4, fp, r2
 8003f82:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	3306      	adds	r3, #6
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	4403      	add	r3, r0
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	fa5f f883 	uxtb.w	r8, r3
 8003f98:	f04f 0900 	mov.w	r9, #0
 8003f9c:	f04f 0a00 	mov.w	sl, #0
 8003fa0:	f04f 0b00 	mov.w	fp, #0
 8003fa4:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8003fa8:	f04f 0a00 	mov.w	sl, #0
 8003fac:	ea4a 0301 	orr.w	r3, sl, r1
 8003fb0:	ea4b 0402 	orr.w	r4, fp, r2
 8003fb4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003fb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	4403      	add	r3, r0
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	fa5f f883 	uxtb.w	r8, r3
 8003fca:	f04f 0900 	mov.w	r9, #0
 8003fce:	f04f 0a00 	mov.w	sl, #0
 8003fd2:	f04f 0b00 	mov.w	fp, #0
 8003fd6:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8003fda:	f04f 0a00 	mov.w	sl, #0
 8003fde:	ea4a 0301 	orr.w	r3, sl, r1
 8003fe2:	ea4b 0402 	orr.w	r4, fp, r2
 8003fe6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->temperature = u_temperature.real;
 8003fea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->temperature);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.base = 0;
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	f04f 0400 	mov.w	r4, #0
 8004002:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004006:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	4403      	add	r3, r0
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	fa5f f883 	uxtb.w	r8, r3
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	ea48 0301 	orr.w	r3, r8, r1
 800401e:	ea49 0402 	orr.w	r4, r9, r2
 8004022:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004026:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	3301      	adds	r3, #1
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2d9      	uxtb	r1, r3
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0a00 	mov.w	sl, #0
 800403e:	f04f 0b00 	mov.w	fp, #0
 8004042:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8004046:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 800404a:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 800404e:	ea4a 0308 	orr.w	r3, sl, r8
 8004052:	ea4b 0409 	orr.w	r4, fp, r9
 8004056:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800405a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	3302      	adds	r3, #2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4413      	add	r3, r2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b2d9      	uxtb	r1, r3
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0a00 	mov.w	sl, #0
 8004072:	f04f 0b00 	mov.w	fp, #0
 8004076:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 800407a:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 800407e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8004082:	ea4a 0308 	orr.w	r3, sl, r8
 8004086:	ea4b 0409 	orr.w	r4, fp, r9
 800408a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800408e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	3303      	adds	r3, #3
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	4403      	add	r3, r0
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f04f 0400 	mov.w	r4, #0
 80040a2:	0a1e      	lsrs	r6, r3, #8
 80040a4:	061d      	lsls	r5, r3, #24
 80040a6:	ea41 0305 	orr.w	r3, r1, r5
 80040aa:	ea42 0406 	orr.w	r4, r2, r6
 80040ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80040b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	3304      	adds	r3, #4
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	4403      	add	r3, r0
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2dd      	uxtb	r5, r3
 80040c2:	f04f 0600 	mov.w	r6, #0
 80040c6:	f04f 0800 	mov.w	r8, #0
 80040ca:	f04f 0900 	mov.w	r9, #0
 80040ce:	46a9      	mov	r9, r5
 80040d0:	f04f 0800 	mov.w	r8, #0
 80040d4:	ea48 0301 	orr.w	r3, r8, r1
 80040d8:	ea49 0402 	orr.w	r4, r9, r2
 80040dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80040e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	3305      	adds	r3, #5
 80040e8:	68b8      	ldr	r0, [r7, #8]
 80040ea:	4403      	add	r3, r0
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b2dd      	uxtb	r5, r3
 80040f0:	f04f 0600 	mov.w	r6, #0
 80040f4:	f04f 0800 	mov.w	r8, #0
 80040f8:	f04f 0900 	mov.w	r9, #0
 80040fc:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8004100:	f04f 0800 	mov.w	r8, #0
 8004104:	ea48 0301 	orr.w	r3, r8, r1
 8004108:	ea49 0402 	orr.w	r4, r9, r2
 800410c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004110:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	3306      	adds	r3, #6
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	4403      	add	r3, r0
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b2dd      	uxtb	r5, r3
 8004120:	f04f 0600 	mov.w	r6, #0
 8004124:	f04f 0800 	mov.w	r8, #0
 8004128:	f04f 0900 	mov.w	r9, #0
 800412c:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8004130:	f04f 0800 	mov.w	r8, #0
 8004134:	ea48 0301 	orr.w	r3, r8, r1
 8004138:	ea49 0402 	orr.w	r4, r9, r2
 800413c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004140:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	3307      	adds	r3, #7
 8004148:	68b8      	ldr	r0, [r7, #8]
 800414a:	4403      	add	r3, r0
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2dd      	uxtb	r5, r3
 8004150:	f04f 0600 	mov.w	r6, #0
 8004154:	f04f 0800 	mov.w	r8, #0
 8004158:	f04f 0900 	mov.w	r9, #0
 800415c:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8004160:	f04f 0800 	mov.w	r8, #0
 8004164:	ea48 0301 	orr.w	r3, r8, r1
 8004168:	ea49 0402 	orr.w	r4, r9, r2
 800416c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->variance = u_variance.real;
 8004170:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->variance);
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	3308      	adds	r3, #8
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004182:	4618      	mov	r0, r3
 8004184:	372c      	adds	r7, #44	; 0x2c
 8004186:	46bd      	mov	sp, r7
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800418c <_ZN11sensor_msgs11Temperature7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Temperature"; };
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <_ZN11sensor_msgs11Temperature7getTypeEv+0x18>)
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	0800e1c0 	.word	0x0800e1c0

080041a8 <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    const char * getMD5(){ return "ff71b307acdbe7c871a5a6d7ed359100"; };
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <_ZN11sensor_msgs11Temperature6getMD5Ev+0x18>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	0800e1d8 	.word	0x0800e1d8

080041c4 <_ZN11sensor_msgs16RelativeHumidityC1Ev>:
      typedef double _relative_humidity_type;
      _relative_humidity_type relative_humidity;
      typedef double _variance_type;
      _variance_type variance;

    RelativeHumidity():
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
      header(),
      relative_humidity(0),
      variance(0)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc ffea 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <_ZN11sensor_msgs16RelativeHumidityC1Ev+0x48>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fb62 	bl	80038a8 <_ZN8std_msgs6HeaderC1Ev>
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	f04f 0400 	mov.w	r4, #0
 80041fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	bf00      	nop
 800420c:	0800e680 	.word	0x0800e680

08004210 <_ZNK11sensor_msgs16RelativeHumidity9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1d18      	adds	r0, r3, #4
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	4413      	add	r3, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7ff fb5d 	bl	80038e8 <_ZNK8std_msgs6Header9serializeEPh>
 800422e:	4602      	mov	r2, r0
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_relative_humidity;
      u_relative_humidity.real = this->relative_humidity;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800423c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_relative_humidity.base >> (8 * 0)) & 0xFF;
 8004240:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	440a      	add	r2, r1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_relative_humidity.base >> (8 * 1)) & 0xFF;
 800424e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	0a0b      	lsrs	r3, r1, #8
 800425c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004260:	0a14      	lsrs	r4, r2, #8
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	3201      	adds	r2, #1
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	440a      	add	r2, r1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_relative_humidity.base >> (8 * 2)) & 0xFF;
 800426e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f04f 0400 	mov.w	r4, #0
 800427a:	0c0b      	lsrs	r3, r1, #16
 800427c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004280:	0c14      	lsrs	r4, r2, #16
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	3202      	adds	r2, #2
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	440a      	add	r2, r1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_relative_humidity.base >> (8 * 3)) & 0xFF;
 800428e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	0e0b      	lsrs	r3, r1, #24
 800429c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042a0:	0e14      	lsrs	r4, r2, #24
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	3203      	adds	r2, #3
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	440a      	add	r2, r1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_relative_humidity.base >> (8 * 4)) & 0xFF;
 80042ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	f04f 0400 	mov.w	r4, #0
 80042ba:	0013      	movs	r3, r2
 80042bc:	2400      	movs	r4, #0
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	3204      	adds	r2, #4
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	440a      	add	r2, r1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_relative_humidity.base >> (8 * 5)) & 0xFF;
 80042ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	f04f 0400 	mov.w	r4, #0
 80042d6:	0a13      	lsrs	r3, r2, #8
 80042d8:	2400      	movs	r4, #0
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	3205      	adds	r2, #5
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	440a      	add	r2, r1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_relative_humidity.base >> (8 * 6)) & 0xFF;
 80042e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	f04f 0400 	mov.w	r4, #0
 80042f2:	0c13      	lsrs	r3, r2, #16
 80042f4:	2400      	movs	r4, #0
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	3206      	adds	r2, #6
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	440a      	add	r2, r1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_relative_humidity.base >> (8 * 7)) & 0xFF;
 8004302:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	f04f 0400 	mov.w	r4, #0
 800430e:	0e13      	lsrs	r3, r2, #24
 8004310:	2400      	movs	r4, #0
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	3207      	adds	r2, #7
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	440a      	add	r2, r1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->relative_humidity);
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3308      	adds	r3, #8
 8004322:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.real = this->variance;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800432a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 800432e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	440a      	add	r2, r1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 800433c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	0a0b      	lsrs	r3, r1, #8
 800434a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800434e:	0a14      	lsrs	r4, r2, #8
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	3201      	adds	r2, #1
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	440a      	add	r2, r1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 800435c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0c0b      	lsrs	r3, r1, #16
 800436a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800436e:	0c14      	lsrs	r4, r2, #16
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	3202      	adds	r2, #2
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	440a      	add	r2, r1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 800437c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	f04f 0400 	mov.w	r4, #0
 8004388:	0e0b      	lsrs	r3, r1, #24
 800438a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800438e:	0e14      	lsrs	r4, r2, #24
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	3203      	adds	r2, #3
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	440a      	add	r2, r1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 800439c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f04f 0400 	mov.w	r4, #0
 80043a8:	0013      	movs	r3, r2
 80043aa:	2400      	movs	r4, #0
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	3204      	adds	r2, #4
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	440a      	add	r2, r1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 80043b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	f04f 0400 	mov.w	r4, #0
 80043c4:	0a13      	lsrs	r3, r2, #8
 80043c6:	2400      	movs	r4, #0
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	3205      	adds	r2, #5
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	440a      	add	r2, r1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 80043d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	0c13      	lsrs	r3, r2, #16
 80043e2:	2400      	movs	r4, #0
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	3206      	adds	r2, #6
 80043e8:	6839      	ldr	r1, [r7, #0]
 80043ea:	440a      	add	r2, r1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 80043f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	f04f 0400 	mov.w	r4, #0
 80043fc:	0e13      	lsrs	r3, r2, #24
 80043fe:	2400      	movs	r4, #0
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	3207      	adds	r2, #7
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	440a      	add	r2, r1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->variance);
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3308      	adds	r3, #8
 8004410:	61fb      	str	r3, [r7, #28]
      return offset;
 8004412:	69fb      	ldr	r3, [r7, #28]
    }
 8004414:	4618      	mov	r0, r3
 8004416:	3724      	adds	r7, #36	; 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <_ZN11sensor_msgs16RelativeHumidity11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	b08b      	sub	sp, #44	; 0x2c
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1d18      	adds	r0, r3, #4
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	4619      	mov	r1, r3
 8004438:	f7ff faee 	bl	8003a18 <_ZN8std_msgs6Header11deserializeEPh>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	4413      	add	r3, r2
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_relative_humidity;
      u_relative_humidity.base = 0;
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	f04f 0400 	mov.w	r4, #0
 800444c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004450:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	68b8      	ldr	r0, [r7, #8]
 8004458:	4403      	add	r3, r0
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	fa5f fa83 	uxtb.w	sl, r3
 8004460:	f04f 0b00 	mov.w	fp, #0
 8004464:	ea4a 0301 	orr.w	r3, sl, r1
 8004468:	ea4b 0402 	orr.w	r4, fp, r2
 800446c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004470:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	3301      	adds	r3, #1
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4413      	add	r3, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2d9      	uxtb	r1, r3
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	e9c7 3400 	strd	r3, r4, [r7]
 8004490:	0213      	lsls	r3, r2, #8
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	020b      	lsls	r3, r1, #8
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80044a4:	ea43 030a 	orr.w	r3, r3, sl
 80044a8:	ea44 040b 	orr.w	r4, r4, fp
 80044ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044b0:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	3302      	adds	r3, #2
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4413      	add	r3, r2
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	b2d9      	uxtb	r1, r3
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	e9c7 3400 	strd	r3, r4, [r7]
 80044d0:	0413      	lsls	r3, r2, #16
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	040b      	lsls	r3, r1, #16
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80044e4:	ea43 030a 	orr.w	r3, r3, sl
 80044e8:	ea44 040b 	orr.w	r4, r4, fp
 80044ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	3303      	adds	r3, #3
 80044f8:	68b8      	ldr	r0, [r7, #8]
 80044fa:	4403      	add	r3, r0
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f04f 0400 	mov.w	r4, #0
 8004504:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8004508:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800450c:	ea41 0308 	orr.w	r3, r1, r8
 8004510:	ea42 0409 	orr.w	r4, r2, r9
 8004514:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004518:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	3304      	adds	r3, #4
 8004520:	68b8      	ldr	r0, [r7, #8]
 8004522:	4403      	add	r3, r0
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	fa5f f883 	uxtb.w	r8, r3
 800452a:	f04f 0900 	mov.w	r9, #0
 800452e:	f04f 0a00 	mov.w	sl, #0
 8004532:	f04f 0b00 	mov.w	fp, #0
 8004536:	46c3      	mov	fp, r8
 8004538:	f04f 0a00 	mov.w	sl, #0
 800453c:	ea4a 0301 	orr.w	r3, sl, r1
 8004540:	ea4b 0402 	orr.w	r4, fp, r2
 8004544:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	3305      	adds	r3, #5
 8004550:	68b8      	ldr	r0, [r7, #8]
 8004552:	4403      	add	r3, r0
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	fa5f f883 	uxtb.w	r8, r3
 800455a:	f04f 0900 	mov.w	r9, #0
 800455e:	f04f 0a00 	mov.w	sl, #0
 8004562:	f04f 0b00 	mov.w	fp, #0
 8004566:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 800456a:	f04f 0a00 	mov.w	sl, #0
 800456e:	ea4a 0301 	orr.w	r3, sl, r1
 8004572:	ea4b 0402 	orr.w	r4, fp, r2
 8004576:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800457a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	3306      	adds	r3, #6
 8004582:	68b8      	ldr	r0, [r7, #8]
 8004584:	4403      	add	r3, r0
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	fa5f f883 	uxtb.w	r8, r3
 800458c:	f04f 0900 	mov.w	r9, #0
 8004590:	f04f 0a00 	mov.w	sl, #0
 8004594:	f04f 0b00 	mov.w	fp, #0
 8004598:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 800459c:	f04f 0a00 	mov.w	sl, #0
 80045a0:	ea4a 0301 	orr.w	r3, sl, r1
 80045a4:	ea4b 0402 	orr.w	r4, fp, r2
 80045a8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_relative_humidity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80045ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	3307      	adds	r3, #7
 80045b4:	68b8      	ldr	r0, [r7, #8]
 80045b6:	4403      	add	r3, r0
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	fa5f f883 	uxtb.w	r8, r3
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	f04f 0a00 	mov.w	sl, #0
 80045c6:	f04f 0b00 	mov.w	fp, #0
 80045ca:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80045ce:	f04f 0a00 	mov.w	sl, #0
 80045d2:	ea4a 0301 	orr.w	r3, sl, r1
 80045d6:	ea4b 0402 	orr.w	r4, fp, r2
 80045da:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->relative_humidity = u_relative_humidity.real;
 80045de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->relative_humidity);
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	3308      	adds	r3, #8
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.base = 0;
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	f04f 0400 	mov.w	r4, #0
 80045f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80045fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	68b8      	ldr	r0, [r7, #8]
 8004602:	4403      	add	r3, r0
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	fa5f f883 	uxtb.w	r8, r3
 800460a:	f04f 0900 	mov.w	r9, #0
 800460e:	ea48 0301 	orr.w	r3, r8, r1
 8004612:	ea49 0402 	orr.w	r4, r9, r2
 8004616:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800461a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	3301      	adds	r3, #1
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2d9      	uxtb	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0a00 	mov.w	sl, #0
 8004632:	f04f 0b00 	mov.w	fp, #0
 8004636:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 800463a:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 800463e:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8004642:	ea4a 0308 	orr.w	r3, sl, r8
 8004646:	ea4b 0409 	orr.w	r4, fp, r9
 800464a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800464e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	3302      	adds	r3, #2
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2d9      	uxtb	r1, r3
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0a00 	mov.w	sl, #0
 8004666:	f04f 0b00 	mov.w	fp, #0
 800466a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 800466e:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8004672:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8004676:	ea4a 0308 	orr.w	r3, sl, r8
 800467a:	ea4b 0409 	orr.w	r4, fp, r9
 800467e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004682:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	3303      	adds	r3, #3
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	4403      	add	r3, r0
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	0a1e      	lsrs	r6, r3, #8
 8004698:	061d      	lsls	r5, r3, #24
 800469a:	ea41 0305 	orr.w	r3, r1, r5
 800469e:	ea42 0406 	orr.w	r4, r2, r6
 80046a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80046a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	3304      	adds	r3, #4
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	4403      	add	r3, r0
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b2dd      	uxtb	r5, r3
 80046b6:	f04f 0600 	mov.w	r6, #0
 80046ba:	f04f 0800 	mov.w	r8, #0
 80046be:	f04f 0900 	mov.w	r9, #0
 80046c2:	46a9      	mov	r9, r5
 80046c4:	f04f 0800 	mov.w	r8, #0
 80046c8:	ea48 0301 	orr.w	r3, r8, r1
 80046cc:	ea49 0402 	orr.w	r4, r9, r2
 80046d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80046d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	3305      	adds	r3, #5
 80046dc:	68b8      	ldr	r0, [r7, #8]
 80046de:	4403      	add	r3, r0
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b2dd      	uxtb	r5, r3
 80046e4:	f04f 0600 	mov.w	r6, #0
 80046e8:	f04f 0800 	mov.w	r8, #0
 80046ec:	f04f 0900 	mov.w	r9, #0
 80046f0:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80046f4:	f04f 0800 	mov.w	r8, #0
 80046f8:	ea48 0301 	orr.w	r3, r8, r1
 80046fc:	ea49 0402 	orr.w	r4, r9, r2
 8004700:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004704:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	3306      	adds	r3, #6
 800470c:	68b8      	ldr	r0, [r7, #8]
 800470e:	4403      	add	r3, r0
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2dd      	uxtb	r5, r3
 8004714:	f04f 0600 	mov.w	r6, #0
 8004718:	f04f 0800 	mov.w	r8, #0
 800471c:	f04f 0900 	mov.w	r9, #0
 8004720:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8004724:	f04f 0800 	mov.w	r8, #0
 8004728:	ea48 0301 	orr.w	r3, r8, r1
 800472c:	ea49 0402 	orr.w	r4, r9, r2
 8004730:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004734:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	3307      	adds	r3, #7
 800473c:	68b8      	ldr	r0, [r7, #8]
 800473e:	4403      	add	r3, r0
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b2dd      	uxtb	r5, r3
 8004744:	f04f 0600 	mov.w	r6, #0
 8004748:	f04f 0800 	mov.w	r8, #0
 800474c:	f04f 0900 	mov.w	r9, #0
 8004750:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8004754:	f04f 0800 	mov.w	r8, #0
 8004758:	ea48 0301 	orr.w	r3, r8, r1
 800475c:	ea49 0402 	orr.w	r4, r9, r2
 8004760:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->variance = u_variance.real;
 8004764:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->variance);
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	3308      	adds	r3, #8
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004776:	4618      	mov	r0, r3
 8004778:	372c      	adds	r7, #44	; 0x2c
 800477a:	46bd      	mov	sp, r7
 800477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004780 <_ZN11sensor_msgs16RelativeHumidity7getTypeEv>:

    const char * getType(){ return "sensor_msgs/RelativeHumidity"; };
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <_ZN11sensor_msgs16RelativeHumidity7getTypeEv+0x18>)
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	0800e1fc 	.word	0x0800e1fc

0800479c <_ZN11sensor_msgs16RelativeHumidity6getMD5Ev>:
    const char * getMD5(){ return "8730015b05955b7e992ce29a2678d90f"; };
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <_ZN11sensor_msgs16RelativeHumidity6getMD5Ev+0x18>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	0800e21c 	.word	0x0800e21c

080047b8 <_ZN17HTS221_rosService11getInstanceEv>:
#include "hts221_rosService.h"

HTS221_rosService * HTS221_rosService::HTS221_Instance = NULL;

HTS221_rosService * HTS221_rosService::getInstance()
{
 80047b8:	b598      	push	{r3, r4, r7, lr}
 80047ba:	af00      	add	r7, sp, #0
	if(!HTS221_Instance)
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <_ZN17HTS221_rosService11getInstanceEv+0x28>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <_ZN17HTS221_rosService11getInstanceEv+0x20>
	{
		HTS221_Instance = new HTS221_rosService();
 80047c4:	2034      	movs	r0, #52	; 0x34
 80047c6:	f009 fa96 	bl	800dcf6 <_Znwj>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461c      	mov	r4, r3
 80047ce:	4620      	mov	r0, r4
 80047d0:	f000 f832 	bl	8004838 <_ZN17HTS221_rosServiceC1Ev>
 80047d4:	4b02      	ldr	r3, [pc, #8]	; (80047e0 <_ZN17HTS221_rosService11getInstanceEv+0x28>)
 80047d6:	601c      	str	r4, [r3, #0]
	}

	return HTS221_Instance;
 80047d8:	4b01      	ldr	r3, [pc, #4]	; (80047e0 <_ZN17HTS221_rosService11getInstanceEv+0x28>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd98      	pop	{r3, r4, r7, pc}
 80047e0:	20000198 	.word	0x20000198

080047e4 <_ZN17HTS221_rosServiceC1EPKcPN11sensor_msgs11TemperatureES1_PNS2_16RelativeHumidityE>:

HTS221_rosService::HTS221_rosService(const char * HTS221_temp_desc,
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
		const char * HTS221_hum_desc,
		sensor_msgs::RelativeHumidity * HTS221_hum_sensor) :
		HTS221_air_temperature_t_(HTS221_temp_sensor),
		HTS221_air_temperature_publisher_t(HTS221_temp_desc, HTS221_temp_sensor),
		HTS221_air_humidity_t_(HTS221_hum_sensor),
		HTS221_air_humidity_publisher_t(HTS221_hum_desc, HTS221_hum_sensor)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f103 0008 	add.w	r0, r3, #8
 8004804:	2300      	movs	r3, #0
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	f7ff f822 	bl	8003852 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	61da      	str	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f103 0020 	add.w	r0, r3, #32
 800481a:	2300      	movs	r3, #0
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	f7ff f817 	bl	8003852 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
{
	//	TODO Check if node handler has already been initialized
	//	and initialize node if not already done
	serialInstance = serialInstance->getInstance();
 8004824:	f7fd fc2a 	bl	800207c <_ZN9ROSserial11getInstanceEv>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_ZN17HTS221_rosServiceC1Ev>:


// Use delegating constructor.
HTS221_rosService::HTS221_rosService() : HTS221_rosService("HTS221_Air_Temperature",
 8004838:	b5b0      	push	{r4, r5, r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af02      	add	r7, sp, #8
 800483e:	6078      	str	r0, [r7, #4]
		new sensor_msgs::Temperature(),
 8004840:	2028      	movs	r0, #40	; 0x28
 8004842:	f009 fa58 	bl	800dcf6 <_Znwj>
 8004846:	4603      	mov	r3, r0
 8004848:	461d      	mov	r5, r3
		"HTS221_Air_Humidity",
		new sensor_msgs::RelativeHumidity())
 800484a:	4628      	mov	r0, r5
 800484c:	f7ff f9c0 	bl	8003bd0 <_ZN11sensor_msgs11TemperatureC1Ev>
 8004850:	2028      	movs	r0, #40	; 0x28
 8004852:	f009 fa50 	bl	800dcf6 <_Znwj>
 8004856:	4603      	mov	r3, r0
 8004858:	461c      	mov	r4, r3
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff fcb2 	bl	80041c4 <_ZN11sensor_msgs16RelativeHumidityC1Ev>
 8004860:	9400      	str	r4, [sp, #0]
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <_ZN17HTS221_rosServiceC1Ev+0x40>)
 8004864:	462a      	mov	r2, r5
 8004866:	4905      	ldr	r1, [pc, #20]	; (800487c <_ZN17HTS221_rosServiceC1Ev+0x44>)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ffbb 	bl	80047e4 <_ZN17HTS221_rosServiceC1EPKcPN11sensor_msgs11TemperatureES1_PNS2_16RelativeHumidityE>
{

}
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bdb0      	pop	{r4, r5, r7, pc}
 8004878:	0800e240 	.word	0x0800e240
 800487c:	0800e254 	.word	0x0800e254

08004880 <_ZN17HTS221_rosService27HTS221_AdvertizeTemperatureEv>:

int32_t HTS221_rosService::HTS221_AdvertizeTemperature(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	if(NULL == serialInstance)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <_ZN17HTS221_rosService27HTS221_AdvertizeTemperatureEv+0x14>
	{
		return diagnostic_msgs::DiagnosticStatus::ERROR;
 8004890:	2302      	movs	r3, #2
 8004892:	e011      	b.n	80048b8 <_ZN17HTS221_rosService27HTS221_AdvertizeTemperatureEv+0x38>
	}

	//	TODO : Compete the diagnostic by competing the error msg
	if(!serialInstance->nh.advertise(HTS221_air_temperature_publisher_t))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3308      	adds	r3, #8
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f000 f851 	bl	8004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f083 0301 	eor.w	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <_ZN17HTS221_rosService27HTS221_AdvertizeTemperatureEv+0x36>
	{
		return (int32_t) diagnostic_msgs::DiagnosticStatus::ERROR;
 80048b2:	2302      	movs	r3, #2
 80048b4:	e000      	b.n	80048b8 <_ZN17HTS221_rosService27HTS221_AdvertizeTemperatureEv+0x38>
	}

	return diagnostic_msgs::DiagnosticStatus::OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <_ZN17HTS221_rosService24HTS221_AdvertizeHumidityEv>:

int32_t HTS221_rosService::HTS221_AdvertizeHumidity(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	if(NULL == serialInstance)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <_ZN17HTS221_rosService24HTS221_AdvertizeHumidityEv+0x14>
	{
		return diagnostic_msgs::DiagnosticStatus::ERROR;
 80048d0:	2302      	movs	r3, #2
 80048d2:	e011      	b.n	80048f8 <_ZN17HTS221_rosService24HTS221_AdvertizeHumidityEv+0x38>
	}

	//	TODO : Compete the diagnostic by competing the error msg
	if(!serialInstance->nh.advertise(HTS221_air_humidity_publisher_t))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3320      	adds	r3, #32
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 f831 	bl	8004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f083 0301 	eor.w	r3, r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <_ZN17HTS221_rosService24HTS221_AdvertizeHumidityEv+0x36>
	{
		return (int32_t) diagnostic_msgs::DiagnosticStatus::ERROR;
 80048f2:	2302      	movs	r3, #2
 80048f4:	e000      	b.n	80048f8 <_ZN17HTS221_rosService24HTS221_AdvertizeHumidityEv+0x38>
	}

	return diagnostic_msgs::DiagnosticStatus::OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <_ZN17HTS221_rosService25HTS221_TemperaturePublishEv>:

int32_t HTS221_rosService::HTS221_TemperaturePublish(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	return (int32_t) this->HTS221_air_temperature_publisher_t.publish(HTS221_air_temperature_t_);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0208 	add.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe ffb3 	bl	8003880 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 800491a:	4603      	mov	r3, r0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <_ZN17HTS221_rosService22HTS221_HumidityPublishEv>:

int32_t HTS221_rosService::HTS221_HumidityPublish(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	return (int32_t) this->HTS221_air_humidity_publisher_t.publish(HTS221_air_humidity_t_);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f103 0220 	add.w	r2, r3, #32
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7fe ffa1 	bl	8003880 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b18      	cmp	r3, #24
 800495a:	dc1e      	bgt.n	800499a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d111      	bne.n	8004992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	60da      	str	r2, [r3, #12]
        return true;
 800498e:	2301      	movs	r3, #1
 8004990:	e004      	b.n	800499c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e7dd      	b.n	8004956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800499a:	2300      	movs	r3, #0
  }
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <_ZN17HTS221_rosService24HTS221_air_temperature_tEv>:
    ros::Publisher HTS221_air_temperature_publisher_t;
    sensor_msgs::RelativeHumidity *HTS221_air_humidity_t_;
    ros::Publisher HTS221_air_humidity_publisher_t;

public:
    sensor_msgs::Temperature * HTS221_air_temperature_t()
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
    {
    	if(NULL != serialInstance)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d010      	beq.n	80049da <_ZN17HTS221_rosService24HTS221_air_temperature_tEv+0x32>
    	{
        	HTS221_air_temperature_t_->header.stamp = serialInstance->nh.now();
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685c      	ldr	r4, [r3, #4]
 80049c2:	463b      	mov	r3, r7
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f8da 	bl	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80049cc:	f104 030c 	add.w	r3, r4, #12
 80049d0:	463a      	mov	r2, r7
 80049d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049d6:	e883 0003 	stmia.w	r3, {r0, r1}
    	}

    	return HTS221_air_temperature_t_;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
    }
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd90      	pop	{r4, r7, pc}

080049e6 <_ZN17HTS221_rosService21HTS221_air_humidity_tEv>:
    const sensor_msgs::Temperature * HTS221_air_temperature_t() const { return HTS221_air_temperature_t_; }

    sensor_msgs::RelativeHumidity * HTS221_air_humidity_t()
 80049e6:	b590      	push	{r4, r7, lr}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
    {
    	if(NULL != serialInstance)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d010      	beq.n	8004a18 <_ZN17HTS221_rosService21HTS221_air_humidity_tEv+0x32>
    	{
    		HTS221_air_humidity_t_->header.stamp = serialInstance->nh.now();
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	69dc      	ldr	r4, [r3, #28]
 8004a00:	463b      	mov	r3, r7
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f8bb 	bl	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8004a0a:	f104 030c 	add.w	r3, r4, #12
 8004a0e:	463a      	mov	r2, r7
 8004a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a14:	e883 0003 	stmia.w	r3, {r0, r1}
    	}

    	return HTS221_air_humidity_t_;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	69db      	ldr	r3, [r3, #28]
    }
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd90      	pop	{r4, r7, pc}

08004a24 <new_C_HTS221_rosService>:
static C_HTS221_rosService_t * rosHTS221Instance = NULL;
/**
 * Explicit constructor
 */
uint32_t new_C_HTS221_rosService(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
	if(NULL != (rosHTS221Instance = reinterpret_cast<C_HTS221_rosService_t*>(HTS221_rosService::getInstance())))
 8004a28:	f7ff fec6 	bl	80047b8 <_ZN17HTS221_rosService11getInstanceEv>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <new_C_HTS221_rosService+0x2c>)
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <new_C_HTS221_rosService+0x2c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <new_C_HTS221_rosService+0x24>
	{
		return HTS221_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e001      	b.n	8004a4c <new_C_HTS221_rosService+0x28>
	}

	return HTS221_ERROR;
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	2000019c 	.word	0x2000019c

08004a54 <del_C_HTS221_rosService>:
/**
 * Explicit destructor
 */
void del_C_HTS221_rosService(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
	delete reinterpret_cast<HTS221_rosService*>(rosHTS221Instance);
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <del_C_HTS221_rosService+0x1c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2134      	movs	r1, #52	; 0x34
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f009 f947 	bl	800dcf2 <_ZdlPvj>

	rosHTS221Instance = NULL;
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <del_C_HTS221_rosService+0x1c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000019c 	.word	0x2000019c

08004a74 <HTS221_RosAdvertize>:
 * @param  C_HTS221_rosService the ROSserial object reference
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RosAdvertize(HTS221_Capabilities_t *Capabilities)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	if(Capabilities->Temperature)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HTS221_RosAdvertize+0x1a>
	{
		reinterpret_cast<HTS221_rosService*>(rosHTS221Instance)->HTS221_AdvertizeTemperature();
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HTS221_RosAdvertize+0x38>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fef9 	bl	8004880 <_ZN17HTS221_rosService27HTS221_AdvertizeTemperatureEv>
	}
	if(Capabilities->Humidity)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	789b      	ldrb	r3, [r3, #2]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <HTS221_RosAdvertize+0x2c>
	{
		reinterpret_cast<HTS221_rosService*>(rosHTS221Instance)->HTS221_AdvertizeHumidity();
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HTS221_RosAdvertize+0x38>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff ff10 	bl	80048c0 <_ZN17HTS221_rosService24HTS221_AdvertizeHumidityEv>
	}

	return HTS221_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000019c 	.word	0x2000019c

08004ab0 <HTS221_RosSetTemperature>:

	return HTS221_ERROR;
}

void HTS221_RosSetTemperature(HTS221_Object_t *pObj, double value)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	ed87 0b00 	vstr	d0, [r7]
	if(pObj->temp_is_enabled)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HTS221_RosSetTemperature+0x2a>
	{
		reinterpret_cast<HTS221_rosService*>(rosHTS221Instance)->HTS221_air_temperature_t()->temperature =  value;
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HTS221_RosSetTemperature+0x34>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff ff6c 	bl	80049a8 <_ZN17HTS221_rosService24HTS221_air_temperature_tEv>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004ad6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000019c 	.word	0x2000019c

08004ae8 <HTS221_RosSetHumidity>:

	return HTS221_ERROR;
}

void HTS221_RosSetHumidity(HTS221_Object_t *pObj, double value)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	ed87 0b00 	vstr	d0, [r7]
	if(pObj->hum_is_enabled)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HTS221_RosSetHumidity+0x2a>
	{
		reinterpret_cast<HTS221_rosService*>(rosHTS221Instance)->HTS221_air_humidity_t()->relative_humidity =  value;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HTS221_RosSetHumidity+0x34>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff6f 	bl	80049e6 <_ZN17HTS221_rosService21HTS221_air_humidity_tEv>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b0e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	2000019c 	.word	0x2000019c

08004b20 <HTS221_RosTemperaturePublish>:

int32_t HTS221_RosTemperaturePublish(HTS221_Object_t *pObj)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	if(pObj->temp_is_enabled)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d006      	beq.n	8004b40 <HTS221_RosTemperaturePublish+0x20>
	{
		return (int32_t) reinterpret_cast<HTS221_rosService*>(rosHTS221Instance)->HTS221_TemperaturePublish();
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HTS221_RosTemperaturePublish+0x2c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fee2 	bl	8004900 <_ZN17HTS221_rosService25HTS221_TemperaturePublishEv>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	e001      	b.n	8004b44 <HTS221_RosTemperaturePublish+0x24>
	}

	return HTS221_ERROR;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2000019c 	.word	0x2000019c

08004b50 <HTS221_RosHumidityPublish>:

int32_t HTS221_RosHumidityPublish(HTS221_Object_t *pObj)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	if(pObj->hum_is_enabled)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <HTS221_RosHumidityPublish+0x20>
	{
		return (int32_t) reinterpret_cast<HTS221_rosService*>(rosHTS221Instance)->HTS221_HumidityPublish();
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HTS221_RosHumidityPublish+0x2c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fedc 	bl	8004924 <_ZN17HTS221_rosService22HTS221_HumidityPublishEv>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	e001      	b.n	8004b74 <HTS221_RosHumidityPublish+0x24>
	}

	return HTS221_ERROR;
 8004b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	2000019c 	.word	0x2000019c

08004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fa68 	bl	8002064 <_ZN13STM32Hardware4timeEv>
 8004b94:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fc faf4 	bl	8001184 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	099a      	lsrs	r2, r3, #6
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8004bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8004bc8:	fb02 f203 	mul.w	r2, r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8004bd2:	441a      	add	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fb fe3c 	bl	800085c <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8004be4:	bf00      	nop
  }
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	10624dd3 	.word	0x10624dd3
 8004bf4:	000f4240 	.word	0x000f4240

08004bf8 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e04d      	b.n	8004cb0 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	7b1a      	ldrb	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <LPS22HB_RegisterBusIO+0xc4>)
 8004c50:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <LPS22HB_RegisterBusIO+0xc8>)
 8004c56:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e020      	b.n	8004cb0 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4798      	blx	r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e016      	b.n	8004cb0 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d112      	bne.n	8004cb0 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10d      	bne.n	8004cb0 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004c94:	2301      	movs	r3, #1
 8004c96:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8004c98:	7afb      	ldrb	r3, [r7, #11]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa11 	bl	80050c6 <LPS22HB_Write_Reg>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08005387 	.word	0x08005387
 8004cc0:	0800540d 	.word	0x0800540d

08004cc4 <LPS22HB_Init>:
 * @param  pObj the device pObj
 * @param  Capabilities the device capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t * Capabilities)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  if (pObj->is_initialized == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d119      	bne.n	8004d0c <LPS22HB_Init+0x48>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fafb 	bl	80052d4 <LPS22HB_Initialize>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <LPS22HB_Init+0x26>
    {
      return LPS22HB_ERROR;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce8:	e015      	b.n	8004d16 <LPS22HB_Init+0x52>
    }

    if(new_C_LPS22HB_rosService())
 8004cea:	f001 f96b 	bl	8005fc4 <new_C_LPS22HB_rosService>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <LPS22HB_Init+0x36>
    {
    	return LPS22HB_ERROR;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf8:	e00d      	b.n	8004d16 <LPS22HB_Init+0x52>
    }

    if(LPS22HB_OK != LPS22HB_RosAdvertize(Capabilities))
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f001 f98a 	bl	8006014 <LPS22HB_RosAdvertize>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <LPS22HB_Init+0x48>
    {
    	return LPS22HB_ERROR;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d0a:	e004      	b.n	8004d16 <LPS22HB_Init+0x52>
    }
  }

  pObj->is_initialized = 1U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d113      	bne.n	8004d58 <LPS22HB_DeInit+0x3a>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f879 	bl	8004e28 <LPS22HB_PRESS_Disable>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d40:	e00f      	b.n	8004d62 <LPS22HB_DeInit+0x44>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f929 	bl	8004f9a <LPS22HB_TEMP_Disable>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d52:	e006      	b.n	8004d62 <LPS22HB_DeInit+0x44>
    }

    del_C_LPS22HB_rosService();
 8004d54:	f001 f94e 	bl	8005ff4 <del_C_LPS22HB_rosService>

  }

  pObj->is_initialized = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	331c      	adds	r3, #28
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fcc4 	bl	8005708 <lps22hb_device_id_get>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8004d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8a:	e000      	b.n	8004d8e <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2200      	movs	r2, #0
 8004da6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2201      	movs	r2, #1
 8004dac:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <LPS22HB_GetCapabilities+0x44>)
 8004dc6:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <LPS22HB_GetCapabilities+0x44>)
 8004dcc:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	42960000 	.word	0x42960000

08004de0 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e014      	b.n	8004e20 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f103 021c 	add.w	r2, r3, #28
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f000 fbf3 	bl	80055f0 <lps22hb_data_rate_set>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e14:	e004      	b.n	8004e20 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e024      	b.n	8004e88 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11a      	bne.n	8004e7e <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f103 021c 	add.w	r2, r3, #28
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	332b      	adds	r3, #43	; 0x2b
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f000 fbf1 	bl	800563c <lps22hb_data_rate_get>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e64:	e010      	b.n	8004e88 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	331c      	adds	r3, #28
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fbbf 	bl	80055f0 <lps22hb_data_rate_set>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e7c:	e004      	b.n	8004e88 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f92d 	bl	80050fc <LPS22HB_GetOutputDataRate>
 8004ea2:	4603      	mov	r3, r0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d106      	bne.n	8004ed0 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004ec2:	ed97 0a00 	vldr	s0, [r7]
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f96c 	bl	80051a4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	e005      	b.n	8004edc <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004ed0:	ed97 0a00 	vldr	s0, [r7]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f9bd 	bl	8005254 <LPS22HB_SetOutputDataRate_When_Disabled>
 8004eda:	4603      	mov	r3, r0
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004eee:	f107 030c 	add.w	r3, r7, #12
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f008 ff75 	bl	800dde6 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	331c      	adds	r3, #28
 8004f00:	f107 020c 	add.w	r2, r7, #12
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fbdc 	bl	80056c4 <lps22hb_pressure_raw_get>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f16:	e018      	b.n	8004f4a <LPS22HB_PRESS_GetPressure+0x66>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 faea 	bl	80054f4 <lps22hb_from_lsb_to_hpa>
 8004f20:	eef0 7a40 	vmov.f32	s15, s0
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	edc3 7a00 	vstr	s15, [r3]

  LPS22HB_RosSetPressure(pObj, (double) *Value);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fb fabc 	bl	80004ac <__aeabi_f2d>
 8004f34:	4603      	mov	r3, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	ec44 3b10 	vmov	d0, r3, r4
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 f8a3 	bl	8006088 <LPS22HB_RosSetPressure>
  LPS22HB_RosPressurePublish(pObj);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f8d4 	bl	80060f0 <LPS22HB_RosPressurePublish>

  return LPS22HB_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}

08004f52 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e014      	b.n	8004f92 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f103 021c 	add.w	r2, r3, #28
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 fb3a 	bl	80055f0 <lps22hb_data_rate_set>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f86:	e004      	b.n	8004f92 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e024      	b.n	8004ffa <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11a      	bne.n	8004ff0 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f103 021c 	add.w	r2, r3, #28
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	332b      	adds	r3, #43	; 0x2b
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f000 fb38 	bl	800563c <lps22hb_data_rate_get>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd6:	e010      	b.n	8004ffa <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	331c      	adds	r3, #28
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb06 	bl	80055f0 <lps22hb_data_rate_set>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fee:	e004      	b.n	8004ffa <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f874 	bl	80050fc <LPS22HB_GetOutputDataRate>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005030:	2b01      	cmp	r3, #1
 8005032:	d106      	bne.n	8005042 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005034:	ed97 0a00 	vldr	s0, [r7]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8b3 	bl	80051a4 <LPS22HB_SetOutputDataRate_When_Enabled>
 800503e:	4603      	mov	r3, r0
 8005040:	e005      	b.n	800504e <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005042:	ed97 0a00 	vldr	s0, [r7]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f904 	bl	8005254 <LPS22HB_SetOutputDataRate_When_Disabled>
 800504c:	4603      	mov	r3, r0
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8005056:	b590      	push	{r4, r7, lr}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005060:	f107 030c 	add.w	r3, r7, #12
 8005064:	2202      	movs	r2, #2
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f008 febc 	bl	800dde6 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	331c      	adds	r3, #28
 8005072:	f107 020c 	add.w	r2, r7, #12
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fb34 	bl	80056e6 <lps22hb_temperature_raw_get>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8005084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005088:	e019      	b.n	80050be <LPS22HB_TEMP_GetTemperature+0x68>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 800508a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa48 	bl	8005524 <lps22hb_from_lsb_to_degc>
 8005094:	eef0 7a40 	vmov.f32	s15, s0
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	edc3 7a00 	vstr	s15, [r3]

  LPS22HB_RosSetTemperature(pObj, (double) *Value);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fb fa02 	bl	80004ac <__aeabi_f2d>
 80050a8:	4603      	mov	r3, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	ec44 3b10 	vmov	d0, r3, r4
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 ffcd 	bl	8006050 <LPS22HB_RosSetTemperature>
  LPS22HB_RosTemperaturePublish(pObj);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 f802 	bl	80060c0 <LPS22HB_RosTemperaturePublish>

  return LPS22HB_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}

080050c6 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
 80050d2:	4613      	mov	r3, r2
 80050d4:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f103 001c 	add.w	r0, r3, #28
 80050dc:	1cba      	adds	r2, r7, #2
 80050de:	78f9      	ldrb	r1, [r7, #3]
 80050e0:	2301      	movs	r3, #1
 80050e2:	f000 f9ee 	bl	80054c2 <lps22hb_write_reg>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f0:	e000      	b.n	80050f4 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	331c      	adds	r3, #28
 800510e:	f107 020b 	add.w	r2, r7, #11
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fa91 	bl	800563c <lps22hb_data_rate_get>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005124:	e031      	b.n	800518a <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	2b05      	cmp	r3, #5
 800512a:	d829      	bhi.n	8005180 <LPS22HB_GetOutputDataRate+0x84>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <LPS22HB_GetOutputDataRate+0x38>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	0800514d 	.word	0x0800514d
 8005138:	08005157 	.word	0x08005157
 800513c:	08005161 	.word	0x08005161
 8005140:	08005169 	.word	0x08005169
 8005144:	08005171 	.word	0x08005171
 8005148:	08005179 	.word	0x08005179
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
      break;
 8005154:	e018      	b.n	8005188 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800515c:	601a      	str	r2, [r3, #0]
      break;
 800515e:	e013      	b.n	8005188 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <LPS22HB_GetOutputDataRate+0x98>)
 8005164:	601a      	str	r2, [r3, #0]
      break;
 8005166:	e00f      	b.n	8005188 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	4a0b      	ldr	r2, [pc, #44]	; (8005198 <LPS22HB_GetOutputDataRate+0x9c>)
 800516c:	601a      	str	r2, [r3, #0]
      break;
 800516e:	e00b      	b.n	8005188 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <LPS22HB_GetOutputDataRate+0xa0>)
 8005174:	601a      	str	r2, [r3, #0]
      break;
 8005176:	e007      	b.n	8005188 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <LPS22HB_GetOutputDataRate+0xa4>)
 800517c:	601a      	str	r2, [r3, #0]
      break;
 800517e:	e003      	b.n	8005188 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8005180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005184:	60fb      	str	r3, [r7, #12]
      break;
 8005186:	bf00      	nop
  }

  return ret;
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	41200000 	.word	0x41200000
 8005198:	41c80000 	.word	0x41c80000
 800519c:	42480000 	.word	0x42480000
 80051a0:	42960000 	.word	0x42960000

080051a4 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80051b0:	edd7 7a00 	vldr	s15, [r7]
 80051b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	d801      	bhi.n	80051c6 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e021      	b.n	800520a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80051c6:	edd7 7a00 	vldr	s15, [r7]
 80051ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d801      	bhi.n	80051dc <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 80051d8:	2302      	movs	r3, #2
 80051da:	e016      	b.n	800520a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80051dc:	edd7 7a00 	vldr	s15, [r7]
 80051e0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80051e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	d801      	bhi.n	80051f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 80051ee:	2303      	movs	r3, #3
 80051f0:	e00b      	b.n	800520a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80051f2:	edd7 7a00 	vldr	s15, [r7]
 80051f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005250 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 80051fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d801      	bhi.n	8005208 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8005204:	2304      	movs	r3, #4
 8005206:	e000      	b.n	800520a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8005208:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800520a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	331c      	adds	r3, #28
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f000 f9eb 	bl	80055f0 <lps22hb_data_rate_set>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005224:	e00f      	b.n	8005246 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 021c 	add.w	r2, r3, #28
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	332b      	adds	r3, #43	; 0x2b
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fa02 	bl	800563c <lps22hb_data_rate_get>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005242:	e000      	b.n	8005246 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	42480000 	.word	0x42480000

08005254 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005260:	edd7 7a00 	vldr	s15, [r7]
 8005264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	d801      	bhi.n	8005276 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8005272:	2301      	movs	r3, #1
 8005274:	e021      	b.n	80052ba <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8005276:	edd7 7a00 	vldr	s15, [r7]
 800527a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800527e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	d801      	bhi.n	800528c <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8005288:	2302      	movs	r3, #2
 800528a:	e016      	b.n	80052ba <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800528c:	edd7 7a00 	vldr	s15, [r7]
 8005290:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	d801      	bhi.n	80052a2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800529e:	2303      	movs	r3, #3
 80052a0:	e00b      	b.n	80052ba <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80052a2:	edd7 7a00 	vldr	s15, [r7]
 80052a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80052d0 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80052aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b2:	d801      	bhi.n	80052b8 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80052b4:	2304      	movs	r3, #4
 80052b6:	e000      	b.n	80052ba <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80052b8:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	42480000 	.word	0x42480000

080052d4 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	331c      	adds	r3, #28
 80052e0:	2101      	movs	r1, #1
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fa21 	bl	800572a <lps22hb_low_power_set>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f2:	e044      	b.n	800537e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	331c      	adds	r3, #28
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f978 	bl	80055f0 <lps22hb_data_rate_set>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530a:	e038      	b.n	800537e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	331c      	adds	r3, #28
 8005310:	2102      	movs	r1, #2
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f946 	bl	80055a4 <lps22hb_low_pass_filter_mode_set>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005322:	e02c      	b.n	800537e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	331c      	adds	r3, #28
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f914 	bl	8005558 <lps22hb_block_data_update_set>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800533a:	e020      	b.n	800537e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	331c      	adds	r3, #28
 8005348:	2100      	movs	r1, #0
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fa13 	bl	8005776 <lps22hb_auto_add_inc_set>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8005356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800535a:	e010      	b.n	800537e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	331c      	adds	r3, #28
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa07 	bl	8005776 <lps22hb_auto_add_inc_set>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005372:	e004      	b.n	800537e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2203      	movs	r2, #3
 8005378:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005386:	b590      	push	{r4, r7, lr}
 8005388:	b089      	sub	sp, #36	; 0x24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	461a      	mov	r2, r3
 8005392:	460b      	mov	r3, r1
 8005394:	72fb      	strb	r3, [r7, #11]
 8005396:	4613      	mov	r3, r2
 8005398:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d121      	bne.n	80053ee <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	83fb      	strh	r3, [r7, #30]
 80053ae:	e018      	b.n	80053e2 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	695c      	ldr	r4, [r3, #20]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	7b1b      	ldrb	r3, [r3, #12]
 80053b8:	b298      	uxth	r0, r3
 80053ba:	7afb      	ldrb	r3, [r7, #11]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	8bfb      	ldrh	r3, [r7, #30]
 80053c0:	4413      	add	r3, r2
 80053c2:	b299      	uxth	r1, r3
 80053c4:	8bfb      	ldrh	r3, [r7, #30]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	441a      	add	r2, r3
 80053ca:	2301      	movs	r3, #1
 80053cc:	47a0      	blx	r4
 80053ce:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053da:	e013      	b.n	8005404 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80053dc:	8bfb      	ldrh	r3, [r7, #30]
 80053de:	3301      	adds	r3, #1
 80053e0:	83fb      	strh	r3, [r7, #30]
 80053e2:	8bfa      	ldrh	r2, [r7, #30]
 80053e4:	893b      	ldrh	r3, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d3e2      	bcc.n	80053b0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	e00a      	b.n	8005404 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	695c      	ldr	r4, [r3, #20]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	7b1b      	ldrb	r3, [r3, #12]
 80053f6:	b298      	uxth	r0, r3
 80053f8:	7afb      	ldrb	r3, [r7, #11]
 80053fa:	b299      	uxth	r1, r3
 80053fc:	893b      	ldrh	r3, [r7, #8]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	47a0      	blx	r4
 8005402:	4603      	mov	r3, r0
  }
}
 8005404:	4618      	mov	r0, r3
 8005406:	3724      	adds	r7, #36	; 0x24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}

0800540c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b089      	sub	sp, #36	; 0x24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	461a      	mov	r2, r3
 8005418:	460b      	mov	r3, r1
 800541a:	72fb      	strb	r3, [r7, #11]
 800541c:	4613      	mov	r3, r2
 800541e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d121      	bne.n	8005474 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8005430:	2300      	movs	r3, #0
 8005432:	83fb      	strh	r3, [r7, #30]
 8005434:	e018      	b.n	8005468 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	691c      	ldr	r4, [r3, #16]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	7b1b      	ldrb	r3, [r3, #12]
 800543e:	b298      	uxth	r0, r3
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	b29a      	uxth	r2, r3
 8005444:	8bfb      	ldrh	r3, [r7, #30]
 8005446:	4413      	add	r3, r2
 8005448:	b299      	uxth	r1, r3
 800544a:	8bfb      	ldrh	r3, [r7, #30]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	441a      	add	r2, r3
 8005450:	2301      	movs	r3, #1
 8005452:	47a0      	blx	r4
 8005454:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005460:	e013      	b.n	800548a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8005462:	8bfb      	ldrh	r3, [r7, #30]
 8005464:	3301      	adds	r3, #1
 8005466:	83fb      	strh	r3, [r7, #30]
 8005468:	8bfa      	ldrh	r2, [r7, #30]
 800546a:	893b      	ldrh	r3, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	d3e2      	bcc.n	8005436 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	e00a      	b.n	800548a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	691c      	ldr	r4, [r3, #16]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	7b1b      	ldrb	r3, [r3, #12]
 800547c:	b298      	uxth	r0, r3
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	b299      	uxth	r1, r3
 8005482:	893b      	ldrh	r3, [r7, #8]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	47a0      	blx	r4
 8005488:	4603      	mov	r3, r0
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3724      	adds	r7, #36	; 0x24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd90      	pop	{r4, r7, pc}

08005492 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8005492:	b590      	push	{r4, r7, lr}
 8005494:	b087      	sub	sp, #28
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	461a      	mov	r2, r3
 800549e:	460b      	mov	r3, r1
 80054a0:	72fb      	strb	r3, [r7, #11]
 80054a2:	4613      	mov	r3, r2
 80054a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685c      	ldr	r4, [r3, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6898      	ldr	r0, [r3, #8]
 80054ae:	893b      	ldrh	r3, [r7, #8]
 80054b0:	7af9      	ldrb	r1, [r7, #11]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	47a0      	blx	r4
 80054b6:	6178      	str	r0, [r7, #20]
  return ret;
 80054b8:	697b      	ldr	r3, [r7, #20]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}

080054c2 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80054c2:	b590      	push	{r4, r7, lr}
 80054c4:	b087      	sub	sp, #28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	461a      	mov	r2, r3
 80054ce:	460b      	mov	r3, r1
 80054d0:	72fb      	strb	r3, [r7, #11]
 80054d2:	4613      	mov	r3, r2
 80054d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681c      	ldr	r4, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6898      	ldr	r0, [r3, #8]
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	7af9      	ldrb	r1, [r7, #11]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	47a0      	blx	r4
 80054e6:	6178      	str	r0, [r7, #20]
  return ret;
 80054e8:	697b      	ldr	r3, [r7, #20]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
	...

080054f4 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005506:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005520 <lps22hb_from_lsb_to_hpa+0x2c>
 800550a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800550e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005512:	eeb0 0a67 	vmov.f32	s0, s15
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	45800000 	.word	0x45800000

08005524 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800552e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800553a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005554 <lps22hb_from_lsb_to_degc+0x30>
 800553e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005542:	eef0 7a66 	vmov.f32	s15, s13
}
 8005546:	eeb0 0a67 	vmov.f32	s0, s15
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	42c80000 	.word	0x42c80000

08005558 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8005564:	f107 0208 	add.w	r2, r7, #8
 8005568:	2301      	movs	r3, #1
 800556a:	2110      	movs	r1, #16
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff90 	bl	8005492 <lps22hb_read_reg>
 8005572:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	b2da      	uxtb	r2, r3
 8005582:	7a3b      	ldrb	r3, [r7, #8]
 8005584:	f362 0341 	bfi	r3, r2, #1, #1
 8005588:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800558a:	f107 0208 	add.w	r2, r7, #8
 800558e:	2301      	movs	r3, #1
 8005590:	2110      	movs	r1, #16
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff95 	bl	80054c2 <lps22hb_write_reg>
 8005598:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80055b0:	f107 0208 	add.w	r2, r7, #8
 80055b4:	2301      	movs	r3, #1
 80055b6:	2110      	movs	r1, #16
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff6a 	bl	8005492 <lps22hb_read_reg>
 80055be:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	7a3b      	ldrb	r3, [r7, #8]
 80055d0:	f362 0383 	bfi	r3, r2, #2, #2
 80055d4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80055d6:	f107 0208 	add.w	r2, r7, #8
 80055da:	2301      	movs	r3, #1
 80055dc:	2110      	movs	r1, #16
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ff6f 	bl	80054c2 <lps22hb_write_reg>
 80055e4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80055fc:	f107 0208 	add.w	r2, r7, #8
 8005600:	2301      	movs	r3, #1
 8005602:	2110      	movs	r1, #16
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff44 	bl	8005492 <lps22hb_read_reg>
 800560a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	b2da      	uxtb	r2, r3
 800561a:	7a3b      	ldrb	r3, [r7, #8]
 800561c:	f362 1306 	bfi	r3, r2, #4, #3
 8005620:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8005622:	f107 0208 	add.w	r2, r7, #8
 8005626:	2301      	movs	r3, #1
 8005628:	2110      	movs	r1, #16
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff ff49 	bl	80054c2 <lps22hb_write_reg>
 8005630:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005632:	68fb      	ldr	r3, [r7, #12]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8005646:	f107 0208 	add.w	r2, r7, #8
 800564a:	2301      	movs	r3, #1
 800564c:	2110      	movs	r1, #16
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ff1f 	bl	8005492 <lps22hb_read_reg>
 8005654:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8005656:	7a3b      	ldrb	r3, [r7, #8]
 8005658:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b05      	cmp	r3, #5
 8005660:	d826      	bhi.n	80056b0 <lps22hb_data_rate_get+0x74>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <lps22hb_data_rate_get+0x2c>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	08005681 	.word	0x08005681
 800566c:	08005689 	.word	0x08005689
 8005670:	08005691 	.word	0x08005691
 8005674:	08005699 	.word	0x08005699
 8005678:	080056a1 	.word	0x080056a1
 800567c:	080056a9 	.word	0x080056a9
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
      break;
 8005686:	e017      	b.n	80056b8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
      break;
 800568e:	e013      	b.n	80056b8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]
      break;
 8005696:	e00f      	b.n	80056b8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2203      	movs	r2, #3
 800569c:	701a      	strb	r2, [r3, #0]
      break;
 800569e:	e00b      	b.n	80056b8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2204      	movs	r2, #4
 80056a4:	701a      	strb	r2, [r3, #0]
      break;
 80056a6:	e007      	b.n	80056b8 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2205      	movs	r2, #5
 80056ac:	701a      	strb	r2, [r3, #0]
      break;
 80056ae:	e003      	b.n	80056b8 <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
      break;
 80056b6:	bf00      	nop
  }

  return ret;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop

080056c4 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80056ce:	2303      	movs	r3, #3
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	2128      	movs	r1, #40	; 0x28
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fedc 	bl	8005492 <lps22hb_read_reg>
 80056da:	60f8      	str	r0, [r7, #12]
  return ret;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 80056f0:	2302      	movs	r3, #2
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	212b      	movs	r1, #43	; 0x2b
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fecb 	bl	8005492 <lps22hb_read_reg>
 80056fc:	60f8      	str	r0, [r7, #12]
  return ret;
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8005712:	2301      	movs	r3, #1
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	210f      	movs	r1, #15
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff feba 	bl	8005492 <lps22hb_read_reg>
 800571e:	60f8      	str	r0, [r7, #12]
  return ret;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8005736:	f107 0208 	add.w	r2, r7, #8
 800573a:	2301      	movs	r3, #1
 800573c:	211a      	movs	r1, #26
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fea7 	bl	8005492 <lps22hb_read_reg>
 8005744:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10f      	bne.n	800576c <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	7a3b      	ldrb	r3, [r7, #8]
 8005756:	f362 0300 	bfi	r3, r2, #0, #1
 800575a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 800575c:	f107 0208 	add.w	r2, r7, #8
 8005760:	2301      	movs	r3, #1
 8005762:	211a      	movs	r1, #26
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff feac 	bl	80054c2 <lps22hb_write_reg>
 800576a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8005782:	f107 0208 	add.w	r2, r7, #8
 8005786:	2301      	movs	r3, #1
 8005788:	2111      	movs	r1, #17
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fe81 	bl	8005492 <lps22hb_read_reg>
 8005790:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	7a3b      	ldrb	r3, [r7, #8]
 80057a2:	f362 1304 	bfi	r3, r2, #4, #1
 80057a6:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80057a8:	f107 0208 	add.w	r2, r7, #8
 80057ac:	2301      	movs	r3, #1
 80057ae:	2111      	movs	r1, #17
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fe86 	bl	80054c2 <lps22hb_write_reg>
 80057b6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <_ZN11sensor_msgs13FluidPressureC1Ev>:
      typedef double _fluid_pressure_type;
      _fluid_pressure_type fluid_pressure;
      typedef double _variance_type;
      _variance_type variance;

    FluidPressure():
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      header(),
      fluid_pressure(0),
      variance(0)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fb fcea 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 80057d4:	4a0d      	ldr	r2, [pc, #52]	; (800580c <_ZN11sensor_msgs13FluidPressureC1Ev+0x48>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe f862 	bl	80038a8 <_ZN8std_msgs6HeaderC1Ev>
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	f04f 0400 	mov.w	r4, #0
 80057ee:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	f04f 0400 	mov.w	r4, #0
 80057fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	bd90      	pop	{r4, r7, pc}
 800580a:	bf00      	nop
 800580c:	0800e6c8 	.word	0x0800e6c8

08005810 <_ZNK11sensor_msgs13FluidPressure9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	1d18      	adds	r0, r3, #4
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	4619      	mov	r1, r3
 800582a:	f7fe f85d 	bl	80038e8 <_ZNK8std_msgs6Header9serializeEPh>
 800582e:	4602      	mov	r2, r0
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_fluid_pressure;
      u_fluid_pressure.real = this->fluid_pressure;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800583c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_fluid_pressure.base >> (8 * 0)) & 0xFF;
 8005840:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	440a      	add	r2, r1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_fluid_pressure.base >> (8 * 1)) & 0xFF;
 800584e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	f04f 0400 	mov.w	r4, #0
 800585a:	0a0b      	lsrs	r3, r1, #8
 800585c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005860:	0a14      	lsrs	r4, r2, #8
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	3201      	adds	r2, #1
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	440a      	add	r2, r1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_fluid_pressure.base >> (8 * 2)) & 0xFF;
 800586e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	f04f 0400 	mov.w	r4, #0
 800587a:	0c0b      	lsrs	r3, r1, #16
 800587c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005880:	0c14      	lsrs	r4, r2, #16
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	3202      	adds	r2, #2
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	440a      	add	r2, r1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_fluid_pressure.base >> (8 * 3)) & 0xFF;
 800588e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	0e0b      	lsrs	r3, r1, #24
 800589c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80058a0:	0e14      	lsrs	r4, r2, #24
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	3203      	adds	r2, #3
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	440a      	add	r2, r1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_fluid_pressure.base >> (8 * 4)) & 0xFF;
 80058ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	0013      	movs	r3, r2
 80058bc:	2400      	movs	r4, #0
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	3204      	adds	r2, #4
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	440a      	add	r2, r1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_fluid_pressure.base >> (8 * 5)) & 0xFF;
 80058ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	f04f 0400 	mov.w	r4, #0
 80058d6:	0a13      	lsrs	r3, r2, #8
 80058d8:	2400      	movs	r4, #0
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	3205      	adds	r2, #5
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	440a      	add	r2, r1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_fluid_pressure.base >> (8 * 6)) & 0xFF;
 80058e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	f04f 0400 	mov.w	r4, #0
 80058f2:	0c13      	lsrs	r3, r2, #16
 80058f4:	2400      	movs	r4, #0
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	3206      	adds	r2, #6
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	440a      	add	r2, r1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_fluid_pressure.base >> (8 * 7)) & 0xFF;
 8005902:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	0e13      	lsrs	r3, r2, #24
 8005910:	2400      	movs	r4, #0
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	3207      	adds	r2, #7
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	440a      	add	r2, r1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->fluid_pressure);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3308      	adds	r3, #8
 8005922:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.real = this->variance;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800592a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 800592e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	440a      	add	r2, r1
 8005938:	b2db      	uxtb	r3, r3
 800593a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 800593c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	0a0b      	lsrs	r3, r1, #8
 800594a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800594e:	0a14      	lsrs	r4, r2, #8
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	3201      	adds	r2, #1
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	440a      	add	r2, r1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 800595c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	0c0b      	lsrs	r3, r1, #16
 800596a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800596e:	0c14      	lsrs	r4, r2, #16
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	3202      	adds	r2, #2
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	440a      	add	r2, r1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 800597c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	0e0b      	lsrs	r3, r1, #24
 800598a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800598e:	0e14      	lsrs	r4, r2, #24
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	3203      	adds	r2, #3
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	440a      	add	r2, r1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 800599c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	0013      	movs	r3, r2
 80059aa:	2400      	movs	r4, #0
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	3204      	adds	r2, #4
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	440a      	add	r2, r1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 80059b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	0a13      	lsrs	r3, r2, #8
 80059c6:	2400      	movs	r4, #0
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	3205      	adds	r2, #5
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	440a      	add	r2, r1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 80059d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	0c13      	lsrs	r3, r2, #16
 80059e2:	2400      	movs	r4, #0
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	3206      	adds	r2, #6
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	440a      	add	r2, r1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 80059f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	0e13      	lsrs	r3, r2, #24
 80059fe:	2400      	movs	r4, #0
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	3207      	adds	r2, #7
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	440a      	add	r2, r1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->variance);
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	61fb      	str	r3, [r7, #28]
      return offset;
 8005a12:	69fb      	ldr	r3, [r7, #28]
    }
 8005a14:	4618      	mov	r0, r3
 8005a16:	3724      	adds	r7, #36	; 0x24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd90      	pop	{r4, r7, pc}

08005a1c <_ZN11sensor_msgs13FluidPressure11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	b08b      	sub	sp, #44	; 0x2c
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	1d18      	adds	r0, r3, #4
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	f7fd ffee 	bl	8003a18 <_ZN8std_msgs6Header11deserializeEPh>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	4413      	add	r3, r2
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_fluid_pressure;
      u_fluid_pressure.base = 0;
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	f04f 0400 	mov.w	r4, #0
 8005a4c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005a50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	68b8      	ldr	r0, [r7, #8]
 8005a58:	4403      	add	r3, r0
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	fa5f fa83 	uxtb.w	sl, r3
 8005a60:	f04f 0b00 	mov.w	fp, #0
 8005a64:	ea4a 0301 	orr.w	r3, sl, r1
 8005a68:	ea4b 0402 	orr.w	r4, fp, r2
 8005a6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005a70:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2d9      	uxtb	r1, r3
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	e9c7 3400 	strd	r3, r4, [r7]
 8005a90:	0213      	lsls	r3, r2, #8
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	020b      	lsls	r3, r1, #8
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005aa4:	ea43 030a 	orr.w	r3, r3, sl
 8005aa8:	ea44 040b 	orr.w	r4, r4, fp
 8005aac:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005ab0:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2d9      	uxtb	r1, r3
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	f04f 0400 	mov.w	r4, #0
 8005acc:	e9c7 3400 	strd	r3, r4, [r7]
 8005ad0:	0413      	lsls	r3, r2, #16
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	040b      	lsls	r3, r1, #16
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ae4:	ea43 030a 	orr.w	r3, r3, sl
 8005ae8:	ea44 040b 	orr.w	r4, r4, fp
 8005aec:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005af0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	3303      	adds	r3, #3
 8005af8:	68b8      	ldr	r0, [r7, #8]
 8005afa:	4403      	add	r3, r0
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8005b08:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8005b0c:	ea41 0308 	orr.w	r3, r1, r8
 8005b10:	ea42 0409 	orr.w	r4, r2, r9
 8005b14:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005b18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	3304      	adds	r3, #4
 8005b20:	68b8      	ldr	r0, [r7, #8]
 8005b22:	4403      	add	r3, r0
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	fa5f f883 	uxtb.w	r8, r3
 8005b2a:	f04f 0900 	mov.w	r9, #0
 8005b2e:	f04f 0a00 	mov.w	sl, #0
 8005b32:	f04f 0b00 	mov.w	fp, #0
 8005b36:	46c3      	mov	fp, r8
 8005b38:	f04f 0a00 	mov.w	sl, #0
 8005b3c:	ea4a 0301 	orr.w	r3, sl, r1
 8005b40:	ea4b 0402 	orr.w	r4, fp, r2
 8005b44:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005b48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	3305      	adds	r3, #5
 8005b50:	68b8      	ldr	r0, [r7, #8]
 8005b52:	4403      	add	r3, r0
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	fa5f f883 	uxtb.w	r8, r3
 8005b5a:	f04f 0900 	mov.w	r9, #0
 8005b5e:	f04f 0a00 	mov.w	sl, #0
 8005b62:	f04f 0b00 	mov.w	fp, #0
 8005b66:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8005b6a:	f04f 0a00 	mov.w	sl, #0
 8005b6e:	ea4a 0301 	orr.w	r3, sl, r1
 8005b72:	ea4b 0402 	orr.w	r4, fp, r2
 8005b76:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005b7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	3306      	adds	r3, #6
 8005b82:	68b8      	ldr	r0, [r7, #8]
 8005b84:	4403      	add	r3, r0
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	fa5f f883 	uxtb.w	r8, r3
 8005b8c:	f04f 0900 	mov.w	r9, #0
 8005b90:	f04f 0a00 	mov.w	sl, #0
 8005b94:	f04f 0b00 	mov.w	fp, #0
 8005b98:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8005b9c:	f04f 0a00 	mov.w	sl, #0
 8005ba0:	ea4a 0301 	orr.w	r3, sl, r1
 8005ba4:	ea4b 0402 	orr.w	r4, fp, r2
 8005ba8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005bac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	3307      	adds	r3, #7
 8005bb4:	68b8      	ldr	r0, [r7, #8]
 8005bb6:	4403      	add	r3, r0
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	fa5f f883 	uxtb.w	r8, r3
 8005bbe:	f04f 0900 	mov.w	r9, #0
 8005bc2:	f04f 0a00 	mov.w	sl, #0
 8005bc6:	f04f 0b00 	mov.w	fp, #0
 8005bca:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8005bce:	f04f 0a00 	mov.w	sl, #0
 8005bd2:	ea4a 0301 	orr.w	r3, sl, r1
 8005bd6:	ea4b 0402 	orr.w	r4, fp, r2
 8005bda:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->fluid_pressure = u_fluid_pressure.real;
 8005bde:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->fluid_pressure);
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	3308      	adds	r3, #8
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.base = 0;
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	f04f 0400 	mov.w	r4, #0
 8005bf6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005bfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	68b8      	ldr	r0, [r7, #8]
 8005c02:	4403      	add	r3, r0
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	fa5f f883 	uxtb.w	r8, r3
 8005c0a:	f04f 0900 	mov.w	r9, #0
 8005c0e:	ea48 0301 	orr.w	r3, r8, r1
 8005c12:	ea49 0402 	orr.w	r4, r9, r2
 8005c16:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c1a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	3301      	adds	r3, #1
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	b2d9      	uxtb	r1, r3
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0a00 	mov.w	sl, #0
 8005c32:	f04f 0b00 	mov.w	fp, #0
 8005c36:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8005c3a:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8005c3e:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8005c42:	ea4a 0308 	orr.w	r3, sl, r8
 8005c46:	ea4b 0409 	orr.w	r4, fp, r9
 8005c4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c4e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	3302      	adds	r3, #2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4413      	add	r3, r2
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2d9      	uxtb	r1, r3
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0a00 	mov.w	sl, #0
 8005c66:	f04f 0b00 	mov.w	fp, #0
 8005c6a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8005c6e:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8005c72:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8005c76:	ea4a 0308 	orr.w	r3, sl, r8
 8005c7a:	ea4b 0409 	orr.w	r4, fp, r9
 8005c7e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	3303      	adds	r3, #3
 8005c8a:	68b8      	ldr	r0, [r7, #8]
 8005c8c:	4403      	add	r3, r0
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f04f 0400 	mov.w	r4, #0
 8005c96:	0a1e      	lsrs	r6, r3, #8
 8005c98:	061d      	lsls	r5, r3, #24
 8005c9a:	ea41 0305 	orr.w	r3, r1, r5
 8005c9e:	ea42 0406 	orr.w	r4, r2, r6
 8005ca2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005ca6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	3304      	adds	r3, #4
 8005cae:	68b8      	ldr	r0, [r7, #8]
 8005cb0:	4403      	add	r3, r0
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b2dd      	uxtb	r5, r3
 8005cb6:	f04f 0600 	mov.w	r6, #0
 8005cba:	f04f 0800 	mov.w	r8, #0
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	46a9      	mov	r9, r5
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	ea48 0301 	orr.w	r3, r8, r1
 8005ccc:	ea49 0402 	orr.w	r4, r9, r2
 8005cd0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005cd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	3305      	adds	r3, #5
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	4403      	add	r3, r0
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b2dd      	uxtb	r5, r3
 8005ce4:	f04f 0600 	mov.w	r6, #0
 8005ce8:	f04f 0800 	mov.w	r8, #0
 8005cec:	f04f 0900 	mov.w	r9, #0
 8005cf0:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8005cf4:	f04f 0800 	mov.w	r8, #0
 8005cf8:	ea48 0301 	orr.w	r3, r8, r1
 8005cfc:	ea49 0402 	orr.w	r4, r9, r2
 8005d00:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005d04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	3306      	adds	r3, #6
 8005d0c:	68b8      	ldr	r0, [r7, #8]
 8005d0e:	4403      	add	r3, r0
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2dd      	uxtb	r5, r3
 8005d14:	f04f 0600 	mov.w	r6, #0
 8005d18:	f04f 0800 	mov.w	r8, #0
 8005d1c:	f04f 0900 	mov.w	r9, #0
 8005d20:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8005d24:	f04f 0800 	mov.w	r8, #0
 8005d28:	ea48 0301 	orr.w	r3, r8, r1
 8005d2c:	ea49 0402 	orr.w	r4, r9, r2
 8005d30:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005d34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	3307      	adds	r3, #7
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	4403      	add	r3, r0
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b2dd      	uxtb	r5, r3
 8005d44:	f04f 0600 	mov.w	r6, #0
 8005d48:	f04f 0800 	mov.w	r8, #0
 8005d4c:	f04f 0900 	mov.w	r9, #0
 8005d50:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8005d54:	f04f 0800 	mov.w	r8, #0
 8005d58:	ea48 0301 	orr.w	r3, r8, r1
 8005d5c:	ea49 0402 	orr.w	r4, r9, r2
 8005d60:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->variance = u_variance.real;
 8005d64:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->variance);
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	3308      	adds	r3, #8
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005d76:	4618      	mov	r0, r3
 8005d78:	372c      	adds	r7, #44	; 0x2c
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d80 <_ZN11sensor_msgs13FluidPressure7getTypeEv>:

    const char * getType(){ return "sensor_msgs/FluidPressure"; };
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <_ZN11sensor_msgs13FluidPressure7getTypeEv+0x18>)
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	0800e2e0 	.word	0x0800e2e0

08005d9c <_ZN11sensor_msgs13FluidPressure6getMD5Ev>:
    const char * getMD5(){ return "804dc5cea1c5306d6a2eb80b9833befe"; };
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <_ZN11sensor_msgs13FluidPressure6getMD5Ev+0x18>)
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	0800e2fc 	.word	0x0800e2fc

08005db8 <_ZN18LPS22HB_rosService11getInstanceEv>:


LPS22HB_rosService * LPS22HB_rosService::LPS22HB_Instance = NULL;

LPS22HB_rosService * LPS22HB_rosService::getInstance()
{
 8005db8:	b598      	push	{r3, r4, r7, lr}
 8005dba:	af00      	add	r7, sp, #0
	if(!LPS22HB_Instance)
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <_ZN18LPS22HB_rosService11getInstanceEv+0x28>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <_ZN18LPS22HB_rosService11getInstanceEv+0x20>
	{
		LPS22HB_Instance = new LPS22HB_rosService();
 8005dc4:	2034      	movs	r0, #52	; 0x34
 8005dc6:	f007 ff96 	bl	800dcf6 <_Znwj>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	461c      	mov	r4, r3
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f832 	bl	8005e38 <_ZN18LPS22HB_rosServiceC1Ev>
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <_ZN18LPS22HB_rosService11getInstanceEv+0x28>)
 8005dd6:	601c      	str	r4, [r3, #0]
	}

	return LPS22HB_Instance;
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <_ZN18LPS22HB_rosService11getInstanceEv+0x28>)
 8005dda:	681b      	ldr	r3, [r3, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd98      	pop	{r3, r4, r7, pc}
 8005de0:	200001a0 	.word	0x200001a0

08005de4 <_ZN18LPS22HB_rosServiceC1EPKcPN11sensor_msgs11TemperatureES1_PNS2_13FluidPressureE>:

LPS22HB_rosService::LPS22HB_rosService(const char * LPS22HB_temp_desc,
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
		const char * LPS22HB_pres_desc,
		sensor_msgs::FluidPressure * LPS22HB_pres_sensor) :
		LPS22HB_air_temperature_t_(LPS22HB_temp_sensor),
		LPS22HB_air_temperature_publisher_t(LPS22HB_temp_desc, LPS22HB_temp_sensor),
		LPS22HB_air_pressure_t_(LPS22HB_pres_sensor),
		LPS22HB_air_pressure_publisher_t(LPS22HB_pres_desc, LPS22HB_pres_sensor)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f103 0008 	add.w	r0, r3, #8
 8005e04:	2300      	movs	r3, #0
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	f7fd fd22 	bl	8003852 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	61da      	str	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f103 0020 	add.w	r0, r3, #32
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	f7fd fd17 	bl	8003852 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
{
	//	TODO Check if node handler has already been initialized
	//	and initialize node if not already done
	serialInstance = serialInstance->getInstance();
 8005e24:	f7fc f92a 	bl	800207c <_ZN9ROSserial11getInstanceEv>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]
}
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <_ZN18LPS22HB_rosServiceC1Ev>:


// Use delegating constructor.
LPS22HB_rosService::LPS22HB_rosService() : LPS22HB_rosService("LPS22HB_Air_Temperature",
 8005e38:	b5b0      	push	{r4, r5, r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	6078      	str	r0, [r7, #4]
		new sensor_msgs::Temperature(),
 8005e40:	2028      	movs	r0, #40	; 0x28
 8005e42:	f007 ff58 	bl	800dcf6 <_Znwj>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461d      	mov	r5, r3
		"LPS22HB_Air_Pressure",
		new sensor_msgs::FluidPressure())
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7fd fec0 	bl	8003bd0 <_ZN11sensor_msgs11TemperatureC1Ev>
 8005e50:	2028      	movs	r0, #40	; 0x28
 8005e52:	f007 ff50 	bl	800dcf6 <_Znwj>
 8005e56:	4603      	mov	r3, r0
 8005e58:	461c      	mov	r4, r3
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f7ff fcb2 	bl	80057c4 <_ZN11sensor_msgs13FluidPressureC1Ev>
 8005e60:	9400      	str	r4, [sp, #0]
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <_ZN18LPS22HB_rosServiceC1Ev+0x40>)
 8005e64:	462a      	mov	r2, r5
 8005e66:	4905      	ldr	r1, [pc, #20]	; (8005e7c <_ZN18LPS22HB_rosServiceC1Ev+0x44>)
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ffbb 	bl	8005de4 <_ZN18LPS22HB_rosServiceC1EPKcPN11sensor_msgs11TemperatureES1_PNS2_13FluidPressureE>
{

}
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bdb0      	pop	{r4, r5, r7, pc}
 8005e78:	0800e320 	.word	0x0800e320
 8005e7c:	0800e338 	.word	0x0800e338

08005e80 <_ZN18LPS22HB_rosService28LPS22HB_AdvertizeTemperatureEv>:

int32_t LPS22HB_rosService::LPS22HB_AdvertizeTemperature(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	if(NULL == serialInstance)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <_ZN18LPS22HB_rosService28LPS22HB_AdvertizeTemperatureEv+0x14>
	{
		return diagnostic_msgs::DiagnosticStatus::ERROR;
 8005e90:	2302      	movs	r3, #2
 8005e92:	e011      	b.n	8005eb8 <_ZN18LPS22HB_rosService28LPS22HB_AdvertizeTemperatureEv+0x38>
	}

	//	TODO : Compete the diagnostic by competing the error msg
	if(!serialInstance->nh.advertise(LPS22HB_air_temperature_publisher_t))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f7fe fd51 	bl	8004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f083 0301 	eor.w	r3, r3, #1
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <_ZN18LPS22HB_rosService28LPS22HB_AdvertizeTemperatureEv+0x36>
	{
		return (int32_t) diagnostic_msgs::DiagnosticStatus::ERROR;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e000      	b.n	8005eb8 <_ZN18LPS22HB_rosService28LPS22HB_AdvertizeTemperatureEv+0x38>
	}

	return diagnostic_msgs::DiagnosticStatus::OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_ZN18LPS22HB_rosService25LPS22HB_AdvertizePressureEv>:

int32_t LPS22HB_rosService::LPS22HB_AdvertizePressure(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	if(NULL == serialInstance)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <_ZN18LPS22HB_rosService25LPS22HB_AdvertizePressureEv+0x14>
	{
		return diagnostic_msgs::DiagnosticStatus::ERROR;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e011      	b.n	8005ef8 <_ZN18LPS22HB_rosService25LPS22HB_AdvertizePressureEv+0x38>
	}

	//	TODO : Compete the diagnostic by competing the error msg
	if(!serialInstance->nh.advertise(LPS22HB_air_pressure_publisher_t))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3320      	adds	r3, #32
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7fe fd31 	bl	8004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f083 0301 	eor.w	r3, r3, #1
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <_ZN18LPS22HB_rosService25LPS22HB_AdvertizePressureEv+0x36>
	{
		return (int32_t) diagnostic_msgs::DiagnosticStatus::ERROR;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e000      	b.n	8005ef8 <_ZN18LPS22HB_rosService25LPS22HB_AdvertizePressureEv+0x38>
	}

	return diagnostic_msgs::DiagnosticStatus::OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <_ZN18LPS22HB_rosService26LPS22HB_TemperaturePublishEv>:

int32_t LPS22HB_rosService::LPS22HB_TemperaturePublish(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	return (int32_t) this->LPS22HB_air_temperature_publisher_t.publish(LPS22HB_air_temperature_t_);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f103 0208 	add.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7fd fcb3 	bl	8003880 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8005f1a:	4603      	mov	r3, r0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <_ZN18LPS22HB_rosService23LPS22HB_PressurePublishEv>:

int32_t LPS22HB_rosService::LPS22HB_PressurePublish(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	return (int32_t) this->LPS22HB_air_pressure_publisher_t.publish(LPS22HB_air_pressure_t_);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f103 0220 	add.w	r2, r3, #32
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f7fd fca1 	bl	8003880 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8005f3e:	4603      	mov	r3, r0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <_ZN18LPS22HB_rosService25LPS22HB_air_temperature_tEv>:
    ros::Publisher LPS22HB_air_temperature_publisher_t;
    sensor_msgs::FluidPressure *LPS22HB_air_pressure_t_;
    ros::Publisher LPS22HB_air_pressure_publisher_t;

public:
    sensor_msgs::Temperature * LPS22HB_air_temperature_t()
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
    {
    	if(NULL != serialInstance)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <_ZN18LPS22HB_rosService25LPS22HB_air_temperature_tEv+0x32>
    	{
        	LPS22HB_air_temperature_t_->header.stamp = serialInstance->nh.now();
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685c      	ldr	r4, [r3, #4]
 8005f62:	463b      	mov	r3, r7
 8005f64:	4611      	mov	r1, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fe0a 	bl	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005f6c:	f104 030c 	add.w	r3, r4, #12
 8005f70:	463a      	mov	r2, r7
 8005f72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f76:	e883 0003 	stmia.w	r3, {r0, r1}
    	}

    	return LPS22HB_air_temperature_t_;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
    }
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd90      	pop	{r4, r7, pc}

08005f86 <_ZN18LPS22HB_rosService22LPS22HB_air_pressure_tEv>:
    const sensor_msgs::Temperature * LPS22HB_air_temperature_t() const { return LPS22HB_air_temperature_t_; }

    sensor_msgs::FluidPressure * LPS22HB_air_pressure_t()
 8005f86:	b590      	push	{r4, r7, lr}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
    {
    	if(NULL != serialInstance)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d010      	beq.n	8005fb8 <_ZN18LPS22HB_rosService22LPS22HB_air_pressure_tEv+0x32>
    	{
    		LPS22HB_air_pressure_t_->header.stamp = serialInstance->nh.now();
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	69dc      	ldr	r4, [r3, #28]
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fdeb 	bl	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005faa:	f104 030c 	add.w	r3, r4, #12
 8005fae:	463a      	mov	r2, r7
 8005fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fb4:	e883 0003 	stmia.w	r3, {r0, r1}
    	}

    	return LPS22HB_air_pressure_t_;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	69db      	ldr	r3, [r3, #28]
    }
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd90      	pop	{r4, r7, pc}

08005fc4 <new_C_LPS22HB_rosService>:

/**
 * Explicit constructor
 */
uint32_t new_C_LPS22HB_rosService(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
	if(NULL != (rosLPS22HBInstance = reinterpret_cast<C_LPS22HB_rosService_t*>(LPS22HB_rosService::getInstance())))
 8005fc8:	f7ff fef6 	bl	8005db8 <_ZN18LPS22HB_rosService11getInstanceEv>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <new_C_LPS22HB_rosService+0x2c>)
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <new_C_LPS22HB_rosService+0x2c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <new_C_LPS22HB_rosService+0x24>
	{
		return LPS22HB_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e001      	b.n	8005fec <new_C_LPS22HB_rosService+0x28>
	}

	return LPS22HB_ERROR;
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200001a4 	.word	0x200001a4

08005ff4 <del_C_LPS22HB_rosService>:
/**
 * Explicit destructor
 */
void del_C_LPS22HB_rosService(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
	delete reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance);
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <del_C_LPS22HB_rosService+0x1c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2134      	movs	r1, #52	; 0x34
 8005ffe:	4618      	mov	r0, r3
 8006000:	f007 fe77 	bl	800dcf2 <_ZdlPvj>

	rosLPS22HBInstance = NULL;
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <del_C_LPS22HB_rosService+0x1c>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	bf00      	nop
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200001a4 	.word	0x200001a4

08006014 <LPS22HB_RosAdvertize>:
 * @param  C_HTS221_rosService the ROSserial object reference
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RosAdvertize(LPS22HB_Capabilities_t *Capabilities)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	if(Capabilities->Temperature)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <LPS22HB_RosAdvertize+0x1a>
	{
		reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance)->LPS22HB_AdvertizeTemperature();
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <LPS22HB_RosAdvertize+0x38>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ff29 	bl	8005e80 <_ZN18LPS22HB_rosService28LPS22HB_AdvertizeTemperatureEv>
	}
	if(Capabilities->Pressure)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <LPS22HB_RosAdvertize+0x2c>
	{
		reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance)->LPS22HB_AdvertizePressure();
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <LPS22HB_RosAdvertize+0x38>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff ff40 	bl	8005ec0 <_ZN18LPS22HB_rosService25LPS22HB_AdvertizePressureEv>
	}

	return LPS22HB_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200001a4 	.word	0x200001a4

08006050 <LPS22HB_RosSetTemperature>:

	return LPS22HB_ERROR;
}

void LPS22HB_RosSetTemperature(LPS22HB_Object_t *pObj, double value)
{
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	ed87 0b00 	vstr	d0, [r7]
	if(pObj->temp_is_enabled)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <LPS22HB_RosSetTemperature+0x2a>
	{
		reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance)->LPS22HB_air_temperature_t()->temperature =  value;
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <LPS22HB_RosSetTemperature+0x34>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff ff6c 	bl	8005f48 <_ZN18LPS22HB_rosService25LPS22HB_air_temperature_tEv>
 8006070:	4602      	mov	r2, r0
 8006072:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006076:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	200001a4 	.word	0x200001a4

08006088 <LPS22HB_RosSetPressure>:

	return LPS22HB_ERROR;
}

void LPS22HB_RosSetPressure(LPS22HB_Object_t *pObj, double value)
{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	ed87 0b00 	vstr	d0, [r7]
	if(pObj->press_is_enabled)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <LPS22HB_RosSetPressure+0x2a>
	{
		reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance)->LPS22HB_air_pressure_t()->fluid_pressure =  value;
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <LPS22HB_RosSetPressure+0x34>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff ff6f 	bl	8005f86 <_ZN18LPS22HB_rosService22LPS22HB_air_pressure_tEv>
 80060a8:	4602      	mov	r2, r0
 80060aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80060ae:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd90      	pop	{r4, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200001a4 	.word	0x200001a4

080060c0 <LPS22HB_RosTemperaturePublish>:

int32_t LPS22HB_RosTemperaturePublish(LPS22HB_Object_t *pObj)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	if(pObj->temp_is_enabled)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d006      	beq.n	80060e0 <LPS22HB_RosTemperaturePublish+0x20>
	{
		return (int32_t) reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance)->LPS22HB_TemperaturePublish();
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <LPS22HB_RosTemperaturePublish+0x2c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff ff12 	bl	8005f00 <_ZN18LPS22HB_rosService26LPS22HB_TemperaturePublishEv>
 80060dc:	4603      	mov	r3, r0
 80060de:	e001      	b.n	80060e4 <LPS22HB_RosTemperaturePublish+0x24>
	}

	return LPS22HB_ERROR;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	200001a4 	.word	0x200001a4

080060f0 <LPS22HB_RosPressurePublish>:

int32_t LPS22HB_RosPressurePublish(LPS22HB_Object_t *pObj)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	if(pObj->press_is_enabled)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <LPS22HB_RosPressurePublish+0x20>
	{
		return (int32_t) reinterpret_cast<LPS22HB_rosService*>(rosLPS22HBInstance)->LPS22HB_PressurePublish();
 8006102:	4b06      	ldr	r3, [pc, #24]	; (800611c <LPS22HB_RosPressurePublish+0x2c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ff0c 	bl	8005f24 <_ZN18LPS22HB_rosService23LPS22HB_PressurePublishEv>
 800610c:	4603      	mov	r3, r0
 800610e:	e001      	b.n	8006114 <LPS22HB_RosPressurePublish+0x24>
	}

	return LPS22HB_ERROR;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	200001a4 	.word	0x200001a4

08006120 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	f7fb f83c 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 8006130:	4a0e      	ldr	r2, [pc, #56]	; (800616c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	f04f 0400 	mov.w	r4, #0
 8006140:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f04f 0400 	mov.w	r4, #0
 800614e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	f04f 0400 	mov.w	r4, #0
 800615c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}
 800616a:	bf00      	nop
 800616c:	0800e6e0 	.word	0x0800e6e0

08006170 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006170:	b490      	push	{r4, r7}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006184:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8006188:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	440a      	add	r2, r1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8006196:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	f04f 0400 	mov.w	r4, #0
 80061a2:	0a0b      	lsrs	r3, r1, #8
 80061a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061a8:	0a14      	lsrs	r4, r2, #8
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	3201      	adds	r2, #1
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	440a      	add	r2, r1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80061b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f04f 0400 	mov.w	r4, #0
 80061c2:	0c0b      	lsrs	r3, r1, #16
 80061c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c8:	0c14      	lsrs	r4, r2, #16
 80061ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061cc:	3202      	adds	r2, #2
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	440a      	add	r2, r1
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80061d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	f04f 0400 	mov.w	r4, #0
 80061e2:	0e0b      	lsrs	r3, r1, #24
 80061e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061e8:	0e14      	lsrs	r4, r2, #24
 80061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ec:	3203      	adds	r2, #3
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	440a      	add	r2, r1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80061f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	f04f 0400 	mov.w	r4, #0
 8006202:	0013      	movs	r3, r2
 8006204:	2400      	movs	r4, #0
 8006206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006208:	3204      	adds	r2, #4
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	440a      	add	r2, r1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8006212:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	f04f 0400 	mov.w	r4, #0
 800621e:	0a13      	lsrs	r3, r2, #8
 8006220:	2400      	movs	r4, #0
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	3205      	adds	r2, #5
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	440a      	add	r2, r1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800622e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	f04f 0400 	mov.w	r4, #0
 800623a:	0c13      	lsrs	r3, r2, #16
 800623c:	2400      	movs	r4, #0
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	3206      	adds	r2, #6
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	440a      	add	r2, r1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800624a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	f04f 0400 	mov.w	r4, #0
 8006256:	0e13      	lsrs	r3, r2, #24
 8006258:	2400      	movs	r4, #0
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	3207      	adds	r2, #7
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	440a      	add	r2, r1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	3308      	adds	r3, #8
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006272:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8006276:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	440a      	add	r2, r1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8006284:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	f04f 0400 	mov.w	r4, #0
 8006290:	0a0b      	lsrs	r3, r1, #8
 8006292:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006296:	0a14      	lsrs	r4, r2, #8
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	3201      	adds	r2, #1
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	440a      	add	r2, r1
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80062a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	f04f 0400 	mov.w	r4, #0
 80062b0:	0c0b      	lsrs	r3, r1, #16
 80062b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b6:	0c14      	lsrs	r4, r2, #16
 80062b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ba:	3202      	adds	r2, #2
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	440a      	add	r2, r1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80062c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	f04f 0400 	mov.w	r4, #0
 80062d0:	0e0b      	lsrs	r3, r1, #24
 80062d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062d6:	0e14      	lsrs	r4, r2, #24
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	3203      	adds	r2, #3
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	440a      	add	r2, r1
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80062e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	f04f 0400 	mov.w	r4, #0
 80062f0:	0013      	movs	r3, r2
 80062f2:	2400      	movs	r4, #0
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	3204      	adds	r2, #4
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	440a      	add	r2, r1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8006300:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	f04f 0400 	mov.w	r4, #0
 800630c:	0a13      	lsrs	r3, r2, #8
 800630e:	2400      	movs	r4, #0
 8006310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006312:	3205      	adds	r2, #5
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	440a      	add	r2, r1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800631c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	f04f 0400 	mov.w	r4, #0
 8006328:	0c13      	lsrs	r3, r2, #16
 800632a:	2400      	movs	r4, #0
 800632c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632e:	3206      	adds	r2, #6
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	440a      	add	r2, r1
 8006334:	b2db      	uxtb	r3, r3
 8006336:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8006338:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	f04f 0400 	mov.w	r4, #0
 8006344:	0e13      	lsrs	r3, r2, #24
 8006346:	2400      	movs	r4, #0
 8006348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634a:	3207      	adds	r2, #7
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	440a      	add	r2, r1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	3308      	adds	r3, #8
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8006360:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8006364:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	440a      	add	r2, r1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8006372:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	f04f 0400 	mov.w	r4, #0
 800637e:	0a0b      	lsrs	r3, r1, #8
 8006380:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006384:	0a14      	lsrs	r4, r2, #8
 8006386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006388:	3201      	adds	r2, #1
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	440a      	add	r2, r1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8006392:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	f04f 0400 	mov.w	r4, #0
 800639e:	0c0b      	lsrs	r3, r1, #16
 80063a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063a4:	0c14      	lsrs	r4, r2, #16
 80063a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a8:	3202      	adds	r2, #2
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	440a      	add	r2, r1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80063b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f04f 0400 	mov.w	r4, #0
 80063be:	0e0b      	lsrs	r3, r1, #24
 80063c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063c4:	0e14      	lsrs	r4, r2, #24
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	3203      	adds	r2, #3
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	440a      	add	r2, r1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80063d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	f04f 0400 	mov.w	r4, #0
 80063de:	0013      	movs	r3, r2
 80063e0:	2400      	movs	r4, #0
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	3204      	adds	r2, #4
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	440a      	add	r2, r1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80063ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	f04f 0400 	mov.w	r4, #0
 80063fa:	0a13      	lsrs	r3, r2, #8
 80063fc:	2400      	movs	r4, #0
 80063fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006400:	3205      	adds	r2, #5
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	440a      	add	r2, r1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800640a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f04f 0400 	mov.w	r4, #0
 8006416:	0c13      	lsrs	r3, r2, #16
 8006418:	2400      	movs	r4, #0
 800641a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641c:	3206      	adds	r2, #6
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	440a      	add	r2, r1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8006426:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	f04f 0400 	mov.w	r4, #0
 8006432:	0e13      	lsrs	r3, r2, #24
 8006434:	2400      	movs	r4, #0
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	3207      	adds	r2, #7
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	440a      	add	r2, r1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	3308      	adds	r3, #8
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bc90      	pop	{r4, r7}
 8006452:	4770      	bx	lr

08006454 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006454:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006458:	b08c      	sub	sp, #48	; 0x30
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	f04f 0400 	mov.w	r4, #0
 800646c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006470:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	68b8      	ldr	r0, [r7, #8]
 8006478:	4403      	add	r3, r0
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	461c      	mov	r4, r3
 800647e:	b2e4      	uxtb	r4, r4
 8006480:	f04f 0500 	mov.w	r5, #0
 8006484:	4623      	mov	r3, r4
 8006486:	462c      	mov	r4, r5
 8006488:	ea43 0301 	orr.w	r3, r3, r1
 800648c:	ea44 0402 	orr.w	r4, r4, r2
 8006490:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006494:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006498:	461d      	mov	r5, r3
 800649a:	4626      	mov	r6, r4
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	3301      	adds	r3, #1
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	4413      	add	r3, r2
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	b2d9      	uxtb	r1, r3
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	0214      	lsls	r4, r2, #8
 80064b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80064ba:	020b      	lsls	r3, r1, #8
 80064bc:	4629      	mov	r1, r5
 80064be:	4632      	mov	r2, r6
 80064c0:	ea41 0103 	orr.w	r1, r1, r3
 80064c4:	ea42 0204 	orr.w	r2, r2, r4
 80064c8:	460b      	mov	r3, r1
 80064ca:	4614      	mov	r4, r2
 80064cc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80064d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80064d4:	461d      	mov	r5, r3
 80064d6:	4626      	mov	r6, r4
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	3302      	adds	r3, #2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	4413      	add	r3, r2
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b2d9      	uxtb	r1, r3
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	f04f 0400 	mov.w	r4, #0
 80064f0:	0414      	lsls	r4, r2, #16
 80064f2:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80064f6:	040b      	lsls	r3, r1, #16
 80064f8:	4629      	mov	r1, r5
 80064fa:	4632      	mov	r2, r6
 80064fc:	ea41 0103 	orr.w	r1, r1, r3
 8006500:	ea42 0204 	orr.w	r2, r2, r4
 8006504:	460b      	mov	r3, r1
 8006506:	4614      	mov	r4, r2
 8006508:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800650c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	3303      	adds	r3, #3
 8006514:	68b8      	ldr	r0, [r7, #8]
 8006516:	4403      	add	r3, r0
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f04f 0400 	mov.w	r4, #0
 8006520:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8006524:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8006528:	ea41 030a 	orr.w	r3, r1, sl
 800652c:	ea42 040b 	orr.w	r4, r2, fp
 8006530:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006534:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	3304      	adds	r3, #4
 800653c:	68b8      	ldr	r0, [r7, #8]
 800653e:	4403      	add	r3, r0
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	fa5f fa83 	uxtb.w	sl, r3
 8006546:	f04f 0b00 	mov.w	fp, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	f04f 0400 	mov.w	r4, #0
 8006552:	4625      	mov	r5, r4
 8006554:	461c      	mov	r4, r3
 8006556:	4653      	mov	r3, sl
 8006558:	461d      	mov	r5, r3
 800655a:	2300      	movs	r3, #0
 800655c:	461c      	mov	r4, r3
 800655e:	4623      	mov	r3, r4
 8006560:	462c      	mov	r4, r5
 8006562:	ea43 0301 	orr.w	r3, r3, r1
 8006566:	ea44 0402 	orr.w	r4, r4, r2
 800656a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800656e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	3305      	adds	r3, #5
 8006576:	68b8      	ldr	r0, [r7, #8]
 8006578:	4403      	add	r3, r0
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	fa5f fa83 	uxtb.w	sl, r3
 8006580:	f04f 0b00 	mov.w	fp, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	f04f 0400 	mov.w	r4, #0
 800658c:	4625      	mov	r5, r4
 800658e:	461c      	mov	r4, r3
 8006590:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8006594:	461d      	mov	r5, r3
 8006596:	2300      	movs	r3, #0
 8006598:	461c      	mov	r4, r3
 800659a:	4623      	mov	r3, r4
 800659c:	462c      	mov	r4, r5
 800659e:	ea43 0301 	orr.w	r3, r3, r1
 80065a2:	ea44 0402 	orr.w	r4, r4, r2
 80065a6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80065aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	3306      	adds	r3, #6
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	4403      	add	r3, r0
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	fa5f fa83 	uxtb.w	sl, r3
 80065bc:	f04f 0b00 	mov.w	fp, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	f04f 0400 	mov.w	r4, #0
 80065c8:	4625      	mov	r5, r4
 80065ca:	461c      	mov	r4, r3
 80065cc:	ea4f 430a 	mov.w	r3, sl, lsl #16
 80065d0:	461d      	mov	r5, r3
 80065d2:	2300      	movs	r3, #0
 80065d4:	461c      	mov	r4, r3
 80065d6:	4623      	mov	r3, r4
 80065d8:	462c      	mov	r4, r5
 80065da:	ea43 0301 	orr.w	r3, r3, r1
 80065de:	ea44 0402 	orr.w	r4, r4, r2
 80065e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80065e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	3307      	adds	r3, #7
 80065ee:	68b8      	ldr	r0, [r7, #8]
 80065f0:	4403      	add	r3, r0
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	fa5f fa83 	uxtb.w	sl, r3
 80065f8:	f04f 0b00 	mov.w	fp, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	f04f 0400 	mov.w	r4, #0
 8006604:	4625      	mov	r5, r4
 8006606:	461c      	mov	r4, r3
 8006608:	ea4f 630a 	mov.w	r3, sl, lsl #24
 800660c:	461d      	mov	r5, r3
 800660e:	2300      	movs	r3, #0
 8006610:	461c      	mov	r4, r3
 8006612:	4623      	mov	r3, r4
 8006614:	462c      	mov	r4, r5
 8006616:	ea43 0301 	orr.w	r3, r3, r1
 800661a:	ea44 0402 	orr.w	r4, r4, r2
 800661e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8006622:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	3308      	adds	r3, #8
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	f04f 0400 	mov.w	r4, #0
 800663a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800663e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	68b8      	ldr	r0, [r7, #8]
 8006646:	4403      	add	r3, r0
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	fa5f fa83 	uxtb.w	sl, r3
 800664e:	f04f 0b00 	mov.w	fp, #0
 8006652:	ea4a 0301 	orr.w	r3, sl, r1
 8006656:	ea4b 0402 	orr.w	r4, fp, r2
 800665a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800665e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	3301      	adds	r3, #1
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2d9      	uxtb	r1, r3
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	f04f 0400 	mov.w	r4, #0
 800667a:	4625      	mov	r5, r4
 800667c:	461c      	mov	r4, r3
 800667e:	0213      	lsls	r3, r2, #8
 8006680:	461d      	mov	r5, r3
 8006682:	462b      	mov	r3, r5
 8006684:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8006688:	461d      	mov	r5, r3
 800668a:	020b      	lsls	r3, r1, #8
 800668c:	461c      	mov	r4, r3
 800668e:	4623      	mov	r3, r4
 8006690:	462c      	mov	r4, r5
 8006692:	ea43 030a 	orr.w	r3, r3, sl
 8006696:	ea44 040b 	orr.w	r4, r4, fp
 800669a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800669e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	3302      	adds	r3, #2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	4413      	add	r3, r2
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b2d9      	uxtb	r1, r3
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	f04f 0400 	mov.w	r4, #0
 80066ba:	4625      	mov	r5, r4
 80066bc:	461c      	mov	r4, r3
 80066be:	0413      	lsls	r3, r2, #16
 80066c0:	461d      	mov	r5, r3
 80066c2:	462b      	mov	r3, r5
 80066c4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80066c8:	461d      	mov	r5, r3
 80066ca:	040b      	lsls	r3, r1, #16
 80066cc:	461c      	mov	r4, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	462c      	mov	r4, r5
 80066d2:	ea43 030a 	orr.w	r3, r3, sl
 80066d6:	ea44 040b 	orr.w	r4, r4, fp
 80066da:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80066de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	3303      	adds	r3, #3
 80066e6:	68b8      	ldr	r0, [r7, #8]
 80066e8:	4403      	add	r3, r0
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f04f 0400 	mov.w	r4, #0
 80066f2:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80066f6:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80066fa:	ea41 0308 	orr.w	r3, r1, r8
 80066fe:	ea42 0409 	orr.w	r4, r2, r9
 8006702:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006706:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	3304      	adds	r3, #4
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	4403      	add	r3, r0
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	fa5f f883 	uxtb.w	r8, r3
 8006718:	f04f 0900 	mov.w	r9, #0
 800671c:	f04f 0a00 	mov.w	sl, #0
 8006720:	f04f 0b00 	mov.w	fp, #0
 8006724:	46c3      	mov	fp, r8
 8006726:	f04f 0a00 	mov.w	sl, #0
 800672a:	ea4a 0301 	orr.w	r3, sl, r1
 800672e:	ea4b 0402 	orr.w	r4, fp, r2
 8006732:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006736:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	3305      	adds	r3, #5
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	4403      	add	r3, r0
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	fa5f f883 	uxtb.w	r8, r3
 8006748:	f04f 0900 	mov.w	r9, #0
 800674c:	f04f 0a00 	mov.w	sl, #0
 8006750:	f04f 0b00 	mov.w	fp, #0
 8006754:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8006758:	f04f 0a00 	mov.w	sl, #0
 800675c:	ea4a 0301 	orr.w	r3, sl, r1
 8006760:	ea4b 0402 	orr.w	r4, fp, r2
 8006764:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006768:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	3306      	adds	r3, #6
 8006770:	68b8      	ldr	r0, [r7, #8]
 8006772:	4403      	add	r3, r0
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	fa5f f883 	uxtb.w	r8, r3
 800677a:	f04f 0900 	mov.w	r9, #0
 800677e:	f04f 0a00 	mov.w	sl, #0
 8006782:	f04f 0b00 	mov.w	fp, #0
 8006786:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 800678a:	f04f 0a00 	mov.w	sl, #0
 800678e:	ea4a 0301 	orr.w	r3, sl, r1
 8006792:	ea4b 0402 	orr.w	r4, fp, r2
 8006796:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800679a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	3307      	adds	r3, #7
 80067a2:	68b8      	ldr	r0, [r7, #8]
 80067a4:	4403      	add	r3, r0
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	fa5f f883 	uxtb.w	r8, r3
 80067ac:	f04f 0900 	mov.w	r9, #0
 80067b0:	f04f 0a00 	mov.w	sl, #0
 80067b4:	f04f 0b00 	mov.w	fp, #0
 80067b8:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80067bc:	f04f 0a00 	mov.w	sl, #0
 80067c0:	ea4a 0301 	orr.w	r3, sl, r1
 80067c4:	ea4b 0402 	orr.w	r4, fp, r2
 80067c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 80067cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	3308      	adds	r3, #8
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	f04f 0400 	mov.w	r4, #0
 80067e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80067e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	4403      	add	r3, r0
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	fa5f f883 	uxtb.w	r8, r3
 80067f8:	f04f 0900 	mov.w	r9, #0
 80067fc:	ea48 0301 	orr.w	r3, r8, r1
 8006800:	ea49 0402 	orr.w	r4, r9, r2
 8006804:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006808:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	3301      	adds	r3, #1
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	4413      	add	r3, r2
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b2d9      	uxtb	r1, r3
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0a00 	mov.w	sl, #0
 8006820:	f04f 0b00 	mov.w	fp, #0
 8006824:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8006828:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 800682c:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8006830:	ea4a 0308 	orr.w	r3, sl, r8
 8006834:	ea4b 0409 	orr.w	r4, fp, r9
 8006838:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800683c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	3302      	adds	r3, #2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	b2d9      	uxtb	r1, r3
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0a00 	mov.w	sl, #0
 8006854:	f04f 0b00 	mov.w	fp, #0
 8006858:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 800685c:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8006860:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8006864:	ea4a 0308 	orr.w	r3, sl, r8
 8006868:	ea4b 0409 	orr.w	r4, fp, r9
 800686c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006870:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	3303      	adds	r3, #3
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	4403      	add	r3, r0
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	f04f 0400 	mov.w	r4, #0
 8006884:	0a18      	lsrs	r0, r3, #8
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006890:	ea43 0301 	orr.w	r3, r3, r1
 8006894:	ea44 0402 	orr.w	r4, r4, r2
 8006898:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800689c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	3304      	adds	r3, #4
 80068a4:	68b8      	ldr	r0, [r7, #8]
 80068a6:	4403      	add	r3, r0
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b2dd      	uxtb	r5, r3
 80068ac:	f04f 0600 	mov.w	r6, #0
 80068b0:	f04f 0800 	mov.w	r8, #0
 80068b4:	f04f 0900 	mov.w	r9, #0
 80068b8:	46a9      	mov	r9, r5
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	ea48 0301 	orr.w	r3, r8, r1
 80068c2:	ea49 0402 	orr.w	r4, r9, r2
 80068c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80068ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	3305      	adds	r3, #5
 80068d2:	68b8      	ldr	r0, [r7, #8]
 80068d4:	4403      	add	r3, r0
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	b2dd      	uxtb	r5, r3
 80068da:	f04f 0600 	mov.w	r6, #0
 80068de:	f04f 0800 	mov.w	r8, #0
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	ea48 0301 	orr.w	r3, r8, r1
 80068f2:	ea49 0402 	orr.w	r4, r9, r2
 80068f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80068fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	3306      	adds	r3, #6
 8006902:	68b8      	ldr	r0, [r7, #8]
 8006904:	4403      	add	r3, r0
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2dd      	uxtb	r5, r3
 800690a:	f04f 0600 	mov.w	r6, #0
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	f04f 0900 	mov.w	r9, #0
 8006916:	ea4f 4905 	mov.w	r9, r5, lsl #16
 800691a:	f04f 0800 	mov.w	r8, #0
 800691e:	ea48 0301 	orr.w	r3, r8, r1
 8006922:	ea49 0402 	orr.w	r4, r9, r2
 8006926:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800692a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	3307      	adds	r3, #7
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	4403      	add	r3, r0
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b2dd      	uxtb	r5, r3
 800693a:	f04f 0600 	mov.w	r6, #0
 800693e:	f04f 0800 	mov.w	r8, #0
 8006942:	f04f 0900 	mov.w	r9, #0
 8006946:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800694a:	f04f 0800 	mov.w	r8, #0
 800694e:	ea48 0301 	orr.w	r3, r8, r1
 8006952:	ea49 0402 	orr.w	r4, r9, r2
 8006956:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 800695a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	3308      	adds	r3, #8
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800696c:	4618      	mov	r0, r3
 800696e:	3730      	adds	r7, #48	; 0x30
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006976:	4770      	bx	lr

08006978 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	0800e350 	.word	0x0800e350

08006994 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	0800e368 	.word	0x0800e368

080069b0 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e04d      	b.n	8006a68 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	7b1a      	ldrb	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <LSM6DSL_RegisterBusIO+0xc4>)
 8006a08:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1a      	ldr	r2, [pc, #104]	; (8006a78 <LSM6DSL_RegisterBusIO+0xc8>)
 8006a0e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e020      	b.n	8006a68 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e016      	b.n	8006a68 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d112      	bne.n	8006a68 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	461a      	mov	r2, r3
 8006a54:	2112      	movs	r1, #18
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fd80 	bl	800755c <LSM6DSL_Write_Reg>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a66:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006a68:	68fb      	ldr	r3, [r7, #12]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	080079cd 	.word	0x080079cd
 8006a78:	08007a03 	.word	0x08007a03

08006a7c <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t * Capabilities)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	331c      	adds	r3, #28
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f001 fa38 	bl	8007f02 <lsm6dsl_auto_increment_set>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <LSM6DSL_Init+0x22>
  {
    return LSM6DSL_ERROR;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9c:	e068      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	331c      	adds	r3, #28
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f9d3 	bl	8007e50 <lsm6dsl_block_data_update_set>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <LSM6DSL_Init+0x3a>
  {
    return LSM6DSL_ERROR;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ab4:	e05c      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	331c      	adds	r3, #28
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fa46 	bl	8007f4e <lsm6dsl_fifo_mode_set>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <LSM6DSL_Init+0x52>
  {
    return LSM6DSL_ERROR;
 8006ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006acc:	e050      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	331c      	adds	r3, #28
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 f839 	bl	8007b54 <lsm6dsl_xl_data_rate_set>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <LSM6DSL_Init+0x72>
  {
    return LSM6DSL_ERROR;
 8006ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aec:	e040      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	331c      	adds	r3, #28
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 ffcf 	bl	8007a98 <lsm6dsl_xl_full_scale_set>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <LSM6DSL_Init+0x8a>
  {
    return LSM6DSL_ERROR;
 8006b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b04:	e034      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	331c      	adds	r3, #28
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 f913 	bl	8007d40 <lsm6dsl_gy_data_rate_set>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <LSM6DSL_Init+0xaa>
  {
    return LSM6DSL_ERROR;
 8006b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b24:	e024      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	331c      	adds	r3, #28
 8006b2a:	2106      	movs	r1, #6
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f89f 	bl	8007c70 <lsm6dsl_gy_full_scale_set>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <LSM6DSL_Init+0xc2>
  {
    return LSM6DSL_ERROR;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b3c:	e018      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  if(new_C_LSM6DSL_rosService())
 8006b3e:	f002 fd69 	bl	8009614 <new_C_LSM6DSL_rosService>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <LSM6DSL_Init+0xd2>
  {
	  return LSM6DSL_ERROR;
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4c:	e010      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  if(LSM6DSL_OK != LSM6DSL_RosAdvertize(Capabilities))
 8006b4e:	6838      	ldr	r0, [r7, #0]
 8006b50:	f002 fd88 	bl	8009664 <LSM6DSL_RosAdvertize>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <LSM6DSL_Init+0xe4>
  {
	  return LSM6DSL_ERROR;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b5e:	e007      	b.n	8006b70 <LSM6DSL_Init+0xf4>
  }

  m_b_isImuUpdated = IMU_UPDATED_CLEAR;
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <LSM6DSL_Init+0xfc>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
  pObj->is_initialized = 1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200001a8 	.word	0x200001a8

08006b7c <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f88f 	bl	8006ca8 <LSM6DSL_ACC_Disable>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8006b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b94:	e01a      	b.n	8006bcc <LSM6DSL_DeInit+0x50>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 faba 	bl	8007110 <LSM6DSL_GYRO_Disable>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ba6:	e011      	b.n	8006bcc <LSM6DSL_DeInit+0x50>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  del_C_LSM6DSL_rosService();
 8006bc0:	f002 fd40 	bl	8009644 <del_C_LSM6DSL_rosService>
  m_b_isImuUpdated = IMU_UPDATED_CLEAR;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <LSM6DSL_DeInit+0x58>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]

  return LSM6DSL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200001a8 	.word	0x200001a8

08006bd8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	331c      	adds	r3, #28
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 f979 	bl	8007ee0 <lsm6dsl_device_id_get>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8006bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bf8:	e000      	b.n	8006bfc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2201      	movs	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2201      	movs	r2, #1
 8006c18:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c2c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2210      	movs	r2, #16
 8006c32:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <LSM6DSL_GetCapabilities+0x58>)
 8006c3e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	4a06      	ldr	r2, [pc, #24]	; (8006c5c <LSM6DSL_GetCapabilities+0x58>)
 8006c44:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	45d02000 	.word	0x45d02000

08006c60 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e014      	b.n	8006ca0 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 021c 	add.w	r2, r3, #28
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 ff65 	bl	8007b54 <lsm6dsl_xl_data_rate_set>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c94:	e004      	b.n	8006ca0 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e01f      	b.n	8006cfe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f103 021c 	add.w	r2, r3, #28
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	332b      	adds	r3, #43	; 0x2b
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f000 ff68 	bl	8007ba0 <lsm6dsl_xl_data_rate_get>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cda:	e010      	b.n	8006cfe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	331c      	adds	r3, #28
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 ff36 	bl	8007b54 <lsm6dsl_xl_data_rate_set>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf2:	e004      	b.n	8006cfe <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	331c      	adds	r3, #28
 8006d1a:	f107 020b 	add.w	r2, r7, #11
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fedf 	bl	8007ae4 <lsm6dsl_xl_full_scale_get>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d30:	e023      	b.n	8006d7a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d81b      	bhi.n	8006d70 <LSM6DSL_ACC_GetSensitivity+0x68>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d59 	.word	0x08006d59
 8006d4c:	08006d61 	.word	0x08006d61
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4a0c      	ldr	r2, [pc, #48]	; (8006d84 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8006d54:	601a      	str	r2, [r3, #0]
      break;
 8006d56:	e00f      	b.n	8006d78 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8006d5c:	601a      	str	r2, [r3, #0]
      break;
 8006d5e:	e00b      	b.n	8006d78 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8006d64:	601a      	str	r2, [r3, #0]
      break;
 8006d66:	e007      	b.n	8006d78 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8006d6c:	601a      	str	r2, [r3, #0]
      break;
 8006d6e:	e003      	b.n	8006d78 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d74:	60fb      	str	r3, [r7, #12]
      break;
 8006d76:	bf00      	nop
  }

  return ret;
 8006d78:	68fb      	ldr	r3, [r7, #12]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	3d79db23 	.word	0x3d79db23
 8006d88:	3df9db23 	.word	0x3df9db23
 8006d8c:	3e79db23 	.word	0x3e79db23
 8006d90:	3ef9db23 	.word	0x3ef9db23

08006d94 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	331c      	adds	r3, #28
 8006da6:	f107 020b 	add.w	r2, r7, #11
 8006daa:	4611      	mov	r1, r2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fef7 	bl	8007ba0 <lsm6dsl_xl_data_rate_get>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dbc:	e054      	b.n	8006e68 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	2b0b      	cmp	r3, #11
 8006dc2:	d84c      	bhi.n	8006e5e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006dfd 	.word	0x08006dfd
 8006dd0:	08006e0f 	.word	0x08006e0f
 8006dd4:	08006e17 	.word	0x08006e17
 8006dd8:	08006e1f 	.word	0x08006e1f
 8006ddc:	08006e27 	.word	0x08006e27
 8006de0:	08006e2f 	.word	0x08006e2f
 8006de4:	08006e37 	.word	0x08006e37
 8006de8:	08006e3f 	.word	0x08006e3f
 8006dec:	08006e47 	.word	0x08006e47
 8006df0:	08006e4f 	.word	0x08006e4f
 8006df4:	08006e57 	.word	0x08006e57
 8006df8:	08006e07 	.word	0x08006e07
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
      break;
 8006e04:	e02f      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8006e0a:	601a      	str	r2, [r3, #0]
      break;
 8006e0c:	e02b      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8006e12:	601a      	str	r2, [r3, #0]
      break;
 8006e14:	e027      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8006e1a:	601a      	str	r2, [r3, #0]
      break;
 8006e1c:	e023      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8006e22:	601a      	str	r2, [r3, #0]
      break;
 8006e24:	e01f      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8006e2a:	601a      	str	r2, [r3, #0]
      break;
 8006e2c:	e01b      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8006e32:	601a      	str	r2, [r3, #0]
      break;
 8006e34:	e017      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8006e3a:	601a      	str	r2, [r3, #0]
      break;
 8006e3c:	e013      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	4a12      	ldr	r2, [pc, #72]	; (8006e8c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8006e42:	601a      	str	r2, [r3, #0]
      break;
 8006e44:	e00f      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	4a11      	ldr	r2, [pc, #68]	; (8006e90 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8006e4a:	601a      	str	r2, [r3, #0]
      break;
 8006e4c:	e00b      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	4a10      	ldr	r2, [pc, #64]	; (8006e94 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8006e52:	601a      	str	r2, [r3, #0]
      break;
 8006e54:	e007      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	4a0f      	ldr	r2, [pc, #60]	; (8006e98 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8006e5a:	601a      	str	r2, [r3, #0]
      break;
 8006e5c:	e003      	b.n	8006e66 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e62:	60fb      	str	r3, [r7, #12]
      break;
 8006e64:	bf00      	nop
  }

  return ret;
 8006e66:	68fb      	ldr	r3, [r7, #12]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	3fcccccd 	.word	0x3fcccccd
 8006e74:	41480000 	.word	0x41480000
 8006e78:	41d00000 	.word	0x41d00000
 8006e7c:	42500000 	.word	0x42500000
 8006e80:	42d00000 	.word	0x42d00000
 8006e84:	43500000 	.word	0x43500000
 8006e88:	43d00000 	.word	0x43d00000
 8006e8c:	44504000 	.word	0x44504000
 8006e90:	44cf8000 	.word	0x44cf8000
 8006e94:	45502000 	.word	0x45502000
 8006e98:	45d02000 	.word	0x45d02000

08006e9c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006eb2:	ed97 0a00 	vldr	s0, [r7]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fb6c 	bl	8007594 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	e005      	b.n	8006ecc <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006ec0:	ed97 0a00 	vldr	s0, [r7]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fbf1 	bl	80076ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8006eca:	4603      	mov	r3, r0
  }
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	331c      	adds	r3, #28
 8006ee6:	f107 020b 	add.w	r2, r7, #11
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fdf9 	bl	8007ae4 <lsm6dsl_xl_full_scale_get>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006efc:	e023      	b.n	8006f46 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d81b      	bhi.n	8006f3c <LSM6DSL_ACC_GetFullScale+0x68>
 8006f04:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <LSM6DSL_ACC_GetFullScale+0x38>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f2d 	.word	0x08006f2d
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	601a      	str	r2, [r3, #0]
      break;
 8006f22:	e00f      	b.n	8006f44 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2204      	movs	r2, #4
 8006f28:	601a      	str	r2, [r3, #0]
      break;
 8006f2a:	e00b      	b.n	8006f44 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2208      	movs	r2, #8
 8006f30:	601a      	str	r2, [r3, #0]
      break;
 8006f32:	e007      	b.n	8006f44 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	601a      	str	r2, [r3, #0]
      break;
 8006f3a:	e003      	b.n	8006f44 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f40:	60fb      	str	r3, [r7, #12]
      break;
 8006f42:	bf00      	nop
  }

  return ret;
 8006f44:	68fb      	ldr	r3, [r7, #12]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop

08006f50 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	dd0b      	ble.n	8006f78 <LSM6DSL_ACC_SetFullScale+0x28>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	dd06      	ble.n	8006f74 <LSM6DSL_ACC_SetFullScale+0x24>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	dc01      	bgt.n	8006f70 <LSM6DSL_ACC_SetFullScale+0x20>
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e004      	b.n	8006f7a <LSM6DSL_ACC_SetFullScale+0x2a>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e002      	b.n	8006f7a <LSM6DSL_ACC_SetFullScale+0x2a>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e000      	b.n	8006f7a <LSM6DSL_ACC_SetFullScale+0x2a>
 8006f78:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8006f7a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	331c      	adds	r3, #28
 8006f80:	7bfa      	ldrb	r2, [r7, #15]
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fd87 	bl	8007a98 <lsm6dsl_xl_full_scale_set>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f94:	e000      	b.n	8006f98 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	331c      	adds	r3, #28
 8006fae:	f107 0208 	add.w	r2, r7, #8
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 ff82 	bl	8007ebe <lsm6dsl_acceleration_raw_get>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fc4:	e00c      	b.n	8006fe0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006fc6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006fce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006fd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8006ff2:	f04f 0300 	mov.w	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	331c      	adds	r3, #28
 8006ffc:	f107 0210 	add.w	r2, r7, #16
 8007000:	4611      	mov	r1, r2
 8007002:	4618      	mov	r0, r3
 8007004:	f000 ff5b 	bl	8007ebe <lsm6dsl_acceleration_raw_get>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800700e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007012:	e053      	b.n	80070bc <LSM6DSL_ACC_GetAxes+0xd4>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff fe74 	bl	8006d08 <LSM6DSL_ACC_GetSensitivity>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8007026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800702a:	e047      	b.n	80070bc <LSM6DSL_ACC_GetAxes+0xd4>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800702c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007038:	edd7 7a03 	vldr	s15, [r7, #12]
 800703c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007044:	ee17 2a90 	vmov	r2, s15
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800704c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007058:	edd7 7a03 	vldr	s15, [r7, #12]
 800705c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007064:	ee17 2a90 	vmov	r2, s15
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800706c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007078:	edd7 7a03 	vldr	s15, [r7, #12]
 800707c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007084:	ee17 2a90 	vmov	r2, s15
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	609a      	str	r2, [r3, #8]

  /*	Set Acc */
  LSM6DSL_RosSetAcceleration(pObj, Acceleration);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f002 fb0c 	bl	80096ac <LSM6DSL_RosSetAcceleration>
  m_b_isImuUpdated |= 1 << ACC_UPDATED_BIT_FIELD;
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <LSM6DSL_ACC_GetAxes+0xdc>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f043 0301 	orr.w	r3, r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <LSM6DSL_ACC_GetAxes+0xdc>)
 80070a0:	701a      	strb	r2, [r3, #0]

  //	Check first if we have updated both Gyro & acceleration data before publishing complete Imu data
  if(IMU_UPDATED_FIELD_MASK == (m_b_isImuUpdated & IMU_UPDATED_FIELD_MASK))
 80070a2:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <LSM6DSL_ACC_GetAxes+0xdc>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d105      	bne.n	80070ba <LSM6DSL_ACC_GetAxes+0xd2>
  {
	  m_b_isImuUpdated = IMU_UPDATED_CLEAR;
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <LSM6DSL_ACC_GetAxes+0xdc>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
	  LSM6DSL_RosImuPublish(pObj);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f002 fb75 	bl	80097a4 <LSM6DSL_RosImuPublish>
  }

  return LSM6DSL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200001a8 	.word	0x200001a8

080070c8 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e014      	b.n	8007108 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f103 021c 	add.w	r2, r3, #28
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f000 fe27 	bl	8007d40 <lsm6dsl_gy_data_rate_set>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070fc:	e004      	b.n	8007108 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	e01f      	b.n	8007166 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f103 021c 	add.w	r2, r3, #28
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	332c      	adds	r3, #44	; 0x2c
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 fe2a 	bl	8007d8c <lsm6dsl_gy_data_rate_get>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800713e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007142:	e010      	b.n	8007166 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	331c      	adds	r3, #28
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fdf8 	bl	8007d40 <lsm6dsl_gy_data_rate_set>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8007156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800715a:	e004      	b.n	8007166 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	331c      	adds	r3, #28
 8007182:	f107 020b 	add.w	r2, r7, #11
 8007186:	4611      	mov	r1, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fd97 	bl	8007cbc <lsm6dsl_gy_full_scale_get>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8007194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007198:	e02d      	b.n	80071f6 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	2b06      	cmp	r3, #6
 800719e:	d825      	bhi.n	80071ec <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071c5 	.word	0x080071c5
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071ed 	.word	0x080071ed
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071ed 	.word	0x080071ed
 80071c0:	080071e5 	.word	0x080071e5
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80071c8:	601a      	str	r2, [r3, #0]
      break;
 80071ca:	e013      	b.n	80071f4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80071d0:	601a      	str	r2, [r3, #0]
      break;
 80071d2:	e00f      	b.n	80071f4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4a0c      	ldr	r2, [pc, #48]	; (8007208 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80071d8:	601a      	str	r2, [r3, #0]
      break;
 80071da:	e00b      	b.n	80071f4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	4a0b      	ldr	r2, [pc, #44]	; (800720c <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80071e0:	601a      	str	r2, [r3, #0]
      break;
 80071e2:	e007      	b.n	80071f4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	4a0a      	ldr	r2, [pc, #40]	; (8007210 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80071e8:	601a      	str	r2, [r3, #0]
      break;
 80071ea:	e003      	b.n	80071f4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80071ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f0:	60fb      	str	r3, [r7, #12]
      break;
 80071f2:	bf00      	nop
  }

  return ret;
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	408c0000 	.word	0x408c0000
 8007204:	410c0000 	.word	0x410c0000
 8007208:	418c0000 	.word	0x418c0000
 800720c:	420c0000 	.word	0x420c0000
 8007210:	428c0000 	.word	0x428c0000

08007214 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	331c      	adds	r3, #28
 8007226:	f107 020b 	add.w	r2, r7, #11
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fdad 	bl	8007d8c <lsm6dsl_gy_data_rate_get>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8007238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800723c:	e04e      	b.n	80072dc <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	2b0a      	cmp	r3, #10
 8007242:	d846      	bhi.n	80072d2 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007279 	.word	0x08007279
 8007250:	08007283 	.word	0x08007283
 8007254:	0800728b 	.word	0x0800728b
 8007258:	08007293 	.word	0x08007293
 800725c:	0800729b 	.word	0x0800729b
 8007260:	080072a3 	.word	0x080072a3
 8007264:	080072ab 	.word	0x080072ab
 8007268:	080072b3 	.word	0x080072b3
 800726c:	080072bb 	.word	0x080072bb
 8007270:	080072c3 	.word	0x080072c3
 8007274:	080072cb 	.word	0x080072cb
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
      break;
 8007280:	e02b      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4a17      	ldr	r2, [pc, #92]	; (80072e4 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8007286:	601a      	str	r2, [r3, #0]
      break;
 8007288:	e027      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	4a16      	ldr	r2, [pc, #88]	; (80072e8 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800728e:	601a      	str	r2, [r3, #0]
      break;
 8007290:	e023      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8007296:	601a      	str	r2, [r3, #0]
      break;
 8007298:	e01f      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	4a14      	ldr	r2, [pc, #80]	; (80072f0 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800729e:	601a      	str	r2, [r3, #0]
      break;
 80072a0:	e01b      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80072a6:	601a      	str	r2, [r3, #0]
      break;
 80072a8:	e017      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80072ae:	601a      	str	r2, [r3, #0]
      break;
 80072b0:	e013      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4a11      	ldr	r2, [pc, #68]	; (80072fc <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80072b6:	601a      	str	r2, [r3, #0]
      break;
 80072b8:	e00f      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	4a10      	ldr	r2, [pc, #64]	; (8007300 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80072be:	601a      	str	r2, [r3, #0]
      break;
 80072c0:	e00b      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80072c6:	601a      	str	r2, [r3, #0]
      break;
 80072c8:	e007      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	4a0e      	ldr	r2, [pc, #56]	; (8007308 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80072ce:	601a      	str	r2, [r3, #0]
      break;
 80072d0:	e003      	b.n	80072da <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d6:	60fb      	str	r3, [r7, #12]
      break;
 80072d8:	bf00      	nop
  }

  return ret;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	41480000 	.word	0x41480000
 80072e8:	41d00000 	.word	0x41d00000
 80072ec:	42500000 	.word	0x42500000
 80072f0:	42d00000 	.word	0x42d00000
 80072f4:	43500000 	.word	0x43500000
 80072f8:	43d00000 	.word	0x43d00000
 80072fc:	44504000 	.word	0x44504000
 8007300:	44cf8000 	.word	0x44cf8000
 8007304:	45502000 	.word	0x45502000
 8007308:	45d02000 	.word	0x45d02000

0800730c <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800731e:	2b01      	cmp	r3, #1
 8007320:	d106      	bne.n	8007330 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007322:	ed97 0a00 	vldr	s0, [r7]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa42 	bl	80077b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800732c:	4603      	mov	r3, r0
 800732e:	e005      	b.n	800733c <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007330:	ed97 0a00 	vldr	s0, [r7]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fac7 	bl	80078c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800733a:	4603      	mov	r3, r0
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	331c      	adds	r3, #28
 8007356:	f107 020b 	add.w	r2, r7, #11
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fcad 	bl	8007cbc <lsm6dsl_gy_full_scale_get>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8007368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800736c:	e030      	b.n	80073d0 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d828      	bhi.n	80073c6 <LSM6DSL_GYRO_GetFullScale+0x82>
 8007374:	a201      	add	r2, pc, #4	; (adr r2, 800737c <LSM6DSL_GYRO_GetFullScale+0x38>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	080073a1 	.word	0x080073a1
 8007380:	08007399 	.word	0x08007399
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073c7 	.word	0x080073c7
 800738c:	080073b3 	.word	0x080073b3
 8007390:	080073c7 	.word	0x080073c7
 8007394:	080073bd 	.word	0x080073bd
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	227d      	movs	r2, #125	; 0x7d
 800739c:	601a      	str	r2, [r3, #0]
      break;
 800739e:	e016      	b.n	80073ce <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	22fa      	movs	r2, #250	; 0xfa
 80073a4:	601a      	str	r2, [r3, #0]
      break;
 80073a6:	e012      	b.n	80073ce <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80073ae:	601a      	str	r2, [r3, #0]
      break;
 80073b0:	e00d      	b.n	80073ce <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073b8:	601a      	str	r2, [r3, #0]
      break;
 80073ba:	e008      	b.n	80073ce <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80073c2:	601a      	str	r2, [r3, #0]
      break;
 80073c4:	e003      	b.n	80073ce <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ca:	60fb      	str	r3, [r7, #12]
      break;
 80073cc:	bf00      	nop
  }

  return ret;
 80073ce:	68fb      	ldr	r3, [r7, #12]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b7d      	cmp	r3, #125	; 0x7d
 80073e6:	dd12      	ble.n	800740e <LSM6DSL_GYRO_SetFullScale+0x36>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2bfa      	cmp	r3, #250	; 0xfa
 80073ec:	dd0d      	ble.n	800740a <LSM6DSL_GYRO_SetFullScale+0x32>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80073f4:	dd07      	ble.n	8007406 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073fc:	dc01      	bgt.n	8007402 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80073fe:	2304      	movs	r3, #4
 8007400:	e006      	b.n	8007410 <LSM6DSL_GYRO_SetFullScale+0x38>
 8007402:	2306      	movs	r3, #6
 8007404:	e004      	b.n	8007410 <LSM6DSL_GYRO_SetFullScale+0x38>
 8007406:	2302      	movs	r3, #2
 8007408:	e002      	b.n	8007410 <LSM6DSL_GYRO_SetFullScale+0x38>
 800740a:	2300      	movs	r3, #0
 800740c:	e000      	b.n	8007410 <LSM6DSL_GYRO_SetFullScale+0x38>
 800740e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8007410:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	331c      	adds	r3, #28
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fc28 	bl	8007c70 <lsm6dsl_gy_full_scale_set>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8007426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800742a:	e000      	b.n	800742e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	331c      	adds	r3, #28
 8007444:	f107 0208 	add.w	r2, r7, #8
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fd26 	bl	8007e9c <lsm6dsl_angular_rate_raw_get>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800745a:	e00c      	b.n	8007476 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800745c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007464:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800746c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	331c      	adds	r3, #28
 800748e:	f107 0210 	add.w	r2, r7, #16
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fd01 	bl	8007e9c <lsm6dsl_angular_rate_raw_get>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a4:	e053      	b.n	800754e <LSM6DSL_GYRO_GetAxes+0xce>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80074a6:	f107 030c 	add.w	r3, r7, #12
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fe5f 	bl	8007170 <LSM6DSL_GYRO_GetSensitivity>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80074b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074bc:	e047      	b.n	800754e <LSM6DSL_GYRO_GetAxes+0xce>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80074be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80074ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074d6:	ee17 2a90 	vmov	r2, s15
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80074de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f6:	ee17 2a90 	vmov	r2, s15
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80074fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800750a:	edd7 7a03 	vldr	s15, [r7, #12]
 800750e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007516:	ee17 2a90 	vmov	r2, s15
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	609a      	str	r2, [r3, #8]

  /*	Set Gyro */
  LSM6DSL_RosSetGyroscope(pObj, AngularRate);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f002 f901 	bl	8009728 <LSM6DSL_RosSetGyroscope>
  m_b_isImuUpdated |= 1 << GYRO_UPDATED_BIT_FIELD;
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <LSM6DSL_GYRO_GetAxes+0xd8>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f043 0302 	orr.w	r3, r3, #2
 800752e:	b2da      	uxtb	r2, r3
 8007530:	4b09      	ldr	r3, [pc, #36]	; (8007558 <LSM6DSL_GYRO_GetAxes+0xd8>)
 8007532:	701a      	strb	r2, [r3, #0]

  //	Check first if we have updated both Gyro & acceleration data before publishing complete Imu data
  if(IMU_UPDATED_FIELD_MASK == (m_b_isImuUpdated & IMU_UPDATED_FIELD_MASK))
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <LSM6DSL_GYRO_GetAxes+0xd8>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	2b03      	cmp	r3, #3
 800753e:	d105      	bne.n	800754c <LSM6DSL_GYRO_GetAxes+0xcc>
  {
	  m_b_isImuUpdated = IMU_UPDATED_CLEAR;
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <LSM6DSL_GYRO_GetAxes+0xd8>)
 8007542:	2200      	movs	r2, #0
 8007544:	701a      	strb	r2, [r3, #0]
	  LSM6DSL_RosImuPublish(pObj);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f002 f92c 	bl	80097a4 <LSM6DSL_RosImuPublish>
  }
  return LSM6DSL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	200001a8 	.word	0x200001a8

0800755c <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
 8007568:	4613      	mov	r3, r2
 800756a:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f103 001c 	add.w	r0, r3, #28
 8007572:	1cba      	adds	r2, r7, #2
 8007574:	78f9      	ldrb	r1, [r7, #3]
 8007576:	2301      	movs	r3, #1
 8007578:	f000 fa76 	bl	8007a68 <lsm6dsl_write_reg>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8007582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007586:	e000      	b.n	800758a <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80075a0:	edd7 7a00 	vldr	s15, [r7]
 80075a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80075a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b0:	d801      	bhi.n	80075b6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e058      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80075b6:	edd7 7a00 	vldr	s15, [r7]
 80075ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80075be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	d801      	bhi.n	80075cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e04d      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80075cc:	edd7 7a00 	vldr	s15, [r7]
 80075d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007690 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80075d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075dc:	d801      	bhi.n	80075e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80075de:	2303      	movs	r3, #3
 80075e0:	e042      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80075e2:	edd7 7a00 	vldr	s15, [r7]
 80075e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007694 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80075ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	d801      	bhi.n	80075f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80075f4:	2304      	movs	r3, #4
 80075f6:	e037      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80075f8:	edd7 7a00 	vldr	s15, [r7]
 80075fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007698 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8007600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007608:	d801      	bhi.n	800760e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800760a:	2305      	movs	r3, #5
 800760c:	e02c      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800760e:	edd7 7a00 	vldr	s15, [r7]
 8007612:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800769c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	d801      	bhi.n	8007624 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8007620:	2306      	movs	r3, #6
 8007622:	e021      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007624:	edd7 7a00 	vldr	s15, [r7]
 8007628:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80076a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800762c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007634:	d801      	bhi.n	800763a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8007636:	2307      	movs	r3, #7
 8007638:	e016      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800763a:	edd7 7a00 	vldr	s15, [r7]
 800763e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80076a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764a:	d801      	bhi.n	8007650 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800764c:	2308      	movs	r3, #8
 800764e:	e00b      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007650:	edd7 7a00 	vldr	s15, [r7]
 8007654:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80076a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007660:	d801      	bhi.n	8007666 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007662:	2309      	movs	r3, #9
 8007664:	e000      	b.n	8007668 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007666:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8007668:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	331c      	adds	r3, #28
 800766e:	7bfa      	ldrb	r2, [r7, #15]
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fa6e 	bl	8007b54 <lsm6dsl_xl_data_rate_set>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800767e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007682:	e000      	b.n	8007686 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	42500000 	.word	0x42500000
 8007694:	42d00000 	.word	0x42d00000
 8007698:	43500000 	.word	0x43500000
 800769c:	43d00000 	.word	0x43d00000
 80076a0:	44504000 	.word	0x44504000
 80076a4:	44cf8000 	.word	0x44cf8000
 80076a8:	45502000 	.word	0x45502000

080076ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80076b8:	edd7 7a00 	vldr	s15, [r7]
 80076bc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80076c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c8:	d801      	bhi.n	80076ce <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e058      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80076ce:	edd7 7a00 	vldr	s15, [r7]
 80076d2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80076d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	d801      	bhi.n	80076e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e04d      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80076e4:	edd7 7a00 	vldr	s15, [r7]
 80076e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007794 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80076ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	d801      	bhi.n	80076fa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80076f6:	2303      	movs	r3, #3
 80076f8:	e042      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80076fa:	edd7 7a00 	vldr	s15, [r7]
 80076fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007798 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8007702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	d801      	bhi.n	8007710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800770c:	2304      	movs	r3, #4
 800770e:	e037      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007710:	edd7 7a00 	vldr	s15, [r7]
 8007714:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800779c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8007718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800771c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007720:	d801      	bhi.n	8007726 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007722:	2305      	movs	r3, #5
 8007724:	e02c      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007726:	edd7 7a00 	vldr	s15, [r7]
 800772a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80077a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800772e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	d801      	bhi.n	800773c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007738:	2306      	movs	r3, #6
 800773a:	e021      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800773c:	edd7 7a00 	vldr	s15, [r7]
 8007740:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80077a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774c:	d801      	bhi.n	8007752 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800774e:	2307      	movs	r3, #7
 8007750:	e016      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007752:	edd7 7a00 	vldr	s15, [r7]
 8007756:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80077a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800775a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	d801      	bhi.n	8007768 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007764:	2308      	movs	r3, #8
 8007766:	e00b      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007768:	edd7 7a00 	vldr	s15, [r7]
 800776c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80077ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	d801      	bhi.n	800777e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800777a:	2309      	movs	r3, #9
 800777c:	e000      	b.n	8007780 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800777e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	42500000 	.word	0x42500000
 8007798:	42d00000 	.word	0x42d00000
 800779c:	43500000 	.word	0x43500000
 80077a0:	43d00000 	.word	0x43d00000
 80077a4:	44504000 	.word	0x44504000
 80077a8:	44cf8000 	.word	0x44cf8000
 80077ac:	45502000 	.word	0x45502000

080077b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80077bc:	edd7 7a00 	vldr	s15, [r7]
 80077c0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80077c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	d801      	bhi.n	80077d2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e058      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077d2:	edd7 7a00 	vldr	s15, [r7]
 80077d6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80077da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e2:	d801      	bhi.n	80077e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e04d      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077e8:	edd7 7a00 	vldr	s15, [r7]
 80077ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80078ac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80077f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f8:	d801      	bhi.n	80077fe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80077fa:	2303      	movs	r3, #3
 80077fc:	e042      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077fe:	edd7 7a00 	vldr	s15, [r7]
 8007802:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80078b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	d801      	bhi.n	8007814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007810:	2304      	movs	r3, #4
 8007812:	e037      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007814:	edd7 7a00 	vldr	s15, [r7]
 8007818:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80078b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800781c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007824:	d801      	bhi.n	800782a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007826:	2305      	movs	r3, #5
 8007828:	e02c      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800782a:	edd7 7a00 	vldr	s15, [r7]
 800782e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80078b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783a:	d801      	bhi.n	8007840 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800783c:	2306      	movs	r3, #6
 800783e:	e021      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007840:	edd7 7a00 	vldr	s15, [r7]
 8007844:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80078bc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	d801      	bhi.n	8007856 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007852:	2307      	movs	r3, #7
 8007854:	e016      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007856:	edd7 7a00 	vldr	s15, [r7]
 800785a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80078c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800785e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007866:	d801      	bhi.n	800786c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007868:	2308      	movs	r3, #8
 800786a:	e00b      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800786c:	edd7 7a00 	vldr	s15, [r7]
 8007870:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80078c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787c:	d801      	bhi.n	8007882 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800787e:	2309      	movs	r3, #9
 8007880:	e000      	b.n	8007884 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007882:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8007884:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	331c      	adds	r3, #28
 800788a:	7bfa      	ldrb	r2, [r7, #15]
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fa56 	bl	8007d40 <lsm6dsl_gy_data_rate_set>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800789e:	e000      	b.n	80078a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	42500000 	.word	0x42500000
 80078b0:	42d00000 	.word	0x42d00000
 80078b4:	43500000 	.word	0x43500000
 80078b8:	43d00000 	.word	0x43d00000
 80078bc:	44504000 	.word	0x44504000
 80078c0:	44cf8000 	.word	0x44cf8000
 80078c4:	45502000 	.word	0x45502000

080078c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80078d4:	edd7 7a00 	vldr	s15, [r7]
 80078d8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80078dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e4:	d801      	bhi.n	80078ea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e058      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078ea:	edd7 7a00 	vldr	s15, [r7]
 80078ee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80078f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fa:	d801      	bhi.n	8007900 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e04d      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007900:	edd7 7a00 	vldr	s15, [r7]
 8007904:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80079b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	d801      	bhi.n	8007916 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007912:	2303      	movs	r3, #3
 8007914:	e042      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007916:	edd7 7a00 	vldr	s15, [r7]
 800791a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80079b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800791e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	d801      	bhi.n	800792c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007928:	2304      	movs	r3, #4
 800792a:	e037      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800792c:	edd7 7a00 	vldr	s15, [r7]
 8007930:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80079b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	d801      	bhi.n	8007942 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800793e:	2305      	movs	r3, #5
 8007940:	e02c      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007942:	edd7 7a00 	vldr	s15, [r7]
 8007946:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80079bc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800794a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800794e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007952:	d801      	bhi.n	8007958 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007954:	2306      	movs	r3, #6
 8007956:	e021      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007958:	edd7 7a00 	vldr	s15, [r7]
 800795c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80079c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007968:	d801      	bhi.n	800796e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800796a:	2307      	movs	r3, #7
 800796c:	e016      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800796e:	edd7 7a00 	vldr	s15, [r7]
 8007972:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	d801      	bhi.n	8007984 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007980:	2308      	movs	r3, #8
 8007982:	e00b      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007984:	edd7 7a00 	vldr	s15, [r7]
 8007988:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80079c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800798c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007994:	d801      	bhi.n	800799a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007996:	2309      	movs	r3, #9
 8007998:	e000      	b.n	800799c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800799a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	42500000 	.word	0x42500000
 80079b4:	42d00000 	.word	0x42d00000
 80079b8:	43500000 	.word	0x43500000
 80079bc:	43d00000 	.word	0x43d00000
 80079c0:	44504000 	.word	0x44504000
 80079c4:	44cf8000 	.word	0x44cf8000
 80079c8:	45502000 	.word	0x45502000

080079cc <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80079cc:	b590      	push	{r4, r7, lr}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	461a      	mov	r2, r3
 80079d8:	460b      	mov	r3, r1
 80079da:	72fb      	strb	r3, [r7, #11]
 80079dc:	4613      	mov	r3, r2
 80079de:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	695c      	ldr	r4, [r3, #20]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	7b1b      	ldrb	r3, [r3, #12]
 80079ec:	b298      	uxth	r0, r3
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	b299      	uxth	r1, r3
 80079f2:	893b      	ldrh	r3, [r7, #8]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	47a0      	blx	r4
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd90      	pop	{r4, r7, pc}

08007a02 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007a02:	b590      	push	{r4, r7, lr}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	460b      	mov	r3, r1
 8007a10:	72fb      	strb	r3, [r7, #11]
 8007a12:	4613      	mov	r3, r2
 8007a14:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	691c      	ldr	r4, [r3, #16]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	7b1b      	ldrb	r3, [r3, #12]
 8007a22:	b298      	uxth	r0, r3
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	b299      	uxth	r1, r3
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	47a0      	blx	r4
 8007a2e:	4603      	mov	r3, r0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd90      	pop	{r4, r7, pc}

08007a38 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	461a      	mov	r2, r3
 8007a44:	460b      	mov	r3, r1
 8007a46:	72fb      	strb	r3, [r7, #11]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685c      	ldr	r4, [r3, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6898      	ldr	r0, [r3, #8]
 8007a54:	893b      	ldrh	r3, [r7, #8]
 8007a56:	7af9      	ldrb	r1, [r7, #11]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	47a0      	blx	r4
 8007a5c:	6178      	str	r0, [r7, #20]
  return ret;
 8007a5e:	697b      	ldr	r3, [r7, #20]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd90      	pop	{r4, r7, pc}

08007a68 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	461a      	mov	r2, r3
 8007a74:	460b      	mov	r3, r1
 8007a76:	72fb      	strb	r3, [r7, #11]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681c      	ldr	r4, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6898      	ldr	r0, [r3, #8]
 8007a84:	893b      	ldrh	r3, [r7, #8]
 8007a86:	7af9      	ldrb	r1, [r7, #11]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	47a0      	blx	r4
 8007a8c:	6178      	str	r0, [r7, #20]
  return ret;
 8007a8e:	697b      	ldr	r3, [r7, #20]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd90      	pop	{r4, r7, pc}

08007a98 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007aa4:	f107 0208 	add.w	r2, r7, #8
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	2110      	movs	r1, #16
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ffc3 	bl	8007a38 <lsm6dsl_read_reg>
 8007ab2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10f      	bne.n	8007ada <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	7a3b      	ldrb	r3, [r7, #8]
 8007ac4:	f362 0383 	bfi	r3, r2, #2, #2
 8007ac8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	2301      	movs	r3, #1
 8007ad0:	2110      	movs	r1, #16
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff ffc8 	bl	8007a68 <lsm6dsl_write_reg>
 8007ad8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007aee:	f107 0208 	add.w	r2, r7, #8
 8007af2:	2301      	movs	r3, #1
 8007af4:	2110      	movs	r1, #16
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff ff9e 	bl	8007a38 <lsm6dsl_read_reg>
 8007afc:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8007afe:	7a3b      	ldrb	r3, [r7, #8]
 8007b00:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d81a      	bhi.n	8007b40 <lsm6dsl_xl_full_scale_get+0x5c>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <lsm6dsl_xl_full_scale_get+0x2c>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b29 	.word	0x08007b29
 8007b18:	08007b31 	.word	0x08007b31
 8007b1c:	08007b39 	.word	0x08007b39
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	e00f      	b.n	8007b48 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
      break;
 8007b2e:	e00b      	b.n	8007b48 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e007      	b.n	8007b48 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	701a      	strb	r2, [r3, #0]
      break;
 8007b3e:	e003      	b.n	8007b48 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2204      	movs	r2, #4
 8007b44:	701a      	strb	r2, [r3, #0]
      break;
 8007b46:	bf00      	nop
  }

  return ret;
 8007b48:	68fb      	ldr	r3, [r7, #12]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop

08007b54 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	2301      	movs	r3, #1
 8007b66:	2110      	movs	r1, #16
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ff65 	bl	8007a38 <lsm6dsl_read_reg>
 8007b6e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10f      	bne.n	8007b96 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	7a3b      	ldrb	r3, [r7, #8]
 8007b80:	f362 1307 	bfi	r3, r2, #4, #4
 8007b84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff ff6a 	bl	8007a68 <lsm6dsl_write_reg>
 8007b94:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007b96:	68fb      	ldr	r3, [r7, #12]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007baa:	f107 0208 	add.w	r2, r7, #8
 8007bae:	2301      	movs	r3, #1
 8007bb0:	2110      	movs	r1, #16
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ff40 	bl	8007a38 <lsm6dsl_read_reg>
 8007bb8:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8007bba:	7a3b      	ldrb	r3, [r7, #8]
 8007bbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b0b      	cmp	r3, #11
 8007bc4:	d84a      	bhi.n	8007c5c <lsm6dsl_xl_data_rate_get+0xbc>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <lsm6dsl_xl_data_rate_get+0x2c>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007bfd 	.word	0x08007bfd
 8007bd0:	08007c05 	.word	0x08007c05
 8007bd4:	08007c0d 	.word	0x08007c0d
 8007bd8:	08007c15 	.word	0x08007c15
 8007bdc:	08007c1d 	.word	0x08007c1d
 8007be0:	08007c25 	.word	0x08007c25
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c35 	.word	0x08007c35
 8007bec:	08007c3d 	.word	0x08007c3d
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c55 	.word	0x08007c55
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
      break;
 8007c02:	e02f      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
      break;
 8007c0a:	e02b      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e027      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2203      	movs	r2, #3
 8007c18:	701a      	strb	r2, [r3, #0]
      break;
 8007c1a:	e023      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e01f      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2205      	movs	r2, #5
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e01b      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2206      	movs	r2, #6
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e017      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2207      	movs	r2, #7
 8007c38:	701a      	strb	r2, [r3, #0]
      break;
 8007c3a:	e013      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	701a      	strb	r2, [r3, #0]
      break;
 8007c42:	e00f      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2209      	movs	r2, #9
 8007c48:	701a      	strb	r2, [r3, #0]
      break;
 8007c4a:	e00b      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	220a      	movs	r2, #10
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	e007      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	220b      	movs	r2, #11
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e003      	b.n	8007c64 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	220c      	movs	r2, #12
 8007c60:	701a      	strb	r2, [r3, #0]
      break;
 8007c62:	bf00      	nop
  }

  return ret;
 8007c64:	68fb      	ldr	r3, [r7, #12]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop

08007c70 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	2301      	movs	r3, #1
 8007c82:	2111      	movs	r1, #17
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fed7 	bl	8007a38 <lsm6dsl_read_reg>
 8007c8a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10f      	bne.n	8007cb2 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	7a3b      	ldrb	r3, [r7, #8]
 8007c9c:	f362 0343 	bfi	r3, r2, #1, #3
 8007ca0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007ca2:	f107 0208 	add.w	r2, r7, #8
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	2111      	movs	r1, #17
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fedc 	bl	8007a68 <lsm6dsl_write_reg>
 8007cb0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007cc6:	f107 0208 	add.w	r2, r7, #8
 8007cca:	2301      	movs	r3, #1
 8007ccc:	2111      	movs	r1, #17
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff feb2 	bl	8007a38 <lsm6dsl_read_reg>
 8007cd4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8007cd6:	7a3b      	ldrb	r3, [r7, #8]
 8007cd8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b06      	cmp	r3, #6
 8007ce0:	d824      	bhi.n	8007d2c <lsm6dsl_gy_full_scale_get+0x70>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <lsm6dsl_gy_full_scale_get+0x2c>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d05 	.word	0x08007d05
 8007cec:	08007d0d 	.word	0x08007d0d
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d2d 	.word	0x08007d2d
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d2d 	.word	0x08007d2d
 8007d00:	08007d25 	.word	0x08007d25
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
      break;
 8007d0a:	e013      	b.n	8007d34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	701a      	strb	r2, [r3, #0]
      break;
 8007d12:	e00f      	b.n	8007d34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2202      	movs	r2, #2
 8007d18:	701a      	strb	r2, [r3, #0]
      break;
 8007d1a:	e00b      	b.n	8007d34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	701a      	strb	r2, [r3, #0]
      break;
 8007d22:	e007      	b.n	8007d34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2206      	movs	r2, #6
 8007d28:	701a      	strb	r2, [r3, #0]
      break;
 8007d2a:	e003      	b.n	8007d34 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2207      	movs	r2, #7
 8007d30:	701a      	strb	r2, [r3, #0]
      break;
 8007d32:	bf00      	nop
  }

  return ret;
 8007d34:	68fb      	ldr	r3, [r7, #12]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop

08007d40 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007d4c:	f107 0208 	add.w	r2, r7, #8
 8007d50:	2301      	movs	r3, #1
 8007d52:	2111      	movs	r1, #17
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fe6f 	bl	8007a38 <lsm6dsl_read_reg>
 8007d5a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	7a3b      	ldrb	r3, [r7, #8]
 8007d6c:	f362 1307 	bfi	r3, r2, #4, #4
 8007d70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	2301      	movs	r3, #1
 8007d78:	2111      	movs	r1, #17
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fe74 	bl	8007a68 <lsm6dsl_write_reg>
 8007d80:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007d96:	f107 0208 	add.w	r2, r7, #8
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	2111      	movs	r1, #17
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fe4a 	bl	8007a38 <lsm6dsl_read_reg>
 8007da4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8007da6:	7a3b      	ldrb	r3, [r7, #8]
 8007da8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b0a      	cmp	r3, #10
 8007db0:	d844      	bhi.n	8007e3c <lsm6dsl_gy_data_rate_get+0xb0>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <lsm6dsl_gy_data_rate_get+0x2c>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007de5 	.word	0x08007de5
 8007dbc:	08007ded 	.word	0x08007ded
 8007dc0:	08007df5 	.word	0x08007df5
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007e05 	.word	0x08007e05
 8007dcc:	08007e0d 	.word	0x08007e0d
 8007dd0:	08007e15 	.word	0x08007e15
 8007dd4:	08007e1d 	.word	0x08007e1d
 8007dd8:	08007e25 	.word	0x08007e25
 8007ddc:	08007e2d 	.word	0x08007e2d
 8007de0:	08007e35 	.word	0x08007e35
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
      break;
 8007dea:	e02b      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2201      	movs	r2, #1
 8007df0:	701a      	strb	r2, [r3, #0]
      break;
 8007df2:	e027      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2202      	movs	r2, #2
 8007df8:	701a      	strb	r2, [r3, #0]
      break;
 8007dfa:	e023      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	701a      	strb	r2, [r3, #0]
      break;
 8007e02:	e01f      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2204      	movs	r2, #4
 8007e08:	701a      	strb	r2, [r3, #0]
      break;
 8007e0a:	e01b      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2205      	movs	r2, #5
 8007e10:	701a      	strb	r2, [r3, #0]
      break;
 8007e12:	e017      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2206      	movs	r2, #6
 8007e18:	701a      	strb	r2, [r3, #0]
      break;
 8007e1a:	e013      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2207      	movs	r2, #7
 8007e20:	701a      	strb	r2, [r3, #0]
      break;
 8007e22:	e00f      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2208      	movs	r2, #8
 8007e28:	701a      	strb	r2, [r3, #0]
      break;
 8007e2a:	e00b      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2209      	movs	r2, #9
 8007e30:	701a      	strb	r2, [r3, #0]
      break;
 8007e32:	e007      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	220a      	movs	r2, #10
 8007e38:	701a      	strb	r2, [r3, #0]
      break;
 8007e3a:	e003      	b.n	8007e44 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	220b      	movs	r2, #11
 8007e40:	701a      	strb	r2, [r3, #0]
      break;
 8007e42:	bf00      	nop
  }

  return ret;
 8007e44:	68fb      	ldr	r3, [r7, #12]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007e5c:	f107 0208 	add.w	r2, r7, #8
 8007e60:	2301      	movs	r3, #1
 8007e62:	2112      	movs	r1, #18
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fde7 	bl	8007a38 <lsm6dsl_read_reg>
 8007e6a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10f      	bne.n	8007e92 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	7a3b      	ldrb	r3, [r7, #8]
 8007e7c:	f362 1386 	bfi	r3, r2, #6, #1
 8007e80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007e82:	f107 0208 	add.w	r2, r7, #8
 8007e86:	2301      	movs	r3, #1
 8007e88:	2112      	movs	r1, #18
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff fdec 	bl	8007a68 <lsm6dsl_write_reg>
 8007e90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8007ea6:	2306      	movs	r3, #6
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	2122      	movs	r1, #34	; 0x22
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fdc3 	bl	8007a38 <lsm6dsl_read_reg>
 8007eb2:	60f8      	str	r0, [r7, #12]
  return ret;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8007ec8:	2306      	movs	r3, #6
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	2128      	movs	r1, #40	; 0x28
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff fdb2 	bl	8007a38 <lsm6dsl_read_reg>
 8007ed4:	60f8      	str	r0, [r7, #12]
  return ret;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8007eea:	2301      	movs	r3, #1
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	210f      	movs	r1, #15
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff fda1 	bl	8007a38 <lsm6dsl_read_reg>
 8007ef6:	60f8      	str	r0, [r7, #12]
  return ret;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007f0e:	f107 0208 	add.w	r2, r7, #8
 8007f12:	2301      	movs	r3, #1
 8007f14:	2112      	movs	r1, #18
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff fd8e 	bl	8007a38 <lsm6dsl_read_reg>
 8007f1c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10f      	bne.n	8007f44 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	7a3b      	ldrb	r3, [r7, #8]
 8007f2e:	f362 0382 	bfi	r3, r2, #2, #1
 8007f32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007f34:	f107 0208 	add.w	r2, r7, #8
 8007f38:	2301      	movs	r3, #1
 8007f3a:	2112      	movs	r1, #18
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fd93 	bl	8007a68 <lsm6dsl_write_reg>
 8007f42:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007f44:	68fb      	ldr	r3, [r7, #12]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007f5a:	f107 0208 	add.w	r2, r7, #8
 8007f5e:	2301      	movs	r3, #1
 8007f60:	210a      	movs	r1, #10
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fd68 	bl	8007a38 <lsm6dsl_read_reg>
 8007f68:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10f      	bne.n	8007f90 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	7a3b      	ldrb	r3, [r7, #8]
 8007f7a:	f362 0302 	bfi	r3, r2, #0, #3
 8007f7e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007f80:	f107 0208 	add.w	r2, r7, #8
 8007f84:	2301      	movs	r3, #1
 8007f86:	210a      	movs	r1, #10
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff fd6d 	bl	8007a68 <lsm6dsl_write_reg>
 8007f8e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007f90:	68fb      	ldr	r3, [r7, #12]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7f9 f8fe 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 8007fac:	4a11      	ldr	r2, [pc, #68]	; (8007ff4 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	f04f 0400 	mov.w	r4, #0
 8007fbc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	f04f 0400 	mov.w	r4, #0
 8007fca:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	f04f 0400 	mov.w	r4, #0
 8007fd8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	f04f 0300 	mov.w	r3, #0
 8007fe2:	f04f 0400 	mov.w	r4, #0
 8007fe6:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd90      	pop	{r4, r7, pc}
 8007ff4:	0800e710 	.word	0x0800e710

08007ff8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007ff8:	b490      	push	{r4, r7}
 8007ffa:	b08c      	sub	sp, #48	; 0x30
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800800c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8008010:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	440a      	add	r2, r1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800801e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008022:	f04f 0300 	mov.w	r3, #0
 8008026:	f04f 0400 	mov.w	r4, #0
 800802a:	0a0b      	lsrs	r3, r1, #8
 800802c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008030:	0a14      	lsrs	r4, r2, #8
 8008032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008034:	3201      	adds	r2, #1
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	440a      	add	r2, r1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800803e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	f04f 0400 	mov.w	r4, #0
 800804a:	0c0b      	lsrs	r3, r1, #16
 800804c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008050:	0c14      	lsrs	r4, r2, #16
 8008052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008054:	3202      	adds	r2, #2
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	440a      	add	r2, r1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800805e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	f04f 0400 	mov.w	r4, #0
 800806a:	0e0b      	lsrs	r3, r1, #24
 800806c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008070:	0e14      	lsrs	r4, r2, #24
 8008072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008074:	3203      	adds	r2, #3
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	440a      	add	r2, r1
 800807a:	b2db      	uxtb	r3, r3
 800807c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800807e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008082:	f04f 0300 	mov.w	r3, #0
 8008086:	f04f 0400 	mov.w	r4, #0
 800808a:	0013      	movs	r3, r2
 800808c:	2400      	movs	r4, #0
 800808e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008090:	3204      	adds	r2, #4
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	440a      	add	r2, r1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800809a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	f04f 0400 	mov.w	r4, #0
 80080a6:	0a13      	lsrs	r3, r2, #8
 80080a8:	2400      	movs	r4, #0
 80080aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ac:	3205      	adds	r2, #5
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	440a      	add	r2, r1
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80080b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	f04f 0400 	mov.w	r4, #0
 80080c2:	0c13      	lsrs	r3, r2, #16
 80080c4:	2400      	movs	r4, #0
 80080c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c8:	3206      	adds	r2, #6
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	440a      	add	r2, r1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80080d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	f04f 0400 	mov.w	r4, #0
 80080de:	0e13      	lsrs	r3, r2, #24
 80080e0:	2400      	movs	r4, #0
 80080e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e4:	3207      	adds	r2, #7
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	440a      	add	r2, r1
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	3308      	adds	r3, #8
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80080fa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80080fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	440a      	add	r2, r1
 8008108:	b2db      	uxtb	r3, r3
 800810a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800810c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	f04f 0400 	mov.w	r4, #0
 8008118:	0a0b      	lsrs	r3, r1, #8
 800811a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800811e:	0a14      	lsrs	r4, r2, #8
 8008120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008122:	3201      	adds	r2, #1
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	440a      	add	r2, r1
 8008128:	b2db      	uxtb	r3, r3
 800812a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800812c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	f04f 0400 	mov.w	r4, #0
 8008138:	0c0b      	lsrs	r3, r1, #16
 800813a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800813e:	0c14      	lsrs	r4, r2, #16
 8008140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008142:	3202      	adds	r2, #2
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	440a      	add	r2, r1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800814c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	0e0b      	lsrs	r3, r1, #24
 800815a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800815e:	0e14      	lsrs	r4, r2, #24
 8008160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008162:	3203      	adds	r2, #3
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	440a      	add	r2, r1
 8008168:	b2db      	uxtb	r3, r3
 800816a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800816c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	f04f 0400 	mov.w	r4, #0
 8008178:	0013      	movs	r3, r2
 800817a:	2400      	movs	r4, #0
 800817c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817e:	3204      	adds	r2, #4
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	440a      	add	r2, r1
 8008184:	b2db      	uxtb	r3, r3
 8008186:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8008188:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	f04f 0400 	mov.w	r4, #0
 8008194:	0a13      	lsrs	r3, r2, #8
 8008196:	2400      	movs	r4, #0
 8008198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819a:	3205      	adds	r2, #5
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	440a      	add	r2, r1
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80081a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	f04f 0400 	mov.w	r4, #0
 80081b0:	0c13      	lsrs	r3, r2, #16
 80081b2:	2400      	movs	r4, #0
 80081b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b6:	3206      	adds	r2, #6
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	440a      	add	r2, r1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80081c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	f04f 0400 	mov.w	r4, #0
 80081cc:	0e13      	lsrs	r3, r2, #24
 80081ce:	2400      	movs	r4, #0
 80081d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d2:	3207      	adds	r2, #7
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	440a      	add	r2, r1
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80081dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081de:	3308      	adds	r3, #8
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80081e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80081ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80081f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	440a      	add	r2, r1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80081fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	f04f 0400 	mov.w	r4, #0
 8008206:	0a0b      	lsrs	r3, r1, #8
 8008208:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800820c:	0a14      	lsrs	r4, r2, #8
 800820e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008210:	3201      	adds	r2, #1
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	440a      	add	r2, r1
 8008216:	b2db      	uxtb	r3, r3
 8008218:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800821a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	f04f 0400 	mov.w	r4, #0
 8008226:	0c0b      	lsrs	r3, r1, #16
 8008228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822c:	0c14      	lsrs	r4, r2, #16
 800822e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008230:	3202      	adds	r2, #2
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	440a      	add	r2, r1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800823a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	f04f 0400 	mov.w	r4, #0
 8008246:	0e0b      	lsrs	r3, r1, #24
 8008248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800824c:	0e14      	lsrs	r4, r2, #24
 800824e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008250:	3203      	adds	r2, #3
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	440a      	add	r2, r1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800825a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	f04f 0400 	mov.w	r4, #0
 8008266:	0013      	movs	r3, r2
 8008268:	2400      	movs	r4, #0
 800826a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826c:	3204      	adds	r2, #4
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	440a      	add	r2, r1
 8008272:	b2db      	uxtb	r3, r3
 8008274:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8008276:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	f04f 0400 	mov.w	r4, #0
 8008282:	0a13      	lsrs	r3, r2, #8
 8008284:	2400      	movs	r4, #0
 8008286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008288:	3205      	adds	r2, #5
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	440a      	add	r2, r1
 800828e:	b2db      	uxtb	r3, r3
 8008290:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8008292:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008296:	f04f 0300 	mov.w	r3, #0
 800829a:	f04f 0400 	mov.w	r4, #0
 800829e:	0c13      	lsrs	r3, r2, #16
 80082a0:	2400      	movs	r4, #0
 80082a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a4:	3206      	adds	r2, #6
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	440a      	add	r2, r1
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80082ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	f04f 0400 	mov.w	r4, #0
 80082ba:	0e13      	lsrs	r3, r2, #24
 80082bc:	2400      	movs	r4, #0
 80082be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c0:	3207      	adds	r2, #7
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	440a      	add	r2, r1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	3308      	adds	r3, #8
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80082d6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 80082da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80082de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	440a      	add	r2, r1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80082e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	f04f 0400 	mov.w	r4, #0
 80082f4:	0a0b      	lsrs	r3, r1, #8
 80082f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80082fa:	0a14      	lsrs	r4, r2, #8
 80082fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082fe:	3201      	adds	r2, #1
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	440a      	add	r2, r1
 8008304:	b2db      	uxtb	r3, r3
 8008306:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8008308:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	f04f 0400 	mov.w	r4, #0
 8008314:	0c0b      	lsrs	r3, r1, #16
 8008316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800831a:	0c14      	lsrs	r4, r2, #16
 800831c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831e:	3202      	adds	r2, #2
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	440a      	add	r2, r1
 8008324:	b2db      	uxtb	r3, r3
 8008326:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8008328:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	0e0b      	lsrs	r3, r1, #24
 8008336:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800833a:	0e14      	lsrs	r4, r2, #24
 800833c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800833e:	3203      	adds	r2, #3
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	440a      	add	r2, r1
 8008344:	b2db      	uxtb	r3, r3
 8008346:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8008348:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	f04f 0400 	mov.w	r4, #0
 8008354:	0013      	movs	r3, r2
 8008356:	2400      	movs	r4, #0
 8008358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800835a:	3204      	adds	r2, #4
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	440a      	add	r2, r1
 8008360:	b2db      	uxtb	r3, r3
 8008362:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8008364:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	f04f 0400 	mov.w	r4, #0
 8008370:	0a13      	lsrs	r3, r2, #8
 8008372:	2400      	movs	r4, #0
 8008374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008376:	3205      	adds	r2, #5
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	440a      	add	r2, r1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8008380:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008384:	f04f 0300 	mov.w	r3, #0
 8008388:	f04f 0400 	mov.w	r4, #0
 800838c:	0c13      	lsrs	r3, r2, #16
 800838e:	2400      	movs	r4, #0
 8008390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008392:	3206      	adds	r2, #6
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	440a      	add	r2, r1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 800839c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	f04f 0400 	mov.w	r4, #0
 80083a8:	0e13      	lsrs	r3, r2, #24
 80083aa:	2400      	movs	r4, #0
 80083ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ae:	3207      	adds	r2, #7
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	440a      	add	r2, r1
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	3308      	adds	r3, #8
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80083c0:	4618      	mov	r0, r3
 80083c2:	3730      	adds	r7, #48	; 0x30
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc90      	pop	{r4, r7}
 80083c8:	4770      	bx	lr

080083ca <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80083ca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083ce:	b092      	sub	sp, #72	; 0x48
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	61f8      	str	r0, [r7, #28]
 80083d4:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	f04f 0400 	mov.w	r4, #0
 80083e2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80083e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80083ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ec:	69b8      	ldr	r0, [r7, #24]
 80083ee:	4403      	add	r3, r0
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b2dd      	uxtb	r5, r3
 80083f4:	f04f 0600 	mov.w	r6, #0
 80083f8:	ea45 0301 	orr.w	r3, r5, r1
 80083fc:	ea46 0402 	orr.w	r4, r6, r2
 8008400:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008404:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8008408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840a:	3301      	adds	r3, #1
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	b2d9      	uxtb	r1, r3
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	f04f 0400 	mov.w	r4, #0
 8008420:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008424:	0213      	lsls	r3, r2, #8
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	020b      	lsls	r3, r1, #8
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008438:	ea43 0305 	orr.w	r3, r3, r5
 800843c:	ea44 0406 	orr.w	r4, r4, r6
 8008440:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008444:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8008448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800844a:	3302      	adds	r3, #2
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	4413      	add	r3, r2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b2d9      	uxtb	r1, r3
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	f04f 0400 	mov.w	r4, #0
 8008460:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008464:	0413      	lsls	r3, r2, #16
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	040b      	lsls	r3, r1, #16
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008478:	ea43 0305 	orr.w	r3, r3, r5
 800847c:	ea44 0406 	orr.w	r4, r4, r6
 8008480:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008484:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848a:	3303      	adds	r3, #3
 800848c:	69b8      	ldr	r0, [r7, #24]
 800848e:	4403      	add	r3, r0
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	f04f 0400 	mov.w	r4, #0
 8008498:	0a18      	lsrs	r0, r3, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	60bb      	str	r3, [r7, #8]
 80084a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80084a4:	ea43 0301 	orr.w	r3, r3, r1
 80084a8:	ea44 0402 	orr.w	r4, r4, r2
 80084ac:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80084b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80084b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b6:	3304      	adds	r3, #4
 80084b8:	69b8      	ldr	r0, [r7, #24]
 80084ba:	4403      	add	r3, r0
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	b2dd      	uxtb	r5, r3
 80084c0:	f04f 0600 	mov.w	r6, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	f04f 0400 	mov.w	r4, #0
 80084cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80084d0:	002b      	movs	r3, r5
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80084dc:	ea43 0301 	orr.w	r3, r3, r1
 80084e0:	ea44 0402 	orr.w	r4, r4, r2
 80084e4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80084e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80084ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ee:	3305      	adds	r3, #5
 80084f0:	69b8      	ldr	r0, [r7, #24]
 80084f2:	4403      	add	r3, r0
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b2dd      	uxtb	r5, r3
 80084f8:	f04f 0600 	mov.w	r6, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	f04f 0400 	mov.w	r4, #0
 8008504:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008508:	022b      	lsls	r3, r5, #8
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008514:	ea43 0301 	orr.w	r3, r3, r1
 8008518:	ea44 0402 	orr.w	r4, r4, r2
 800851c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008520:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008526:	3306      	adds	r3, #6
 8008528:	69b8      	ldr	r0, [r7, #24]
 800852a:	4403      	add	r3, r0
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b2dd      	uxtb	r5, r3
 8008530:	f04f 0600 	mov.w	r6, #0
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	f04f 0400 	mov.w	r4, #0
 800853c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008540:	042b      	lsls	r3, r5, #16
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800854c:	ea43 0301 	orr.w	r3, r3, r1
 8008550:	ea44 0402 	orr.w	r4, r4, r2
 8008554:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8008558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800855c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855e:	3307      	adds	r3, #7
 8008560:	69b8      	ldr	r0, [r7, #24]
 8008562:	4403      	add	r3, r0
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	b2dd      	uxtb	r5, r3
 8008568:	f04f 0600 	mov.w	r6, #0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	f04f 0400 	mov.w	r4, #0
 8008574:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008578:	062b      	lsls	r3, r5, #24
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008584:	ea43 0301 	orr.w	r3, r3, r1
 8008588:	ea44 0402 	orr.w	r4, r4, r2
 800858c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8008590:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 800859a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859c:	3308      	adds	r3, #8
 800859e:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80085a0:	f04f 0300 	mov.w	r3, #0
 80085a4:	f04f 0400 	mov.w	r4, #0
 80085a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80085ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80085b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b2:	69b8      	ldr	r0, [r7, #24]
 80085b4:	4403      	add	r3, r0
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	b2dd      	uxtb	r5, r3
 80085ba:	f04f 0600 	mov.w	r6, #0
 80085be:	ea45 0301 	orr.w	r3, r5, r1
 80085c2:	ea46 0402 	orr.w	r4, r6, r2
 80085c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80085ca:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80085ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d0:	3301      	adds	r3, #1
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	4413      	add	r3, r2
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	b2d9      	uxtb	r1, r3
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	f04f 0400 	mov.w	r4, #0
 80085e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80085ea:	0213      	lsls	r3, r2, #8
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	020b      	lsls	r3, r1, #8
 80085f8:	613b      	str	r3, [r7, #16]
 80085fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80085fe:	ea43 0305 	orr.w	r3, r3, r5
 8008602:	ea44 0406 	orr.w	r4, r4, r6
 8008606:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800860a:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	3302      	adds	r3, #2
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	4413      	add	r3, r2
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	b2d9      	uxtb	r1, r3
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	f04f 0400 	mov.w	r4, #0
 8008626:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800862a:	0413      	lsls	r3, r2, #16
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	040b      	lsls	r3, r1, #16
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800863e:	ea43 0305 	orr.w	r3, r3, r5
 8008642:	ea44 0406 	orr.w	r4, r4, r6
 8008646:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800864a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800864e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008650:	3303      	adds	r3, #3
 8008652:	69b8      	ldr	r0, [r7, #24]
 8008654:	4403      	add	r3, r0
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	f04f 0400 	mov.w	r4, #0
 800865e:	0a18      	lsrs	r0, r3, #8
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	061b      	lsls	r3, r3, #24
 8008664:	603b      	str	r3, [r7, #0]
 8008666:	e9d7 3400 	ldrd	r3, r4, [r7]
 800866a:	ea43 0301 	orr.w	r3, r3, r1
 800866e:	ea44 0402 	orr.w	r4, r4, r2
 8008672:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8008676:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800867a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867c:	3304      	adds	r3, #4
 800867e:	69b8      	ldr	r0, [r7, #24]
 8008680:	4403      	add	r3, r0
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b2dd      	uxtb	r5, r3
 8008686:	f04f 0600 	mov.w	r6, #0
 800868a:	f04f 0300 	mov.w	r3, #0
 800868e:	f04f 0400 	mov.w	r4, #0
 8008692:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008696:	002b      	movs	r3, r5
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	2300      	movs	r3, #0
 800869c:	613b      	str	r3, [r7, #16]
 800869e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80086a2:	ea43 0301 	orr.w	r3, r3, r1
 80086a6:	ea44 0402 	orr.w	r4, r4, r2
 80086aa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80086ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80086b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b4:	3305      	adds	r3, #5
 80086b6:	69b8      	ldr	r0, [r7, #24]
 80086b8:	4403      	add	r3, r0
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b2dd      	uxtb	r5, r3
 80086be:	f04f 0600 	mov.w	r6, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	f04f 0400 	mov.w	r4, #0
 80086ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80086ce:	022b      	lsls	r3, r5, #8
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80086da:	ea43 0301 	orr.w	r3, r3, r1
 80086de:	ea44 0402 	orr.w	r4, r4, r2
 80086e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80086e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80086ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ec:	3306      	adds	r3, #6
 80086ee:	69b8      	ldr	r0, [r7, #24]
 80086f0:	4403      	add	r3, r0
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2dd      	uxtb	r5, r3
 80086f6:	f04f 0600 	mov.w	r6, #0
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	f04f 0400 	mov.w	r4, #0
 8008702:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008706:	042b      	lsls	r3, r5, #16
 8008708:	617b      	str	r3, [r7, #20]
 800870a:	2300      	movs	r3, #0
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008712:	ea43 0301 	orr.w	r3, r3, r1
 8008716:	ea44 0402 	orr.w	r4, r4, r2
 800871a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800871e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008724:	3307      	adds	r3, #7
 8008726:	69b8      	ldr	r0, [r7, #24]
 8008728:	4403      	add	r3, r0
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	b2dd      	uxtb	r5, r3
 800872e:	f04f 0600 	mov.w	r6, #0
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	f04f 0400 	mov.w	r4, #0
 800873a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800873e:	062b      	lsls	r3, r5, #24
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800874a:	ea43 0301 	orr.w	r3, r3, r1
 800874e:	ea44 0402 	orr.w	r4, r4, r2
 8008752:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 8008756:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8008760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008762:	3308      	adds	r3, #8
 8008764:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8008766:	f04f 0300 	mov.w	r3, #0
 800876a:	f04f 0400 	mov.w	r4, #0
 800876e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008772:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008778:	69b8      	ldr	r0, [r7, #24]
 800877a:	4403      	add	r3, r0
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b2dd      	uxtb	r5, r3
 8008780:	f04f 0600 	mov.w	r6, #0
 8008784:	ea45 0301 	orr.w	r3, r5, r1
 8008788:	ea46 0402 	orr.w	r4, r6, r2
 800878c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008790:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8008794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008796:	3301      	adds	r3, #1
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4413      	add	r3, r2
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b2d9      	uxtb	r1, r3
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	f04f 0400 	mov.w	r4, #0
 80087ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80087b0:	0213      	lsls	r3, r2, #8
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	020b      	lsls	r3, r1, #8
 80087be:	613b      	str	r3, [r7, #16]
 80087c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80087c4:	ea43 0305 	orr.w	r3, r3, r5
 80087c8:	ea44 0406 	orr.w	r4, r4, r6
 80087cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80087d0:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80087d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d6:	3302      	adds	r3, #2
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	4413      	add	r3, r2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b2d9      	uxtb	r1, r3
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	f04f 0400 	mov.w	r4, #0
 80087ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80087f0:	0413      	lsls	r3, r2, #16
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	040b      	lsls	r3, r1, #16
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008804:	ea43 0305 	orr.w	r3, r3, r5
 8008808:	ea44 0406 	orr.w	r4, r4, r6
 800880c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008810:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008816:	3303      	adds	r3, #3
 8008818:	69b8      	ldr	r0, [r7, #24]
 800881a:	4403      	add	r3, r0
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f04f 0400 	mov.w	r4, #0
 8008824:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8008828:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 800882c:	ea41 030a 	orr.w	r3, r1, sl
 8008830:	ea42 040b 	orr.w	r4, r2, fp
 8008834:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8008838:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883e:	3304      	adds	r3, #4
 8008840:	69b8      	ldr	r0, [r7, #24]
 8008842:	4403      	add	r3, r0
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b2dd      	uxtb	r5, r3
 8008848:	f04f 0600 	mov.w	r6, #0
 800884c:	f04f 0a00 	mov.w	sl, #0
 8008850:	f04f 0b00 	mov.w	fp, #0
 8008854:	46ab      	mov	fp, r5
 8008856:	f04f 0a00 	mov.w	sl, #0
 800885a:	ea4a 0301 	orr.w	r3, sl, r1
 800885e:	ea4b 0402 	orr.w	r4, fp, r2
 8008862:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8008866:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800886a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886c:	3305      	adds	r3, #5
 800886e:	69b8      	ldr	r0, [r7, #24]
 8008870:	4403      	add	r3, r0
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	b2dd      	uxtb	r5, r3
 8008876:	f04f 0600 	mov.w	r6, #0
 800887a:	f04f 0a00 	mov.w	sl, #0
 800887e:	f04f 0b00 	mov.w	fp, #0
 8008882:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 8008886:	f04f 0a00 	mov.w	sl, #0
 800888a:	ea4a 0301 	orr.w	r3, sl, r1
 800888e:	ea4b 0402 	orr.w	r4, fp, r2
 8008892:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008896:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800889a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800889c:	3306      	adds	r3, #6
 800889e:	69b8      	ldr	r0, [r7, #24]
 80088a0:	4403      	add	r3, r0
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b2dd      	uxtb	r5, r3
 80088a6:	f04f 0600 	mov.w	r6, #0
 80088aa:	f04f 0a00 	mov.w	sl, #0
 80088ae:	f04f 0b00 	mov.w	fp, #0
 80088b2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80088b6:	f04f 0a00 	mov.w	sl, #0
 80088ba:	ea4a 0301 	orr.w	r3, sl, r1
 80088be:	ea4b 0402 	orr.w	r4, fp, r2
 80088c2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80088c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80088ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088cc:	3307      	adds	r3, #7
 80088ce:	69b8      	ldr	r0, [r7, #24]
 80088d0:	4403      	add	r3, r0
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	b2dd      	uxtb	r5, r3
 80088d6:	f04f 0600 	mov.w	r6, #0
 80088da:	f04f 0a00 	mov.w	sl, #0
 80088de:	f04f 0b00 	mov.w	fp, #0
 80088e2:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 80088e6:	f04f 0a00 	mov.w	sl, #0
 80088ea:	ea4a 0301 	orr.w	r3, sl, r1
 80088ee:	ea4b 0402 	orr.w	r4, fp, r2
 80088f2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 80088f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8008900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008902:	3308      	adds	r3, #8
 8008904:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8008906:	f04f 0300 	mov.w	r3, #0
 800890a:	f04f 0400 	mov.w	r4, #0
 800890e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008912:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	69b8      	ldr	r0, [r7, #24]
 800891a:	4403      	add	r3, r0
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	b2dd      	uxtb	r5, r3
 8008920:	f04f 0600 	mov.w	r6, #0
 8008924:	ea45 0301 	orr.w	r3, r5, r1
 8008928:	ea46 0402 	orr.w	r4, r6, r2
 800892c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008930:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8008934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008936:	3301      	adds	r3, #1
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	4413      	add	r3, r2
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b2d9      	uxtb	r1, r3
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0a00 	mov.w	sl, #0
 8008948:	f04f 0b00 	mov.w	fp, #0
 800894c:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8008950:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8008954:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8008958:	ea4a 0305 	orr.w	r3, sl, r5
 800895c:	ea4b 0406 	orr.w	r4, fp, r6
 8008960:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008964:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8008968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896a:	3302      	adds	r3, #2
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	4413      	add	r3, r2
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b2d9      	uxtb	r1, r3
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0a00 	mov.w	sl, #0
 800897c:	f04f 0b00 	mov.w	fp, #0
 8008980:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8008984:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8008988:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 800898c:	ea4a 0305 	orr.w	r3, sl, r5
 8008990:	ea4b 0406 	orr.w	r4, fp, r6
 8008994:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008998:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899e:	3303      	adds	r3, #3
 80089a0:	69b8      	ldr	r0, [r7, #24]
 80089a2:	4403      	add	r3, r0
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f04f 0400 	mov.w	r4, #0
 80089ac:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80089b0:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80089b4:	ea41 0308 	orr.w	r3, r1, r8
 80089b8:	ea42 0409 	orr.w	r4, r2, r9
 80089bc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80089c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c6:	3304      	adds	r3, #4
 80089c8:	69b8      	ldr	r0, [r7, #24]
 80089ca:	4403      	add	r3, r0
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b2dd      	uxtb	r5, r3
 80089d0:	f04f 0600 	mov.w	r6, #0
 80089d4:	f04f 0800 	mov.w	r8, #0
 80089d8:	f04f 0900 	mov.w	r9, #0
 80089dc:	46a9      	mov	r9, r5
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	ea48 0301 	orr.w	r3, r8, r1
 80089e6:	ea49 0402 	orr.w	r4, r9, r2
 80089ea:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80089ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f4:	3305      	adds	r3, #5
 80089f6:	69b8      	ldr	r0, [r7, #24]
 80089f8:	4403      	add	r3, r0
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b2dd      	uxtb	r5, r3
 80089fe:	f04f 0600 	mov.w	r6, #0
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	f04f 0900 	mov.w	r9, #0
 8008a0a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	ea48 0301 	orr.w	r3, r8, r1
 8008a16:	ea49 0402 	orr.w	r4, r9, r2
 8008a1a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008a1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a24:	3306      	adds	r3, #6
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	4403      	add	r3, r0
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b2dd      	uxtb	r5, r3
 8008a2e:	f04f 0600 	mov.w	r6, #0
 8008a32:	f04f 0800 	mov.w	r8, #0
 8008a36:	f04f 0900 	mov.w	r9, #0
 8008a3a:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	ea48 0301 	orr.w	r3, r8, r1
 8008a46:	ea49 0402 	orr.w	r4, r9, r2
 8008a4a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8008a4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a54:	3307      	adds	r3, #7
 8008a56:	69b8      	ldr	r0, [r7, #24]
 8008a58:	4403      	add	r3, r0
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	b2dd      	uxtb	r5, r3
 8008a5e:	f04f 0600 	mov.w	r6, #0
 8008a62:	f04f 0800 	mov.w	r8, #0
 8008a66:	f04f 0900 	mov.w	r9, #0
 8008a6a:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	ea48 0301 	orr.w	r3, r8, r1
 8008a76:	ea49 0402 	orr.w	r4, r9, r2
 8008a7a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 8008a7e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 8008a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8008a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8008a90:	4618      	mov	r0, r3
 8008a92:	3748      	adds	r7, #72	; 0x48
 8008a94:	46bd      	mov	sp, r7
 8008a96:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a9a:	4770      	bx	lr

08008a9c <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	0800e524 	.word	0x0800e524

08008ab8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	0800e540 	.word	0x0800e540

08008ad4 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f8 fb62 	bl	80011a8 <_ZN3ros3MsgC1Ev>
 8008ae4:	4a24      	ldr	r2, [pc, #144]	; (8008b78 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fa feda 	bl	80038a8 <_ZN8std_msgs6HeaderC1Ev>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3318      	adds	r3, #24
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fa4f 	bl	8007f9c <_ZN13geometry_msgs10QuaternionC1Ev>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008b04:	2308      	movs	r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db08      	blt.n	8008b1c <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8008b0a:	f04f 0000 	mov.w	r0, #0
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	e9c2 0100 	strd	r0, r1, [r2]
 8008b16:	3208      	adds	r2, #8
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	e7f4      	b.n	8008b06 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3388      	adds	r3, #136	; 0x88
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fafd 	bl	8006120 <_ZN13geometry_msgs7Vector3C1Ev>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	db08      	blt.n	8008b44 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8008b32:	f04f 0000 	mov.w	r0, #0
 8008b36:	f04f 0100 	mov.w	r1, #0
 8008b3a:	e9c2 0100 	strd	r0, r1, [r2]
 8008b3e:	3208      	adds	r2, #8
 8008b40:	3b01      	subs	r3, #1
 8008b42:	e7f4      	b.n	8008b2e <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	33f0      	adds	r3, #240	; 0xf0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fd fae9 	bl	8006120 <_ZN13geometry_msgs7Vector3C1Ev>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8008b54:	2308      	movs	r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	db08      	blt.n	8008b6c <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8008b5a:	f04f 0000 	mov.w	r0, #0
 8008b5e:	f04f 0100 	mov.w	r1, #0
 8008b62:	e9c2 0100 	strd	r0, r1, [r2]
 8008b66:	3208      	adds	r2, #8
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	e7f4      	b.n	8008b56 <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	0800e6f8 	.word	0x0800e6f8

08008b7c <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008b7c:	b590      	push	{r4, r7, lr}
 8008b7e:	b08d      	sub	sp, #52	; 0x34
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	1d18      	adds	r0, r3, #4
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	4413      	add	r3, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	f7fa fea7 	bl	80038e8 <_ZNK8std_msgs6Header9serializeEPh>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	4413      	add	r3, r2
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f103 0018 	add.w	r0, r3, #24
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4413      	add	r3, r2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f7ff fa22 	bl	8007ff8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	4413      	add	r3, r2
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d87e      	bhi.n	8008cc4 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	3308      	adds	r3, #8
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4413      	add	r3, r2
 8008bd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bd4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8008bd8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	440a      	add	r2, r1
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8008be6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008bea:	f04f 0300 	mov.w	r3, #0
 8008bee:	f04f 0400 	mov.w	r4, #0
 8008bf2:	0a0b      	lsrs	r3, r1, #8
 8008bf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008bf8:	0a14      	lsrs	r4, r2, #8
 8008bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	440a      	add	r2, r1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8008c06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	f04f 0400 	mov.w	r4, #0
 8008c12:	0c0b      	lsrs	r3, r1, #16
 8008c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c18:	0c14      	lsrs	r4, r2, #16
 8008c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c1c:	3202      	adds	r2, #2
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	440a      	add	r2, r1
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8008c26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	f04f 0400 	mov.w	r4, #0
 8008c32:	0e0b      	lsrs	r3, r1, #24
 8008c34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c38:	0e14      	lsrs	r4, r2, #24
 8008c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3c:	3203      	adds	r2, #3
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	440a      	add	r2, r1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8008c46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	f04f 0400 	mov.w	r4, #0
 8008c52:	0013      	movs	r3, r2
 8008c54:	2400      	movs	r4, #0
 8008c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c58:	3204      	adds	r2, #4
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8008c62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c66:	f04f 0300 	mov.w	r3, #0
 8008c6a:	f04f 0400 	mov.w	r4, #0
 8008c6e:	0a13      	lsrs	r3, r2, #8
 8008c70:	2400      	movs	r4, #0
 8008c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c74:	3205      	adds	r2, #5
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	440a      	add	r2, r1
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8008c7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	f04f 0400 	mov.w	r4, #0
 8008c8a:	0c13      	lsrs	r3, r2, #16
 8008c8c:	2400      	movs	r4, #0
 8008c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c90:	3206      	adds	r2, #6
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	440a      	add	r2, r1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8008c9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	f04f 0400 	mov.w	r4, #0
 8008ca6:	0e13      	lsrs	r3, r2, #24
 8008ca8:	2400      	movs	r4, #0
 8008caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cac:	3207      	adds	r2, #7
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	440a      	add	r2, r1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	3308      	adds	r3, #8
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cc2:	e77d      	b.n	8008bc0 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	4413      	add	r3, r2
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f7fd fa4d 	bl	8006170 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	4413      	add	r3, r2
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8008cde:	2300      	movs	r3, #0
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d87e      	bhi.n	8008de6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	3315      	adds	r3, #21
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cf6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8008cfa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	440a      	add	r2, r1
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8008d08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	f04f 0400 	mov.w	r4, #0
 8008d14:	0a0b      	lsrs	r3, r1, #8
 8008d16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d1a:	0a14      	lsrs	r4, r2, #8
 8008d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d1e:	3201      	adds	r2, #1
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	440a      	add	r2, r1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8008d28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	f04f 0400 	mov.w	r4, #0
 8008d34:	0c0b      	lsrs	r3, r1, #16
 8008d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d3a:	0c14      	lsrs	r4, r2, #16
 8008d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3e:	3202      	adds	r2, #2
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	440a      	add	r2, r1
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8008d48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d4c:	f04f 0300 	mov.w	r3, #0
 8008d50:	f04f 0400 	mov.w	r4, #0
 8008d54:	0e0b      	lsrs	r3, r1, #24
 8008d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d5a:	0e14      	lsrs	r4, r2, #24
 8008d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5e:	3203      	adds	r2, #3
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	440a      	add	r2, r1
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8008d68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	f04f 0400 	mov.w	r4, #0
 8008d74:	0013      	movs	r3, r2
 8008d76:	2400      	movs	r4, #0
 8008d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d7a:	3204      	adds	r2, #4
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	440a      	add	r2, r1
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8008d84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d88:	f04f 0300 	mov.w	r3, #0
 8008d8c:	f04f 0400 	mov.w	r4, #0
 8008d90:	0a13      	lsrs	r3, r2, #8
 8008d92:	2400      	movs	r4, #0
 8008d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d96:	3205      	adds	r2, #5
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8008da0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	f04f 0400 	mov.w	r4, #0
 8008dac:	0c13      	lsrs	r3, r2, #16
 8008dae:	2400      	movs	r4, #0
 8008db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008db2:	3206      	adds	r2, #6
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	440a      	add	r2, r1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8008dbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	f04f 0400 	mov.w	r4, #0
 8008dc8:	0e13      	lsrs	r3, r2, #24
 8008dca:	2400      	movs	r4, #0
 8008dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dce:	3207      	adds	r2, #7
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	3308      	adds	r3, #8
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	3301      	adds	r3, #1
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
 8008de4:	e77d      	b.n	8008ce2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4413      	add	r3, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	f7fd f9bc 	bl	8006170 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	4413      	add	r3, r2
 8008dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8008e00:	2300      	movs	r3, #0
 8008e02:	623b      	str	r3, [r7, #32]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d87e      	bhi.n	8008f08 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	3322      	adds	r3, #34	; 0x22
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	4413      	add	r3, r2
 8008e14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e18:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8008e1c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	440a      	add	r2, r1
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8008e2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	f04f 0400 	mov.w	r4, #0
 8008e36:	0a0b      	lsrs	r3, r1, #8
 8008e38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e3c:	0a14      	lsrs	r4, r2, #8
 8008e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e40:	3201      	adds	r2, #1
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	440a      	add	r2, r1
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8008e4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	f04f 0400 	mov.w	r4, #0
 8008e56:	0c0b      	lsrs	r3, r1, #16
 8008e58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5c:	0c14      	lsrs	r4, r2, #16
 8008e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e60:	3202      	adds	r2, #2
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	440a      	add	r2, r1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8008e6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	f04f 0400 	mov.w	r4, #0
 8008e76:	0e0b      	lsrs	r3, r1, #24
 8008e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e7c:	0e14      	lsrs	r4, r2, #24
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	3203      	adds	r2, #3
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	440a      	add	r2, r1
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8008e8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	f04f 0400 	mov.w	r4, #0
 8008e96:	0013      	movs	r3, r2
 8008e98:	2400      	movs	r4, #0
 8008e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e9c:	3204      	adds	r2, #4
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8008ea6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	f04f 0400 	mov.w	r4, #0
 8008eb2:	0a13      	lsrs	r3, r2, #8
 8008eb4:	2400      	movs	r4, #0
 8008eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb8:	3205      	adds	r2, #5
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8008ec2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ec6:	f04f 0300 	mov.w	r3, #0
 8008eca:	f04f 0400 	mov.w	r4, #0
 8008ece:	0c13      	lsrs	r3, r2, #16
 8008ed0:	2400      	movs	r4, #0
 8008ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ed4:	3206      	adds	r2, #6
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	440a      	add	r2, r1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8008ede:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	f04f 0400 	mov.w	r4, #0
 8008eea:	0e13      	lsrs	r3, r2, #24
 8008eec:	2400      	movs	r4, #0
 8008eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef0:	3207      	adds	r2, #7
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	3308      	adds	r3, #8
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	3301      	adds	r3, #1
 8008f04:	623b      	str	r3, [r7, #32]
 8008f06:	e77d      	b.n	8008e04 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3734      	adds	r7, #52	; 0x34
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}

08008f12 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f16:	b091      	sub	sp, #68	; 0x44
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6178      	str	r0, [r7, #20]
 8008f1c:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->header.deserialize(inbuffer + offset);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	1d18      	adds	r0, r3, #4
 8008f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f7fa fd73 	bl	8003a18 <_ZN8std_msgs6Header11deserializeEPh>
 8008f32:	4602      	mov	r2, r0
 8008f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f36:	4413      	add	r3, r2
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->orientation.deserialize(inbuffer + offset);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f103 0018 	add.w	r0, r3, #24
 8008f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4413      	add	r3, r2
 8008f46:	4619      	mov	r1, r3
 8008f48:	f7ff fa3f 	bl	80083ca <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	4413      	add	r3, r2
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8008f54:	2300      	movs	r3, #0
 8008f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	f200 80dd 	bhi.w	800911a <_ZN11sensor_msgs3Imu11deserializeEPh+0x208>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8008f60:	f04f 0300 	mov.w	r3, #0
 8008f64:	f04f 0400 	mov.w	r4, #0
 8008f68:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008f6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f72:	6938      	ldr	r0, [r7, #16]
 8008f74:	4403      	add	r3, r0
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b2dd      	uxtb	r5, r3
 8008f7a:	f04f 0600 	mov.w	r6, #0
 8008f7e:	ea45 0301 	orr.w	r3, r5, r1
 8008f82:	ea46 0402 	orr.w	r4, r6, r2
 8008f86:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008f8a:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f90:	3301      	adds	r3, #1
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	b2d9      	uxtb	r1, r3
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	f04f 0300 	mov.w	r3, #0
 8008fa2:	f04f 0400 	mov.w	r4, #0
 8008fa6:	0214      	lsls	r4, r2, #8
 8008fa8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008fac:	020b      	lsls	r3, r1, #8
 8008fae:	ea45 0503 	orr.w	r5, r5, r3
 8008fb2:	ea46 0604 	orr.w	r6, r6, r4
 8008fb6:	462b      	mov	r3, r5
 8008fb8:	4634      	mov	r4, r6
 8008fba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008fbe:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4413      	add	r3, r2
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	b2d9      	uxtb	r1, r3
 8008fce:	f04f 0200 	mov.w	r2, #0
 8008fd2:	f04f 0300 	mov.w	r3, #0
 8008fd6:	f04f 0400 	mov.w	r4, #0
 8008fda:	0414      	lsls	r4, r2, #16
 8008fdc:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8008fe0:	040b      	lsls	r3, r1, #16
 8008fe2:	ea45 0503 	orr.w	r5, r5, r3
 8008fe6:	ea46 0604 	orr.w	r6, r6, r4
 8008fea:	462b      	mov	r3, r5
 8008fec:	4634      	mov	r4, r6
 8008fee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008ff2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff8:	3303      	adds	r3, #3
 8008ffa:	6938      	ldr	r0, [r7, #16]
 8008ffc:	4403      	add	r3, r0
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	f04f 0400 	mov.w	r4, #0
 8009006:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 800900a:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 800900e:	ea41 030a 	orr.w	r3, r1, sl
 8009012:	ea42 040b 	orr.w	r4, r2, fp
 8009016:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800901a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	3304      	adds	r3, #4
 8009022:	6938      	ldr	r0, [r7, #16]
 8009024:	4403      	add	r3, r0
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	461c      	mov	r4, r3
 800902a:	b2e4      	uxtb	r4, r4
 800902c:	f04f 0500 	mov.w	r5, #0
 8009030:	f04f 0800 	mov.w	r8, #0
 8009034:	f04f 0900 	mov.w	r9, #0
 8009038:	4623      	mov	r3, r4
 800903a:	001b      	movs	r3, r3
 800903c:	4699      	mov	r9, r3
 800903e:	2300      	movs	r3, #0
 8009040:	4698      	mov	r8, r3
 8009042:	4643      	mov	r3, r8
 8009044:	464c      	mov	r4, r9
 8009046:	ea43 0301 	orr.w	r3, r3, r1
 800904a:	ea44 0402 	orr.w	r4, r4, r2
 800904e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8009052:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009058:	3305      	adds	r3, #5
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	4403      	add	r3, r0
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	461c      	mov	r4, r3
 8009062:	b2e4      	uxtb	r4, r4
 8009064:	f04f 0500 	mov.w	r5, #0
 8009068:	f04f 0800 	mov.w	r8, #0
 800906c:	f04f 0900 	mov.w	r9, #0
 8009070:	4623      	mov	r3, r4
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	4699      	mov	r9, r3
 8009076:	2300      	movs	r3, #0
 8009078:	4698      	mov	r8, r3
 800907a:	4643      	mov	r3, r8
 800907c:	464c      	mov	r4, r9
 800907e:	ea43 0301 	orr.w	r3, r3, r1
 8009082:	ea44 0402 	orr.w	r4, r4, r2
 8009086:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800908a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800908e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009090:	3306      	adds	r3, #6
 8009092:	6938      	ldr	r0, [r7, #16]
 8009094:	4403      	add	r3, r0
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	461c      	mov	r4, r3
 800909a:	b2e4      	uxtb	r4, r4
 800909c:	f04f 0500 	mov.w	r5, #0
 80090a0:	f04f 0800 	mov.w	r8, #0
 80090a4:	f04f 0900 	mov.w	r9, #0
 80090a8:	4623      	mov	r3, r4
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	4699      	mov	r9, r3
 80090ae:	2300      	movs	r3, #0
 80090b0:	4698      	mov	r8, r3
 80090b2:	4643      	mov	r3, r8
 80090b4:	464c      	mov	r4, r9
 80090b6:	ea43 0301 	orr.w	r3, r3, r1
 80090ba:	ea44 0402 	orr.w	r4, r4, r2
 80090be:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80090c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80090c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c8:	3307      	adds	r3, #7
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	4403      	add	r3, r0
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	461c      	mov	r4, r3
 80090d2:	b2e4      	uxtb	r4, r4
 80090d4:	f04f 0500 	mov.w	r5, #0
 80090d8:	f04f 0800 	mov.w	r8, #0
 80090dc:	f04f 0900 	mov.w	r9, #0
 80090e0:	4623      	mov	r3, r4
 80090e2:	061b      	lsls	r3, r3, #24
 80090e4:	4699      	mov	r9, r3
 80090e6:	2300      	movs	r3, #0
 80090e8:	4698      	mov	r8, r3
 80090ea:	4643      	mov	r3, r8
 80090ec:	464c      	mov	r4, r9
 80090ee:	ea43 0301 	orr.w	r3, r3, r1
 80090f2:	ea44 0402 	orr.w	r4, r4, r2
 80090f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 80090fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80090fe:	6979      	ldr	r1, [r7, #20]
 8009100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009102:	3208      	adds	r2, #8
 8009104:	00d2      	lsls	r2, r2, #3
 8009106:	440a      	add	r2, r1
 8009108:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->orientation_covariance[i]);
 800910c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800910e:	3308      	adds	r3, #8
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	3301      	adds	r3, #1
 8009116:	63bb      	str	r3, [r7, #56]	; 0x38
 8009118:	e71e      	b.n	8008f58 <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8009120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4413      	add	r3, r2
 8009126:	4619      	mov	r1, r3
 8009128:	f7fd f994 	bl	8006454 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800912c:	4602      	mov	r2, r0
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	4413      	add	r3, r2
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8009134:	2300      	movs	r3, #0
 8009136:	637b      	str	r3, [r7, #52]	; 0x34
 8009138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913a:	2b08      	cmp	r3, #8
 800913c:	f200 80ca 	bhi.w	80092d4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3c2>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	f04f 0400 	mov.w	r4, #0
 8009148:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800914c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	6938      	ldr	r0, [r7, #16]
 8009154:	4403      	add	r3, r0
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	b2dd      	uxtb	r5, r3
 800915a:	f04f 0600 	mov.w	r6, #0
 800915e:	ea45 0301 	orr.w	r3, r5, r1
 8009162:	ea46 0402 	orr.w	r4, r6, r2
 8009166:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800916a:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800916e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009170:	3301      	adds	r3, #1
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4413      	add	r3, r2
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	b2d9      	uxtb	r1, r3
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	f04f 0500 	mov.w	r5, #0
 8009182:	f04f 0600 	mov.w	r6, #0
 8009186:	0216      	lsls	r6, r2, #8
 8009188:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 800918c:	020d      	lsls	r5, r1, #8
 800918e:	ea45 030a 	orr.w	r3, r5, sl
 8009192:	ea46 040b 	orr.w	r4, r6, fp
 8009196:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800919a:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800919e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a0:	3302      	adds	r3, #2
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4413      	add	r3, r2
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	b2d9      	uxtb	r1, r3
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	f04f 0500 	mov.w	r5, #0
 80091b2:	f04f 0600 	mov.w	r6, #0
 80091b6:	0416      	lsls	r6, r2, #16
 80091b8:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80091bc:	040d      	lsls	r5, r1, #16
 80091be:	ea45 030a 	orr.w	r3, r5, sl
 80091c2:	ea46 040b 	orr.w	r4, r6, fp
 80091c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80091ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80091ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d0:	3303      	adds	r3, #3
 80091d2:	6938      	ldr	r0, [r7, #16]
 80091d4:	4403      	add	r3, r0
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f04f 0400 	mov.w	r4, #0
 80091de:	0a18      	lsrs	r0, r3, #8
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	061b      	lsls	r3, r3, #24
 80091e4:	60bb      	str	r3, [r7, #8]
 80091e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80091ea:	ea43 0301 	orr.w	r3, r3, r1
 80091ee:	ea44 0402 	orr.w	r4, r4, r2
 80091f2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80091f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80091fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fc:	3304      	adds	r3, #4
 80091fe:	6938      	ldr	r0, [r7, #16]
 8009200:	4403      	add	r3, r0
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	fa5f fa83 	uxtb.w	sl, r3
 8009208:	f04f 0b00 	mov.w	fp, #0
 800920c:	f04f 0500 	mov.w	r5, #0
 8009210:	f04f 0600 	mov.w	r6, #0
 8009214:	4656      	mov	r6, sl
 8009216:	2500      	movs	r5, #0
 8009218:	ea45 0301 	orr.w	r3, r5, r1
 800921c:	ea46 0402 	orr.w	r4, r6, r2
 8009220:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8009224:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922a:	3305      	adds	r3, #5
 800922c:	6938      	ldr	r0, [r7, #16]
 800922e:	4403      	add	r3, r0
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	fa5f fa83 	uxtb.w	sl, r3
 8009236:	f04f 0b00 	mov.w	fp, #0
 800923a:	f04f 0500 	mov.w	r5, #0
 800923e:	f04f 0600 	mov.w	r6, #0
 8009242:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8009246:	2500      	movs	r5, #0
 8009248:	ea45 0301 	orr.w	r3, r5, r1
 800924c:	ea46 0402 	orr.w	r4, r6, r2
 8009250:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8009254:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925a:	3306      	adds	r3, #6
 800925c:	6938      	ldr	r0, [r7, #16]
 800925e:	4403      	add	r3, r0
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	fa5f fa83 	uxtb.w	sl, r3
 8009266:	f04f 0b00 	mov.w	fp, #0
 800926a:	f04f 0500 	mov.w	r5, #0
 800926e:	f04f 0600 	mov.w	r6, #0
 8009272:	ea4f 460a 	mov.w	r6, sl, lsl #16
 8009276:	2500      	movs	r5, #0
 8009278:	ea45 0301 	orr.w	r3, r5, r1
 800927c:	ea46 0402 	orr.w	r4, r6, r2
 8009280:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8009284:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928a:	3307      	adds	r3, #7
 800928c:	6938      	ldr	r0, [r7, #16]
 800928e:	4403      	add	r3, r0
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	fa5f fa83 	uxtb.w	sl, r3
 8009296:	f04f 0b00 	mov.w	fp, #0
 800929a:	f04f 0500 	mov.w	r5, #0
 800929e:	f04f 0600 	mov.w	r6, #0
 80092a2:	ea4f 660a 	mov.w	r6, sl, lsl #24
 80092a6:	2500      	movs	r5, #0
 80092a8:	ea45 0301 	orr.w	r3, r5, r1
 80092ac:	ea46 0402 	orr.w	r4, r6, r2
 80092b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 80092b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80092b8:	6979      	ldr	r1, [r7, #20]
 80092ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092bc:	3215      	adds	r2, #21
 80092be:	00d2      	lsls	r2, r2, #3
 80092c0:	440a      	add	r2, r1
 80092c2:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80092c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c8:	3308      	adds	r3, #8
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 80092cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ce:	3301      	adds	r3, #1
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
 80092d2:	e731      	b.n	8009138 <_ZN11sensor_msgs3Imu11deserializeEPh+0x226>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80092da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4413      	add	r3, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	f7fd f8b7 	bl	8006454 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80092e6:	4602      	mov	r2, r0
 80092e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ea:	4413      	add	r3, r2
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 80092ee:	2300      	movs	r3, #0
 80092f0:	633b      	str	r3, [r7, #48]	; 0x30
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	f200 80ca 	bhi.w	800948e <_ZN11sensor_msgs3Imu11deserializeEPh+0x57c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	f04f 0400 	mov.w	r4, #0
 8009302:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009306:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	4403      	add	r3, r0
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	b2dd      	uxtb	r5, r3
 8009314:	f04f 0600 	mov.w	r6, #0
 8009318:	ea45 0301 	orr.w	r3, r5, r1
 800931c:	ea46 0402 	orr.w	r4, r6, r2
 8009320:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009324:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932a:	3301      	adds	r3, #1
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	4413      	add	r3, r2
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b2d9      	uxtb	r1, r3
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	f04f 0500 	mov.w	r5, #0
 800933c:	f04f 0600 	mov.w	r6, #0
 8009340:	0216      	lsls	r6, r2, #8
 8009342:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8009346:	020d      	lsls	r5, r1, #8
 8009348:	ea45 0308 	orr.w	r3, r5, r8
 800934c:	ea46 0409 	orr.w	r4, r6, r9
 8009350:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009354:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935a:	3302      	adds	r3, #2
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4413      	add	r3, r2
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b2d9      	uxtb	r1, r3
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	f04f 0500 	mov.w	r5, #0
 800936c:	f04f 0600 	mov.w	r6, #0
 8009370:	0416      	lsls	r6, r2, #16
 8009372:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 8009376:	040d      	lsls	r5, r1, #16
 8009378:	ea45 0308 	orr.w	r3, r5, r8
 800937c:	ea46 0409 	orr.w	r4, r6, r9
 8009380:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009384:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938a:	3303      	adds	r3, #3
 800938c:	6938      	ldr	r0, [r7, #16]
 800938e:	4403      	add	r3, r0
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f04f 0400 	mov.w	r4, #0
 8009398:	0a18      	lsrs	r0, r3, #8
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	061b      	lsls	r3, r3, #24
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80093a4:	ea43 0301 	orr.w	r3, r3, r1
 80093a8:	ea44 0402 	orr.w	r4, r4, r2
 80093ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80093b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	3304      	adds	r3, #4
 80093b8:	6938      	ldr	r0, [r7, #16]
 80093ba:	4403      	add	r3, r0
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	fa5f f883 	uxtb.w	r8, r3
 80093c2:	f04f 0900 	mov.w	r9, #0
 80093c6:	f04f 0500 	mov.w	r5, #0
 80093ca:	f04f 0600 	mov.w	r6, #0
 80093ce:	4646      	mov	r6, r8
 80093d0:	2500      	movs	r5, #0
 80093d2:	ea45 0301 	orr.w	r3, r5, r1
 80093d6:	ea46 0402 	orr.w	r4, r6, r2
 80093da:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80093de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80093e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e4:	3305      	adds	r3, #5
 80093e6:	6938      	ldr	r0, [r7, #16]
 80093e8:	4403      	add	r3, r0
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	fa5f f883 	uxtb.w	r8, r3
 80093f0:	f04f 0900 	mov.w	r9, #0
 80093f4:	f04f 0500 	mov.w	r5, #0
 80093f8:	f04f 0600 	mov.w	r6, #0
 80093fc:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8009400:	2500      	movs	r5, #0
 8009402:	ea45 0301 	orr.w	r3, r5, r1
 8009406:	ea46 0402 	orr.w	r4, r6, r2
 800940a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800940e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009414:	3306      	adds	r3, #6
 8009416:	6938      	ldr	r0, [r7, #16]
 8009418:	4403      	add	r3, r0
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	fa5f f883 	uxtb.w	r8, r3
 8009420:	f04f 0900 	mov.w	r9, #0
 8009424:	f04f 0500 	mov.w	r5, #0
 8009428:	f04f 0600 	mov.w	r6, #0
 800942c:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8009430:	2500      	movs	r5, #0
 8009432:	ea45 0301 	orr.w	r3, r5, r1
 8009436:	ea46 0402 	orr.w	r4, r6, r2
 800943a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800943e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009444:	3307      	adds	r3, #7
 8009446:	6938      	ldr	r0, [r7, #16]
 8009448:	4403      	add	r3, r0
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	fa5f f883 	uxtb.w	r8, r3
 8009450:	f04f 0900 	mov.w	r9, #0
 8009454:	f04f 0500 	mov.w	r5, #0
 8009458:	f04f 0600 	mov.w	r6, #0
 800945c:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8009460:	2500      	movs	r5, #0
 8009462:	ea45 0301 	orr.w	r3, r5, r1
 8009466:	ea46 0402 	orr.w	r4, r6, r2
 800946a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 800946e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009472:	6979      	ldr	r1, [r7, #20]
 8009474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009476:	3222      	adds	r2, #34	; 0x22
 8009478:	00d2      	lsls	r2, r2, #3
 800947a:	440a      	add	r2, r1
 800947c:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8009480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009482:	3308      	adds	r3, #8
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	3301      	adds	r3, #1
 800948a:	633b      	str	r3, [r7, #48]	; 0x30
 800948c:	e731      	b.n	80092f2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3e0>
      }
     return offset;
 800948e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8009490:	4618      	mov	r0, r3
 8009492:	3744      	adds	r7, #68	; 0x44
 8009494:	46bd      	mov	sp, r7
 8009496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800949c <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	0800e564 	.word	0x0800e564

080094b8 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	0800e574 	.word	0x0800e574

080094d4 <_ZN18LSM6DSL_rosService11getInstanceEv>:

LSM6DSL_rosService * LSM6DSL_rosService::LSM6DSL_Instance = NULL;


LSM6DSL_rosService * LSM6DSL_rosService::getInstance()
{
 80094d4:	b598      	push	{r3, r4, r7, lr}
 80094d6:	af00      	add	r7, sp, #0
	if(!LSM6DSL_Instance)
 80094d8:	4b08      	ldr	r3, [pc, #32]	; (80094fc <_ZN18LSM6DSL_rosService11getInstanceEv+0x28>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d109      	bne.n	80094f4 <_ZN18LSM6DSL_rosService11getInstanceEv+0x20>
	{
		LSM6DSL_Instance = new LSM6DSL_rosService();
 80094e0:	201c      	movs	r0, #28
 80094e2:	f004 fc08 	bl	800dcf6 <_Znwj>
 80094e6:	4603      	mov	r3, r0
 80094e8:	461c      	mov	r4, r3
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 f826 	bl	800953c <_ZN18LSM6DSL_rosServiceC1Ev>
 80094f0:	4b02      	ldr	r3, [pc, #8]	; (80094fc <_ZN18LSM6DSL_rosService11getInstanceEv+0x28>)
 80094f2:	601c      	str	r4, [r3, #0]
	}

	return LSM6DSL_Instance;
 80094f4:	4b01      	ldr	r3, [pc, #4]	; (80094fc <_ZN18LSM6DSL_rosService11getInstanceEv+0x28>)
 80094f6:	681b      	ldr	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	bd98      	pop	{r3, r4, r7, pc}
 80094fc:	200001ac 	.word	0x200001ac

08009500 <_ZN18LSM6DSL_rosServiceC1EPKcPN11sensor_msgs3ImuE>:

LSM6DSL_rosService::LSM6DSL_rosService(const char * LSM6DSL_imu_desc,
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
		sensor_msgs::Imu * LSM6DSL_imu_sensor) :
		LSM6DSL_imu_t_(LSM6DSL_imu_sensor),
		LSM6DSL_imu_publisher_t(LSM6DSL_imu_desc, LSM6DSL_imu_sensor)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	605a      	str	r2, [r3, #4]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f103 0008 	add.w	r0, r3, #8
 800951e:	2300      	movs	r3, #0
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	f7fa f995 	bl	8003852 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
{
	//	TODO Check if node handler has already been initialized
	//	and initialize node if not already done
	serialInstance = serialInstance->getInstance();
 8009528:	f7f8 fda8 	bl	800207c <_ZN9ROSserial11getInstanceEv>
 800952c:	4602      	mov	r2, r0
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <_ZN18LSM6DSL_rosServiceC1Ev>:


// Use delegating constructor.
LSM6DSL_rosService::LSM6DSL_rosService() : LSM6DSL_rosService("LSM6DSL_Imu",
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
		new sensor_msgs::Imu())
 8009544:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8009548:	f004 fbd5 	bl	800dcf6 <_Znwj>
 800954c:	4603      	mov	r3, r0
 800954e:	461c      	mov	r4, r3
 8009550:	4620      	mov	r0, r4
 8009552:	f7ff fabf 	bl	8008ad4 <_ZN11sensor_msgs3ImuC1Ev>
 8009556:	4622      	mov	r2, r4
 8009558:	4904      	ldr	r1, [pc, #16]	; (800956c <_ZN18LSM6DSL_rosServiceC1Ev+0x30>)
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff ffd0 	bl	8009500 <_ZN18LSM6DSL_rosServiceC1EPKcPN11sensor_msgs3ImuE>
{

}
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	bd90      	pop	{r4, r7, pc}
 800956a:	bf00      	nop
 800956c:	0800e598 	.word	0x0800e598

08009570 <_ZN18LSM6DSL_rosService20LSM6DSL_AdvertizeImuEv>:

int32_t LSM6DSL_rosService::LSM6DSL_AdvertizeImu(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
	if(NULL == serialInstance)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <_ZN18LSM6DSL_rosService20LSM6DSL_AdvertizeImuEv+0x14>
	{
		return diagnostic_msgs::DiagnosticStatus::ERROR;
 8009580:	2302      	movs	r3, #2
 8009582:	e011      	b.n	80095a8 <_ZN18LSM6DSL_rosService20LSM6DSL_AdvertizeImuEv+0x38>
	}

	//	TODO : Compete the diagnostic by competing the error msg
	if(!serialInstance->nh.advertise(LSM6DSL_imu_publisher_t))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3308      	adds	r3, #8
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f7fb f9d9 	bl	8004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8009596:	4603      	mov	r3, r0
 8009598:	f083 0301 	eor.w	r3, r3, #1
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <_ZN18LSM6DSL_rosService20LSM6DSL_AdvertizeImuEv+0x36>
	{
		return (int32_t) diagnostic_msgs::DiagnosticStatus::ERROR;
 80095a2:	2302      	movs	r3, #2
 80095a4:	e000      	b.n	80095a8 <_ZN18LSM6DSL_rosService20LSM6DSL_AdvertizeImuEv+0x38>
	}

	return diagnostic_msgs::DiagnosticStatus::OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <_ZN18LSM6DSL_rosService18LSM6DSL_ImuPublishEv>:

int32_t LSM6DSL_rosService::LSM6DSL_ImuPublish(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	return (int32_t) this->LSM6DSL_imu_publisher_t.publish(LSM6DSL_imu_t_);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f103 0208 	add.w	r2, r3, #8
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f7fa f95b 	bl	8003880 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>:
	/*	Sensor data variables & associated publishers/topics */
    sensor_msgs::Imu * LSM6DSL_imu_t_;
    ros::Publisher LSM6DSL_imu_publisher_t;

public:
    sensor_msgs::Imu * LSM6DSL_imu_t()
 80095d4:	b590      	push	{r4, r7, lr}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
    {
    	if(NULL != serialInstance)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv+0x32>
    	{
        	LSM6DSL_imu_t_->header.stamp = serialInstance->nh.now();
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	685c      	ldr	r4, [r3, #4]
 80095ee:	463b      	mov	r3, r7
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fb fac4 	bl	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80095f8:	f104 030c 	add.w	r3, r4, #12
 80095fc:	463a      	mov	r2, r7
 80095fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009602:	e883 0003 	stmia.w	r3, {r0, r1}
    	}

    	return LSM6DSL_imu_t_;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	685b      	ldr	r3, [r3, #4]
    }
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	bd90      	pop	{r4, r7, pc}
	...

08009614 <new_C_LSM6DSL_rosService>:

/**
 * Explicit constructor
 */
uint32_t new_C_LSM6DSL_rosService(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
	if(NULL != (rosLSM6DSLInstance = reinterpret_cast<C_LSM6DSL_rosService_t*>(LSM6DSL_rosService::getInstance())))
 8009618:	f7ff ff5c 	bl	80094d4 <_ZN18LSM6DSL_rosService11getInstanceEv>
 800961c:	4602      	mov	r2, r0
 800961e:	4b08      	ldr	r3, [pc, #32]	; (8009640 <new_C_LSM6DSL_rosService+0x2c>)
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	4b07      	ldr	r3, [pc, #28]	; (8009640 <new_C_LSM6DSL_rosService+0x2c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bf14      	ite	ne
 800962a:	2301      	movne	r3, #1
 800962c:	2300      	moveq	r3, #0
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <new_C_LSM6DSL_rosService+0x24>
	{
		return LSM6DSL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	e001      	b.n	800963c <new_C_LSM6DSL_rosService+0x28>
	}

	return LSM6DSL_ERROR;
 8009638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800963c:	4618      	mov	r0, r3
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200001b0 	.word	0x200001b0

08009644 <del_C_LSM6DSL_rosService>:
/**
 * Explicit destructor
 */
void del_C_LSM6DSL_rosService(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
	delete reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance);
 8009648:	4b05      	ldr	r3, [pc, #20]	; (8009660 <del_C_LSM6DSL_rosService+0x1c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	211c      	movs	r1, #28
 800964e:	4618      	mov	r0, r3
 8009650:	f004 fb4f 	bl	800dcf2 <_ZdlPvj>

	rosLSM6DSLInstance = NULL;
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <del_C_LSM6DSL_rosService+0x1c>)
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
}
 800965a:	bf00      	nop
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	200001b0 	.word	0x200001b0

08009664 <LSM6DSL_RosAdvertize>:
 * @param  C_HTS221_rosService the ROSserial object reference
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RosAdvertize(LSM6DSL_Capabilities_t *Capabilities)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	static bool isAdvertized = false;

	if((!isAdvertized) && (Capabilities->Gyro) && (Capabilities->Acc))
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <LSM6DSL_RosAdvertize+0x40>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	f083 0301 	eor.w	r3, r3, #1
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00f      	beq.n	800969a <LSM6DSL_RosAdvertize+0x36>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <LSM6DSL_RosAdvertize+0x36>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <LSM6DSL_RosAdvertize+0x36>
	{
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_AdvertizeImu();
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <LSM6DSL_RosAdvertize+0x44>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff ff6e 	bl	8009570 <_ZN18LSM6DSL_rosService20LSM6DSL_AdvertizeImuEv>
		isAdvertized = true;
 8009694:	4b03      	ldr	r3, [pc, #12]	; (80096a4 <LSM6DSL_RosAdvertize+0x40>)
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
	}

	return LSM6DSL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	200001b4 	.word	0x200001b4
 80096a8:	200001b0 	.word	0x200001b0

080096ac <LSM6DSL_RosSetAcceleration>:

	return l_LSM6DSL_axes_t;
}

void LSM6DSL_RosSetAcceleration(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80096ac:	b5b0      	push	{r4, r5, r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	if(pObj->acc_is_enabled)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d02c      	beq.n	800971a <LSM6DSL_RosSetAcceleration+0x6e>
	{
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_imu_t()->linear_acceleration.x = (double) Acceleration->x;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681c      	ldr	r4, [r3, #0]
 80096c4:	4b17      	ldr	r3, [pc, #92]	; (8009724 <LSM6DSL_RosSetAcceleration+0x78>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff ff83 	bl	80095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>
 80096ce:	4605      	mov	r5, r0
 80096d0:	4620      	mov	r0, r4
 80096d2:	f7f6 fed9 	bl	8000488 <__aeabi_i2d>
 80096d6:	4603      	mov	r3, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	e9c5 343e 	strd	r3, r4, [r5, #248]	; 0xf8
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_imu_t()->linear_acceleration.y = (double) Acceleration->y;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685c      	ldr	r4, [r3, #4]
 80096e2:	4b10      	ldr	r3, [pc, #64]	; (8009724 <LSM6DSL_RosSetAcceleration+0x78>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ff74 	bl	80095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>
 80096ec:	4605      	mov	r5, r0
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7f6 feca 	bl	8000488 <__aeabi_i2d>
 80096f4:	4603      	mov	r3, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	e9c5 3440 	strd	r3, r4, [r5, #256]	; 0x100
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_imu_t()->linear_acceleration.z = (double) Acceleration->z;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689c      	ldr	r4, [r3, #8]
 8009700:	4b08      	ldr	r3, [pc, #32]	; (8009724 <LSM6DSL_RosSetAcceleration+0x78>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4618      	mov	r0, r3
 8009706:	f7ff ff65 	bl	80095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>
 800970a:	4605      	mov	r5, r0
 800970c:	4620      	mov	r0, r4
 800970e:	f7f6 febb 	bl	8000488 <__aeabi_i2d>
 8009712:	4603      	mov	r3, r0
 8009714:	460c      	mov	r4, r1
 8009716:	e9c5 3442 	strd	r3, r4, [r5, #264]	; 0x108
	}
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bdb0      	pop	{r4, r5, r7, pc}
 8009722:	bf00      	nop
 8009724:	200001b0 	.word	0x200001b0

08009728 <LSM6DSL_RosSetGyroscope>:

	return AngularRate;
}

void LSM6DSL_RosSetGyroscope(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8009728:	b5b0      	push	{r4, r5, r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
	if(pObj->gyro_is_enabled)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009738:	2b00      	cmp	r3, #0
 800973a:	d02c      	beq.n	8009796 <LSM6DSL_RosSetGyroscope+0x6e>
	{
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_imu_t()->angular_velocity.x = (double) AngularRate->x;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681c      	ldr	r4, [r3, #0]
 8009740:	4b17      	ldr	r3, [pc, #92]	; (80097a0 <LSM6DSL_RosSetGyroscope+0x78>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff ff45 	bl	80095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>
 800974a:	4605      	mov	r5, r0
 800974c:	4620      	mov	r0, r4
 800974e:	f7f6 fe9b 	bl	8000488 <__aeabi_i2d>
 8009752:	4603      	mov	r3, r0
 8009754:	460c      	mov	r4, r1
 8009756:	e9c5 3424 	strd	r3, r4, [r5, #144]	; 0x90
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_imu_t()->angular_velocity.y = (double) AngularRate->y;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685c      	ldr	r4, [r3, #4]
 800975e:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <LSM6DSL_RosSetGyroscope+0x78>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff ff36 	bl	80095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>
 8009768:	4605      	mov	r5, r0
 800976a:	4620      	mov	r0, r4
 800976c:	f7f6 fe8c 	bl	8000488 <__aeabi_i2d>
 8009770:	4603      	mov	r3, r0
 8009772:	460c      	mov	r4, r1
 8009774:	e9c5 3426 	strd	r3, r4, [r5, #152]	; 0x98
		reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_imu_t()->angular_velocity.z = (double) AngularRate->z;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689c      	ldr	r4, [r3, #8]
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <LSM6DSL_RosSetGyroscope+0x78>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff ff27 	bl	80095d4 <_ZN18LSM6DSL_rosService13LSM6DSL_imu_tEv>
 8009786:	4605      	mov	r5, r0
 8009788:	4620      	mov	r0, r4
 800978a:	f7f6 fe7d 	bl	8000488 <__aeabi_i2d>
 800978e:	4603      	mov	r3, r0
 8009790:	460c      	mov	r4, r1
 8009792:	e9c5 3428 	strd	r3, r4, [r5, #160]	; 0xa0
	}
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bdb0      	pop	{r4, r5, r7, pc}
 800979e:	bf00      	nop
 80097a0:	200001b0 	.word	0x200001b0

080097a4 <LSM6DSL_RosImuPublish>:

int32_t LSM6DSL_RosImuPublish(LSM6DSL_Object_t *pObj)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	if((pObj->acc_is_enabled) || (pObj->gyro_is_enabled))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d104      	bne.n	80097c0 <LSM6DSL_RosImuPublish+0x1c>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d006      	beq.n	80097ce <LSM6DSL_RosImuPublish+0x2a>
	{
		return (int32_t) reinterpret_cast<LSM6DSL_rosService*>(rosLSM6DSLInstance)->LSM6DSL_ImuPublish();
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <LSM6DSL_RosImuPublish+0x38>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fef3 	bl	80095b0 <_ZN18LSM6DSL_rosService18LSM6DSL_ImuPublishEv>
 80097ca:	4603      	mov	r3, r0
 80097cc:	e001      	b.n	80097d2 <LSM6DSL_RosImuPublish+0x2e>
	}

	return LSM6DSL_ERROR;
 80097ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	200001b0 	.word	0x200001b0

080097e0 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <IKS01A2_ENV_SENSOR_Init+0x22>
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d032      	beq.n	8009866 <IKS01A2_ENV_SENSOR_Init+0x86>
 8009800:	e063      	b.n	80098ca <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8009802:	6838      	ldr	r0, [r7, #0]
 8009804:	f000 f944 	bl	8009a90 <HTS221_0_Probe>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009812:	e098      	b.n	8009946 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009814:	4a4e      	ldr	r2, [pc, #312]	; (8009950 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	494d      	ldr	r1, [pc, #308]	; (8009954 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009826:	f107 0108 	add.w	r1, r7, #8
 800982a:	4610      	mov	r0, r2
 800982c:	4798      	blx	r3
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009834:	f06f 0306 	mvn.w	r3, #6
 8009838:	e085      	b.n	8009946 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 800983a:	7a3b      	ldrb	r3, [r7, #8]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d103      	bne.n	8009848 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f043 0301 	orr.w	r3, r3, #1
 8009846:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009848:	7abb      	ldrb	r3, [r7, #10]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d103      	bne.n	8009856 <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	f043 0304 	orr.w	r3, r3, #4
 8009854:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009856:	7a7b      	ldrb	r3, [r7, #9]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d13a      	bne.n	80098d2 <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	f043 0302 	orr.w	r3, r3, #2
 8009862:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009864:	e035      	b.n	80098d2 <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8009866:	6838      	ldr	r0, [r7, #0]
 8009868:	f000 f9d0 	bl	8009c0c <LPS22HB_0_Probe>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 8009872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009876:	e066      	b.n	8009946 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009878:	4a35      	ldr	r2, [pc, #212]	; (8009950 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	4934      	ldr	r1, [pc, #208]	; (8009954 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800988a:	f107 0108 	add.w	r1, r7, #8
 800988e:	4610      	mov	r0, r2
 8009890:	4798      	blx	r3
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009898:	f06f 0306 	mvn.w	r3, #6
 800989c:	e053      	b.n	8009946 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 800989e:	7a3b      	ldrb	r3, [r7, #8]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d103      	bne.n	80098ac <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80098ac:	7abb      	ldrb	r3, [r7, #10]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d103      	bne.n	80098ba <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	f043 0304 	orr.w	r3, r3, #4
 80098b8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80098ba:	7a7b      	ldrb	r3, [r7, #9]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d10a      	bne.n	80098d6 <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f043 0302 	orr.w	r3, r3, #2
 80098c6:	61bb      	str	r3, [r7, #24]
      }
      break;
 80098c8:	e005      	b.n	80098d6 <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80098ca:	f06f 0301 	mvn.w	r3, #1
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098d0:	e002      	b.n	80098d8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 80098d2:	bf00      	nop
 80098d4:	e000      	b.n	80098d8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 80098d6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	e031      	b.n	8009946 <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	e02a      	b.n	800993e <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	4013      	ands	r3, r2
 80098ee:	6a3a      	ldr	r2, [r7, #32]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d11e      	bne.n	8009932 <IKS01A2_ENV_SENSOR_Init+0x152>
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	4013      	ands	r3, r2
 80098fa:	6a3a      	ldr	r2, [r7, #32]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d118      	bne.n	8009932 <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009900:	4a15      	ldr	r2, [pc, #84]	; (8009958 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009908:	4814      	ldr	r0, [pc, #80]	; (800995c <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	4413      	add	r3, r2
 8009912:	440b      	add	r3, r1
 8009914:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	490e      	ldr	r1, [pc, #56]	; (8009954 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009922:	4610      	mov	r0, r2
 8009924:	4798      	blx	r3
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800992c:	f06f 0304 	mvn.w	r3, #4
 8009930:	e009      	b.n	8009946 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	3301      	adds	r3, #1
 800993c:	61fb      	str	r3, [r7, #28]
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d9d1      	bls.n	80098e8 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009946:	4618      	mov	r0, r3
 8009948:	3728      	adds	r7, #40	; 0x28
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	200001d0 	.word	0x200001d0
 8009954:	20000444 	.word	0x20000444
 8009958:	200000cc 	.word	0x200000cc
 800995c:	200001b8 	.word	0x200001b8

08009960 <IKS01A2_ENV_SENSOR_GetCapabilities>:
 * @param  Instance Environmental sensor instance
 * @param  Capabilities pointer to Environmental sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A2_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d903      	bls.n	8009978 <IKS01A2_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009970:	f06f 0301 	mvn.w	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	e014      	b.n	80099a2 <IKS01A2_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009978:	4a0c      	ldr	r2, [pc, #48]	; (80099ac <IKS01A2_ENV_SENSOR_GetCapabilities+0x4c>)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	490b      	ldr	r1, [pc, #44]	; (80099b0 <IKS01A2_ENV_SENSOR_GetCapabilities+0x50>)
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	4610      	mov	r0, r2
 800998e:	4798      	blx	r3
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <IKS01A2_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009996:	f06f 0306 	mvn.w	r3, #6
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	e001      	b.n	80099a2 <IKS01A2_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80099a2:	68fb      	ldr	r3, [r7, #12]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	200001d0 	.word	0x200001d0
 80099b0:	20000444 	.word	0x20000444

080099b4 <IKS01A2_ENV_SENSOR_ReadID>:
 * @param  Instance environmental sensor instance to be used
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d903      	bls.n	80099cc <IKS01A2_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80099c4:	f06f 0301 	mvn.w	r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	e014      	b.n	80099f6 <IKS01A2_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 80099cc:	4a0c      	ldr	r2, [pc, #48]	; (8009a00 <IKS01A2_ENV_SENSOR_ReadID+0x4c>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	490b      	ldr	r1, [pc, #44]	; (8009a04 <IKS01A2_ENV_SENSOR_ReadID+0x50>)
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <IKS01A2_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099ea:	f06f 0306 	mvn.w	r3, #6
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e001      	b.n	80099f6 <IKS01A2_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80099f6:	68fb      	ldr	r3, [r7, #12]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200001d0 	.word	0x200001d0
 8009a04:	20000444 	.word	0x20000444

08009a08 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d903      	bls.n	8009a22 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009a1a:	f06f 0301 	mvn.w	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	e029      	b.n	8009a76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009a22:	4a17      	ldr	r2, [pc, #92]	; (8009a80 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d11d      	bne.n	8009a70 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a3c:	4812      	ldr	r0, [pc, #72]	; (8009a88 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	4613      	mov	r3, r2
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	4413      	add	r3, r2
 8009a46:	440b      	add	r3, r1
 8009a48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	490f      	ldr	r1, [pc, #60]	; (8009a8c <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a62:	f06f 0304 	mvn.w	r3, #4
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e005      	b.n	8009a76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e002      	b.n	8009a76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009a70:	f06f 0301 	mvn.w	r3, #1
 8009a74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009a76:	697b      	ldr	r3, [r7, #20]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200001d8 	.word	0x200001d8
 8009a84:	200000cc 	.word	0x200000cc
 8009a88:	200001b8 	.word	0x200001b8
 8009a8c:	20000444 	.word	0x20000444

08009a90 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b090      	sub	sp, #64	; 0x40
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8009aa0:	23bf      	movs	r3, #191	; 0xbf
 8009aa2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8009aa6:	4b4b      	ldr	r3, [pc, #300]	; (8009bd4 <HTS221_0_Probe+0x144>)
 8009aa8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8009aaa:	4b4b      	ldr	r3, [pc, #300]	; (8009bd8 <HTS221_0_Probe+0x148>)
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8009aae:	4b4b      	ldr	r3, [pc, #300]	; (8009bdc <HTS221_0_Probe+0x14c>)
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8009ab2:	4b4b      	ldr	r3, [pc, #300]	; (8009be0 <HTS221_0_Probe+0x150>)
 8009ab4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8009ab6:	4b4b      	ldr	r3, [pc, #300]	; (8009be4 <HTS221_0_Probe+0x154>)
 8009ab8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8009aba:	f107 0320 	add.w	r3, r7, #32
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4849      	ldr	r0, [pc, #292]	; (8009be8 <HTS221_0_Probe+0x158>)
 8009ac2:	f7f9 f8c9 	bl	8002c58 <HTS221_RegisterBusIO>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009acc:	f06f 0306 	mvn.w	r3, #6
 8009ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ad2:	e07a      	b.n	8009bca <HTS221_0_Probe+0x13a>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8009ad4:	f107 031f 	add.w	r3, r7, #31
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4843      	ldr	r0, [pc, #268]	; (8009be8 <HTS221_0_Probe+0x158>)
 8009adc:	f7f9 f955 	bl	8002d8a <HTS221_ReadID>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ae6:	f06f 0306 	mvn.w	r3, #6
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aec:	e06d      	b.n	8009bca <HTS221_0_Probe+0x13a>
  }
  else if (id != HTS221_ID)
 8009aee:	7ffb      	ldrb	r3, [r7, #31]
 8009af0:	2bbc      	cmp	r3, #188	; 0xbc
 8009af2:	d003      	beq.n	8009afc <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009af4:	f06f 0306 	mvn.w	r3, #6
 8009af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009afa:	e066      	b.n	8009bca <HTS221_0_Probe+0x13a>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8009afc:	f107 030c 	add.w	r3, r7, #12
 8009b00:	4619      	mov	r1, r3
 8009b02:	4839      	ldr	r0, [pc, #228]	; (8009be8 <HTS221_0_Probe+0x158>)
 8009b04:	f7f9 f958 	bl	8002db8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009b08:	7b3b      	ldrb	r3, [r7, #12]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	7b7b      	ldrb	r3, [r7, #13]
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009b16:	4313      	orrs	r3, r2
 8009b18:	4a34      	ldr	r2, [pc, #208]	; (8009bec <HTS221_0_Probe+0x15c>)
 8009b1a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8009b1c:	4b34      	ldr	r3, [pc, #208]	; (8009bf0 <HTS221_0_Probe+0x160>)
 8009b1e:	4a32      	ldr	r2, [pc, #200]	; (8009be8 <HTS221_0_Probe+0x158>)
 8009b20:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8009b22:	4b34      	ldr	r3, [pc, #208]	; (8009bf4 <HTS221_0_Probe+0x164>)
 8009b24:	4a34      	ldr	r2, [pc, #208]	; (8009bf8 <HTS221_0_Probe+0x168>)
 8009b26:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d11f      	bne.n	8009b6e <HTS221_0_Probe+0xde>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01a      	beq.n	8009b6e <HTS221_0_Probe+0xde>
 8009b38:	7b3b      	ldrb	r3, [r7, #12]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d117      	bne.n	8009b6e <HTS221_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8009b3e:	4b2f      	ldr	r3, [pc, #188]	; (8009bfc <HTS221_0_Probe+0x16c>)
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	4a2f      	ldr	r2, [pc, #188]	; (8009c00 <HTS221_0_Probe+0x170>)
 8009b44:	492f      	ldr	r1, [pc, #188]	; (8009c04 <HTS221_0_Probe+0x174>)
 8009b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0], &cap) != HTS221_OK)
 8009b4a:	4b2a      	ldr	r3, [pc, #168]	; (8009bf4 <HTS221_0_Probe+0x164>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a27      	ldr	r2, [pc, #156]	; (8009bf0 <HTS221_0_Probe+0x160>)
 8009b52:	6812      	ldr	r2, [r2, #0]
 8009b54:	f107 010c 	add.w	r1, r7, #12
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <HTS221_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b62:	f06f 0304 	mvn.w	r3, #4
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b68:	e001      	b.n	8009b6e <HTS221_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11f      	bne.n	8009bb4 <HTS221_0_Probe+0x124>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d01a      	beq.n	8009bb4 <HTS221_0_Probe+0x124>
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d117      	bne.n	8009bb4 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009b84:	4b1d      	ldr	r3, [pc, #116]	; (8009bfc <HTS221_0_Probe+0x16c>)
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	4a1d      	ldr	r2, [pc, #116]	; (8009c00 <HTS221_0_Probe+0x170>)
 8009b8a:	491f      	ldr	r1, [pc, #124]	; (8009c08 <HTS221_0_Probe+0x178>)
 8009b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0], &cap) != HTS221_OK)
 8009b90:	4b18      	ldr	r3, [pc, #96]	; (8009bf4 <HTS221_0_Probe+0x164>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a16      	ldr	r2, [pc, #88]	; (8009bf0 <HTS221_0_Probe+0x160>)
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	f107 010c 	add.w	r1, r7, #12
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	4798      	blx	r3
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ba8:	f06f 0304 	mvn.w	r3, #4
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bae:	e001      	b.n	8009bb4 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d107      	bne.n	8009bca <HTS221_0_Probe+0x13a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bc4:	f06f 0304 	mvn.w	r3, #4
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8009bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3740      	adds	r7, #64	; 0x40
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	08000e25 	.word	0x08000e25
 8009bd8:	08000e89 	.word	0x08000e89
 8009bdc:	08000f3d 	.word	0x08000f3d
 8009be0:	08000ed9 	.word	0x08000ed9
 8009be4:	08000fa1 	.word	0x08000fa1
 8009be8:	200001e0 	.word	0x200001e0
 8009bec:	200001d8 	.word	0x200001d8
 8009bf0:	20000444 	.word	0x20000444
 8009bf4:	200001d0 	.word	0x200001d0
 8009bf8:	20000004 	.word	0x20000004
 8009bfc:	200000cc 	.word	0x200000cc
 8009c00:	200001b8 	.word	0x200001b8
 8009c04:	20000028 	.word	0x20000028
 8009c08:	20000014 	.word	0x20000014

08009c0c <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b090      	sub	sp, #64	; 0x40
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8009c18:	2300      	movs	r3, #0
 8009c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8009c1c:	23bb      	movs	r3, #187	; 0xbb
 8009c1e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8009c22:	4b4c      	ldr	r3, [pc, #304]	; (8009d54 <LPS22HB_0_Probe+0x148>)
 8009c24:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8009c26:	4b4c      	ldr	r3, [pc, #304]	; (8009d58 <LPS22HB_0_Probe+0x14c>)
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8009c2a:	4b4c      	ldr	r3, [pc, #304]	; (8009d5c <LPS22HB_0_Probe+0x150>)
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8009c2e:	4b4c      	ldr	r3, [pc, #304]	; (8009d60 <LPS22HB_0_Probe+0x154>)
 8009c30:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8009c32:	4b4c      	ldr	r3, [pc, #304]	; (8009d64 <LPS22HB_0_Probe+0x158>)
 8009c34:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8009c36:	f107 0320 	add.w	r3, r7, #32
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	484a      	ldr	r0, [pc, #296]	; (8009d68 <LPS22HB_0_Probe+0x15c>)
 8009c3e:	f7fa ffdb 	bl	8004bf8 <LPS22HB_RegisterBusIO>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c48:	f06f 0306 	mvn.w	r3, #6
 8009c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c4e:	e07c      	b.n	8009d4a <LPS22HB_0_Probe+0x13e>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8009c50:	f107 031f 	add.w	r3, r7, #31
 8009c54:	4619      	mov	r1, r3
 8009c56:	4844      	ldr	r0, [pc, #272]	; (8009d68 <LPS22HB_0_Probe+0x15c>)
 8009c58:	f7fb f887 	bl	8004d6a <LPS22HB_ReadID>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c62:	f06f 0306 	mvn.w	r3, #6
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c68:	e06f      	b.n	8009d4a <LPS22HB_0_Probe+0x13e>
  }
  else if (id != LPS22HB_ID)
 8009c6a:	7ffb      	ldrb	r3, [r7, #31]
 8009c6c:	2bb1      	cmp	r3, #177	; 0xb1
 8009c6e:	d003      	beq.n	8009c78 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c70:	f06f 0306 	mvn.w	r3, #6
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c76:	e068      	b.n	8009d4a <LPS22HB_0_Probe+0x13e>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	483a      	ldr	r0, [pc, #232]	; (8009d68 <LPS22HB_0_Probe+0x15c>)
 8009c80:	f7fb f88a 	bl	8004d98 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009c84:	7b3b      	ldrb	r3, [r7, #12]
 8009c86:	461a      	mov	r2, r3
 8009c88:	7b7b      	ldrb	r3, [r7, #13]
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009c92:	4313      	orrs	r3, r2
 8009c94:	4a35      	ldr	r2, [pc, #212]	; (8009d6c <LPS22HB_0_Probe+0x160>)
 8009c96:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8009c98:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <LPS22HB_0_Probe+0x164>)
 8009c9a:	4a33      	ldr	r2, [pc, #204]	; (8009d68 <LPS22HB_0_Probe+0x15c>)
 8009c9c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8009c9e:	4b35      	ldr	r3, [pc, #212]	; (8009d74 <LPS22HB_0_Probe+0x168>)
 8009ca0:	4a35      	ldr	r2, [pc, #212]	; (8009d78 <LPS22HB_0_Probe+0x16c>)
 8009ca2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d120      	bne.n	8009cec <LPS22HB_0_Probe+0xe0>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01b      	beq.n	8009cec <LPS22HB_0_Probe+0xe0>
 8009cb4:	7b3b      	ldrb	r3, [r7, #12]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d118      	bne.n	8009cec <LPS22HB_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8009cba:	4b30      	ldr	r3, [pc, #192]	; (8009d7c <LPS22HB_0_Probe+0x170>)
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	4a30      	ldr	r2, [pc, #192]	; (8009d80 <LPS22HB_0_Probe+0x174>)
 8009cc0:	3303      	adds	r3, #3
 8009cc2:	4930      	ldr	r1, [pc, #192]	; (8009d84 <LPS22HB_0_Probe+0x178>)
 8009cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0], &cap) != LPS22HB_OK)
 8009cc8:	4b2a      	ldr	r3, [pc, #168]	; (8009d74 <LPS22HB_0_Probe+0x168>)
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a28      	ldr	r2, [pc, #160]	; (8009d70 <LPS22HB_0_Probe+0x164>)
 8009cd0:	6852      	ldr	r2, [r2, #4]
 8009cd2:	f107 010c 	add.w	r1, r7, #12
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <LPS22HB_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ce0:	f06f 0304 	mvn.w	r3, #4
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ce6:	e001      	b.n	8009cec <LPS22HB_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d120      	bne.n	8009d34 <LPS22HB_0_Probe+0x128>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01b      	beq.n	8009d34 <LPS22HB_0_Probe+0x128>
 8009cfc:	7b7b      	ldrb	r3, [r7, #13]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d118      	bne.n	8009d34 <LPS22HB_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8009d02:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <LPS22HB_0_Probe+0x170>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	4a1e      	ldr	r2, [pc, #120]	; (8009d80 <LPS22HB_0_Probe+0x174>)
 8009d08:	3303      	adds	r3, #3
 8009d0a:	491f      	ldr	r1, [pc, #124]	; (8009d88 <LPS22HB_0_Probe+0x17c>)
 8009d0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0], &cap) != LPS22HB_OK)
 8009d10:	4b18      	ldr	r3, [pc, #96]	; (8009d74 <LPS22HB_0_Probe+0x168>)
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a16      	ldr	r2, [pc, #88]	; (8009d70 <LPS22HB_0_Probe+0x164>)
 8009d18:	6852      	ldr	r2, [r2, #4]
 8009d1a:	f107 010c 	add.w	r1, r7, #12
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4798      	blx	r3
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <LPS22HB_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d28:	f06f 0304 	mvn.w	r3, #4
 8009d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2e:	e001      	b.n	8009d34 <LPS22HB_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d107      	bne.n	8009d4a <LPS22HB_0_Probe+0x13e>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <LPS22HB_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d44:	f06f 0304 	mvn.w	r3, #4
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3740      	adds	r7, #64	; 0x40
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	08000e25 	.word	0x08000e25
 8009d58:	08000e89 	.word	0x08000e89
 8009d5c:	08000f3d 	.word	0x08000f3d
 8009d60:	08000ed9 	.word	0x08000ed9
 8009d64:	08000fa1 	.word	0x08000fa1
 8009d68:	2000020c 	.word	0x2000020c
 8009d6c:	200001d8 	.word	0x200001d8
 8009d70:	20000444 	.word	0x20000444
 8009d74:	200001d0 	.word	0x200001d0
 8009d78:	2000003c 	.word	0x2000003c
 8009d7c:	200000cc 	.word	0x200000cc
 8009d80:	200001b8 	.word	0x200001b8
 8009d84:	20000060 	.word	0x20000060
 8009d88:	2000004c 	.word	0x2000004c

08009d8c <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08e      	sub	sp, #56	; 0x38
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d131      	bne.n	8009e0c <IKS01A2_MOTION_SENSOR_Init+0x80>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8009da8:	6838      	ldr	r0, [r7, #0]
 8009daa:	f000 f90f 	bl	8009fcc <LSM6DSL_0_Probe>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <IKS01A2_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8009db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009db8:	e064      	b.n	8009e84 <IKS01A2_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009dba:	4a34      	ldr	r2, [pc, #208]	; (8009e8c <IKS01A2_MOTION_SENSOR_Init+0x100>)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	4932      	ldr	r1, [pc, #200]	; (8009e90 <IKS01A2_MOTION_SENSOR_Init+0x104>)
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009dcc:	f107 010c 	add.w	r1, r7, #12
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <IKS01A2_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009dda:	f06f 0306 	mvn.w	r3, #6
 8009dde:	e051      	b.n	8009e84 <IKS01A2_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 8009de0:	7b3b      	ldrb	r3, [r7, #12]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d103      	bne.n	8009dee <IKS01A2_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	f043 0302 	orr.w	r3, r3, #2
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009dee:	7b7b      	ldrb	r3, [r7, #13]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d103      	bne.n	8009dfc <IKS01A2_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d108      	bne.n	8009e14 <IKS01A2_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	f043 0304 	orr.w	r3, r3, #4
 8009e08:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009e0a:	e003      	b.n	8009e14 <IKS01A2_MOTION_SENSOR_Init+0x88>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009e0c:	f06f 0301 	mvn.w	r3, #1
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009e12:	e000      	b.n	8009e16 <IKS01A2_MOTION_SENSOR_Init+0x8a>
      break;
 8009e14:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <IKS01A2_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1e:	e031      	b.n	8009e84 <IKS01A2_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8009e20:	2300      	movs	r3, #0
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e24:	e02a      	b.n	8009e7c <IKS01A2_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d11e      	bne.n	8009e70 <IKS01A2_MOTION_SENSOR_Init+0xe4>
 8009e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	4013      	ands	r3, r2
 8009e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d118      	bne.n	8009e70 <IKS01A2_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009e3e:	4a15      	ldr	r2, [pc, #84]	; (8009e94 <IKS01A2_MOTION_SENSOR_Init+0x108>)
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e46:	4814      	ldr	r0, [pc, #80]	; (8009e98 <IKS01A2_MOTION_SENSOR_Init+0x10c>)
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	4413      	add	r3, r2
 8009e50:	440b      	add	r3, r1
 8009e52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	490d      	ldr	r1, [pc, #52]	; (8009e90 <IKS01A2_MOTION_SENSOR_Init+0x104>)
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <IKS01A2_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009e6a:	f06f 0304 	mvn.w	r3, #4
 8009e6e:	e009      	b.n	8009e84 <IKS01A2_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	3301      	adds	r3, #1
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d9d1      	bls.n	8009e26 <IKS01A2_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3738      	adds	r7, #56	; 0x38
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000244 	.word	0x20000244
 8009e90:	2000044c 	.word	0x2000044c
 8009e94:	200000e0 	.word	0x200000e0
 8009e98:	20000238 	.word	0x20000238

08009e9c <IKS01A2_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A2_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009eac:	f06f 0301 	mvn.w	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e014      	b.n	8009ede <IKS01A2_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009eb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ee8 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x4c>)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	490b      	ldr	r1, [pc, #44]	; (8009eec <IKS01A2_MOTION_SENSOR_GetCapabilities+0x50>)
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <IKS01A2_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ed2:	f06f 0306 	mvn.w	r3, #6
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e001      	b.n	8009ede <IKS01A2_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009ede:	68fb      	ldr	r3, [r7, #12]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000244 	.word	0x20000244
 8009eec:	2000044c 	.word	0x2000044c

08009ef0 <IKS01A2_MOTION_SENSOR_ReadID>:
 * @param  Instance Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <IKS01A2_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009f00:	f06f 0301 	mvn.w	r3, #1
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	e014      	b.n	8009f32 <IKS01A2_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8009f08:	4a0c      	ldr	r2, [pc, #48]	; (8009f3c <IKS01A2_MOTION_SENSOR_ReadID+0x4c>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	490b      	ldr	r1, [pc, #44]	; (8009f40 <IKS01A2_MOTION_SENSOR_ReadID+0x50>)
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <IKS01A2_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009f26:	f06f 0306 	mvn.w	r3, #6
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	e001      	b.n	8009f32 <IKS01A2_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f32:	68fb      	ldr	r3, [r7, #12]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20000244 	.word	0x20000244
 8009f40:	2000044c 	.word	0x2000044c

08009f44 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009f56:	f06f 0301 	mvn.w	r3, #1
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e029      	b.n	8009fb2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009f5e:	4a17      	ldr	r2, [pc, #92]	; (8009fbc <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d11d      	bne.n	8009fac <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009f70:	4a13      	ldr	r2, [pc, #76]	; (8009fc0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f78:	4812      	ldr	r0, [pc, #72]	; (8009fc4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	4413      	add	r3, r2
 8009f82:	440b      	add	r3, r1
 8009f84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	490f      	ldr	r1, [pc, #60]	; (8009fc8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	4610      	mov	r0, r2
 8009f96:	4798      	blx	r3
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f9e:	f06f 0304 	mvn.w	r3, #4
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e005      	b.n	8009fb2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	e002      	b.n	8009fb2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009fac:	f06f 0301 	mvn.w	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009fb2:	697b      	ldr	r3, [r7, #20]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20000248 	.word	0x20000248
 8009fc0:	200000e0 	.word	0x200000e0
 8009fc4:	20000238 	.word	0x20000238
 8009fc8:	2000044c 	.word	0x2000044c

08009fcc <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b092      	sub	sp, #72	; 0x48
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8009fd8:	2300      	movs	r3, #0
 8009fda:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8009fdc:	23d7      	movs	r3, #215	; 0xd7
 8009fde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8009fe2:	4b4c      	ldr	r3, [pc, #304]	; (800a114 <LSM6DSL_0_Probe+0x148>)
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8009fe6:	4b4c      	ldr	r3, [pc, #304]	; (800a118 <LSM6DSL_0_Probe+0x14c>)
 8009fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8009fea:	4b4c      	ldr	r3, [pc, #304]	; (800a11c <LSM6DSL_0_Probe+0x150>)
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8009fee:	4b4c      	ldr	r3, [pc, #304]	; (800a120 <LSM6DSL_0_Probe+0x154>)
 8009ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8009ff2:	4b4c      	ldr	r3, [pc, #304]	; (800a124 <LSM6DSL_0_Probe+0x158>)
 8009ff4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8009ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	484a      	ldr	r0, [pc, #296]	; (800a128 <LSM6DSL_0_Probe+0x15c>)
 8009ffe:	f7fc fcd7 	bl	80069b0 <LSM6DSL_RegisterBusIO>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a008:	f06f 0306 	mvn.w	r3, #6
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
 800a00e:	e07b      	b.n	800a108 <LSM6DSL_0_Probe+0x13c>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800a010:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800a014:	4619      	mov	r1, r3
 800a016:	4844      	ldr	r0, [pc, #272]	; (800a128 <LSM6DSL_0_Probe+0x15c>)
 800a018:	f7fc fdde 	bl	8006bd8 <LSM6DSL_ReadID>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a022:	f06f 0306 	mvn.w	r3, #6
 800a026:	647b      	str	r3, [r7, #68]	; 0x44
 800a028:	e06e      	b.n	800a108 <LSM6DSL_0_Probe+0x13c>
  }
  else if (id != LSM6DSL_ID)
 800a02a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a02e:	2b6a      	cmp	r3, #106	; 0x6a
 800a030:	d003      	beq.n	800a03a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a032:	f06f 0306 	mvn.w	r3, #6
 800a036:	647b      	str	r3, [r7, #68]	; 0x44
 800a038:	e066      	b.n	800a108 <LSM6DSL_0_Probe+0x13c>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4619      	mov	r1, r3
 800a040:	4839      	ldr	r0, [pc, #228]	; (800a128 <LSM6DSL_0_Probe+0x15c>)
 800a042:	f7fc fddf 	bl	8006c04 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a046:	7a7b      	ldrb	r3, [r7, #9]
 800a048:	461a      	mov	r2, r3
 800a04a:	7a3b      	ldrb	r3, [r7, #8]
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	431a      	orrs	r2, r3
 800a050:	7abb      	ldrb	r3, [r7, #10]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4313      	orrs	r3, r2
 800a056:	4a35      	ldr	r2, [pc, #212]	; (800a12c <LSM6DSL_0_Probe+0x160>)
 800a058:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800a05a:	4b35      	ldr	r3, [pc, #212]	; (800a130 <LSM6DSL_0_Probe+0x164>)
 800a05c:	4a32      	ldr	r2, [pc, #200]	; (800a128 <LSM6DSL_0_Probe+0x15c>)
 800a05e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800a060:	4b34      	ldr	r3, [pc, #208]	; (800a134 <LSM6DSL_0_Probe+0x168>)
 800a062:	4a35      	ldr	r2, [pc, #212]	; (800a138 <LSM6DSL_0_Probe+0x16c>)
 800a064:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d11f      	bne.n	800a0ac <LSM6DSL_0_Probe+0xe0>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d01a      	beq.n	800a0ac <LSM6DSL_0_Probe+0xe0>
 800a076:	7a7b      	ldrb	r3, [r7, #9]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d117      	bne.n	800a0ac <LSM6DSL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800a07c:	4b2f      	ldr	r3, [pc, #188]	; (800a13c <LSM6DSL_0_Probe+0x170>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4a2f      	ldr	r2, [pc, #188]	; (800a140 <LSM6DSL_0_Probe+0x174>)
 800a082:	4930      	ldr	r1, [pc, #192]	; (800a144 <LSM6DSL_0_Probe+0x178>)
 800a084:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0], &cap) != LSM6DSL_OK)
 800a088:	4b2a      	ldr	r3, [pc, #168]	; (800a134 <LSM6DSL_0_Probe+0x168>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a28      	ldr	r2, [pc, #160]	; (800a130 <LSM6DSL_0_Probe+0x164>)
 800a090:	6812      	ldr	r2, [r2, #0]
 800a092:	f107 0108 	add.w	r1, r7, #8
 800a096:	4610      	mov	r0, r2
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <LSM6DSL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0a0:	f06f 0304 	mvn.w	r3, #4
 800a0a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0a6:	e001      	b.n	800a0ac <LSM6DSL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d11f      	bne.n	800a0f2 <LSM6DSL_0_Probe+0x126>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01a      	beq.n	800a0f2 <LSM6DSL_0_Probe+0x126>
 800a0bc:	7a3b      	ldrb	r3, [r7, #8]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d117      	bne.n	800a0f2 <LSM6DSL_0_Probe+0x126>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a0c2:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <LSM6DSL_0_Probe+0x170>)
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	4a1e      	ldr	r2, [pc, #120]	; (800a140 <LSM6DSL_0_Probe+0x174>)
 800a0c8:	491f      	ldr	r1, [pc, #124]	; (800a148 <LSM6DSL_0_Probe+0x17c>)
 800a0ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0], &cap) != LSM6DSL_OK)
 800a0ce:	4b19      	ldr	r3, [pc, #100]	; (800a134 <LSM6DSL_0_Probe+0x168>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a16      	ldr	r2, [pc, #88]	; (800a130 <LSM6DSL_0_Probe+0x164>)
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	f107 0108 	add.w	r1, r7, #8
 800a0dc:	4610      	mov	r0, r2
 800a0de:	4798      	blx	r3
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <LSM6DSL_0_Probe+0x122>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0e6:	f06f 0304 	mvn.w	r3, #4
 800a0ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ec:	e001      	b.n	800a0f2 <LSM6DSL_0_Probe+0x126>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d107      	bne.n	800a108 <LSM6DSL_0_Probe+0x13c>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <LSM6DSL_0_Probe+0x13c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a102:	f06f 0304 	mvn.w	r3, #4
 800a106:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800a108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3748      	adds	r7, #72	; 0x48
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	08000e25 	.word	0x08000e25
 800a118:	08000e89 	.word	0x08000e89
 800a11c:	08000f3d 	.word	0x08000f3d
 800a120:	08000ed9 	.word	0x08000ed9
 800a124:	08000fa1 	.word	0x08000fa1
 800a128:	2000024c 	.word	0x2000024c
 800a12c:	20000248 	.word	0x20000248
 800a130:	2000044c 	.word	0x2000044c
 800a134:	20000244 	.word	0x20000244
 800a138:	20000074 	.word	0x20000074
 800a13c:	200000e0 	.word	0x200000e0
 800a140:	20000238 	.word	0x20000238
 800a144:	200000a8 	.word	0x200000a8
 800a148:	20000084 	.word	0x20000084

0800a14c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a150:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <HAL_Init+0x40>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a0d      	ldr	r2, [pc, #52]	; (800a18c <HAL_Init+0x40>)
 800a156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a15a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a15c:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <HAL_Init+0x40>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0a      	ldr	r2, [pc, #40]	; (800a18c <HAL_Init+0x40>)
 800a162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a168:	4b08      	ldr	r3, [pc, #32]	; (800a18c <HAL_Init+0x40>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a07      	ldr	r2, [pc, #28]	; (800a18c <HAL_Init+0x40>)
 800a16e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a174:	2003      	movs	r0, #3
 800a176:	f000 f94d 	bl	800a414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a17a:	2000      	movs	r0, #0
 800a17c:	f000 f808 	bl	800a190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a180:	f7f6 fd20 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	40023c00 	.word	0x40023c00

0800a190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a198:	4b12      	ldr	r3, [pc, #72]	; (800a1e4 <HAL_InitTick+0x54>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	4b12      	ldr	r3, [pc, #72]	; (800a1e8 <HAL_InitTick+0x58>)
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f965 	bl	800a47e <HAL_SYSTICK_Config>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e00e      	b.n	800a1dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b0f      	cmp	r3, #15
 800a1c2:	d80a      	bhi.n	800a1da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1cc:	f000 f92d 	bl	800a42a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a1d0:	4a06      	ldr	r2, [pc, #24]	; (800a1ec <HAL_InitTick+0x5c>)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e000      	b.n	800a1dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000000 	.word	0x20000000
 800a1e8:	200000f8 	.word	0x200000f8
 800a1ec:	200000f4 	.word	0x200000f4

0800a1f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a1f4:	4b06      	ldr	r3, [pc, #24]	; (800a210 <HAL_IncTick+0x20>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <HAL_IncTick+0x24>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4413      	add	r3, r2
 800a200:	4a04      	ldr	r2, [pc, #16]	; (800a214 <HAL_IncTick+0x24>)
 800a202:	6013      	str	r3, [r2, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	200000f8 	.word	0x200000f8
 800a214:	20000450 	.word	0x20000450

0800a218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  return uwTick;
 800a21c:	4b03      	ldr	r3, [pc, #12]	; (800a22c <HAL_GetTick+0x14>)
 800a21e:	681b      	ldr	r3, [r3, #0]
}
 800a220:	4618      	mov	r0, r3
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	20000450 	.word	0x20000450

0800a230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a238:	f7ff ffee 	bl	800a218 <HAL_GetTick>
 800a23c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a248:	d005      	beq.n	800a256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <HAL_Delay+0x40>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4413      	add	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a256:	bf00      	nop
 800a258:	f7ff ffde 	bl	800a218 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	429a      	cmp	r2, r3
 800a266:	d8f7      	bhi.n	800a258 <HAL_Delay+0x28>
  {
  }
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	200000f8 	.word	0x200000f8

0800a274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a290:	4013      	ands	r3, r2
 800a292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a29c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a2a6:	4a04      	ldr	r2, [pc, #16]	; (800a2b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	60d3      	str	r3, [r2, #12]
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	e000ed00 	.word	0xe000ed00

0800a2bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <__NVIC_GetPriorityGrouping+0x18>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	f003 0307 	and.w	r3, r3, #7
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	e000ed00 	.word	0xe000ed00

0800a2d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	db0b      	blt.n	800a302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	f003 021f 	and.w	r2, r3, #31
 800a2f0:	4907      	ldr	r1, [pc, #28]	; (800a310 <__NVIC_EnableIRQ+0x38>)
 800a2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2f6:	095b      	lsrs	r3, r3, #5
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	e000e100 	.word	0xe000e100

0800a314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a324:	2b00      	cmp	r3, #0
 800a326:	db0a      	blt.n	800a33e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	490c      	ldr	r1, [pc, #48]	; (800a360 <__NVIC_SetPriority+0x4c>)
 800a32e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a332:	0112      	lsls	r2, r2, #4
 800a334:	b2d2      	uxtb	r2, r2
 800a336:	440b      	add	r3, r1
 800a338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a33c:	e00a      	b.n	800a354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	b2da      	uxtb	r2, r3
 800a342:	4908      	ldr	r1, [pc, #32]	; (800a364 <__NVIC_SetPriority+0x50>)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	3b04      	subs	r3, #4
 800a34c:	0112      	lsls	r2, r2, #4
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	440b      	add	r3, r1
 800a352:	761a      	strb	r2, [r3, #24]
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	e000e100 	.word	0xe000e100
 800a364:	e000ed00 	.word	0xe000ed00

0800a368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a368:	b480      	push	{r7}
 800a36a:	b089      	sub	sp, #36	; 0x24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	f1c3 0307 	rsb	r3, r3, #7
 800a382:	2b04      	cmp	r3, #4
 800a384:	bf28      	it	cs
 800a386:	2304      	movcs	r3, #4
 800a388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	3304      	adds	r3, #4
 800a38e:	2b06      	cmp	r3, #6
 800a390:	d902      	bls.n	800a398 <NVIC_EncodePriority+0x30>
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	3b03      	subs	r3, #3
 800a396:	e000      	b.n	800a39a <NVIC_EncodePriority+0x32>
 800a398:	2300      	movs	r3, #0
 800a39a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	43da      	mvns	r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	401a      	ands	r2, r3
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a3b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ba:	43d9      	mvns	r1, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a3c0:	4313      	orrs	r3, r2
         );
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3724      	adds	r7, #36	; 0x24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3e0:	d301      	bcc.n	800a3e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e00f      	b.n	800a406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a3e6:	4a0a      	ldr	r2, [pc, #40]	; (800a410 <SysTick_Config+0x40>)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a3ee:	210f      	movs	r1, #15
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f4:	f7ff ff8e 	bl	800a314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <SysTick_Config+0x40>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a3fe:	4b04      	ldr	r3, [pc, #16]	; (800a410 <SysTick_Config+0x40>)
 800a400:	2207      	movs	r2, #7
 800a402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000e010 	.word	0xe000e010

0800a414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff29 	bl	800a274 <__NVIC_SetPriorityGrouping>
}
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	4603      	mov	r3, r0
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
 800a436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a43c:	f7ff ff3e 	bl	800a2bc <__NVIC_GetPriorityGrouping>
 800a440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68b9      	ldr	r1, [r7, #8]
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f7ff ff8e 	bl	800a368 <NVIC_EncodePriority>
 800a44c:	4602      	mov	r2, r0
 800a44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff ff5d 	bl	800a314 <__NVIC_SetPriority>
}
 800a45a:	bf00      	nop
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	4603      	mov	r3, r0
 800a46a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a46c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff ff31 	bl	800a2d8 <__NVIC_EnableIRQ>
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ffa2 	bl	800a3d0 <SysTick_Config>
 800a48c:	4603      	mov	r3, r0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a4a4:	f7ff feb8 	bl	800a218 <HAL_GetTick>
 800a4a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e099      	b.n	800a5e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0201 	bic.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a4d4:	e00f      	b.n	800a4f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a4d6:	f7ff fe9f 	bl	800a218 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	d908      	bls.n	800a4f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e078      	b.n	800a5e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e8      	bne.n	800a4d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4b38      	ldr	r3, [pc, #224]	; (800a5f0 <HAL_DMA_Init+0x158>)
 800a510:	4013      	ands	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a52e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a53a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d107      	bne.n	800a560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	4313      	orrs	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	2b04      	cmp	r3, #4
 800a588:	d117      	bne.n	800a5ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	4313      	orrs	r3, r2
 800a592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fa91 	bl	800aac4 <DMA_CheckFifoParam>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d008      	beq.n	800a5ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2240      	movs	r2, #64	; 0x40
 800a5ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e016      	b.n	800a5e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fa48 	bl	800aa58 <DMA_CalcBaseAndBitshift>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d0:	223f      	movs	r2, #63	; 0x3f
 800a5d2:	409a      	lsls	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	f010803f 	.word	0xf010803f

0800a5f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <HAL_DMA_Start_IT+0x26>
 800a616:	2302      	movs	r3, #2
 800a618:	e040      	b.n	800a69c <HAL_DMA_Start_IT+0xa8>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d12f      	bne.n	800a68e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2202      	movs	r2, #2
 800a632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f9da 	bl	800a9fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64c:	223f      	movs	r2, #63	; 0x3f
 800a64e:	409a      	lsls	r2, r3
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0216 	orr.w	r2, r2, #22
 800a662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f042 0208 	orr.w	r2, r2, #8
 800a67a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e005      	b.n	800a69a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a696:	2302      	movs	r3, #2
 800a698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2280      	movs	r2, #128	; 0x80
 800a6bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e00c      	b.n	800a6dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2205      	movs	r2, #5
 800a6c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 0201 	bic.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a6f4:	4b92      	ldr	r3, [pc, #584]	; (800a940 <HAL_DMA_IRQHandler+0x258>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a92      	ldr	r2, [pc, #584]	; (800a944 <HAL_DMA_IRQHandler+0x25c>)
 800a6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fe:	0a9b      	lsrs	r3, r3, #10
 800a700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a712:	2208      	movs	r2, #8
 800a714:	409a      	lsls	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4013      	ands	r3, r2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d01a      	beq.n	800a754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d013      	beq.n	800a754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0204 	bic.w	r2, r2, #4
 800a73a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a740:	2208      	movs	r2, #8
 800a742:	409a      	lsls	r2, r3
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74c:	f043 0201 	orr.w	r2, r3, #1
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a758:	2201      	movs	r2, #1
 800a75a:	409a      	lsls	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d012      	beq.n	800a78a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a776:	2201      	movs	r2, #1
 800a778:	409a      	lsls	r2, r3
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a782:	f043 0202 	orr.w	r2, r3, #2
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78e:	2204      	movs	r2, #4
 800a790:	409a      	lsls	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4013      	ands	r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d012      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	409a      	lsls	r2, r3
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b8:	f043 0204 	orr.w	r2, r3, #4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c4:	2210      	movs	r2, #16
 800a7c6:	409a      	lsls	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d043      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d03c      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e2:	2210      	movs	r2, #16
 800a7e4:	409a      	lsls	r2, r3
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d018      	beq.n	800a82a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d108      	bne.n	800a818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d024      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
 800a816:	e01f      	b.n	800a858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01b      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	4798      	blx	r3
 800a828:	e016      	b.n	800a858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	d107      	bne.n	800a848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0208 	bic.w	r2, r2, #8
 800a846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	2220      	movs	r2, #32
 800a85e:	409a      	lsls	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4013      	ands	r3, r2
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 808e 	beq.w	800a986 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8086 	beq.w	800a986 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87e:	2220      	movs	r2, #32
 800a880:	409a      	lsls	r2, r3
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d136      	bne.n	800a900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0216 	bic.w	r2, r2, #22
 800a8a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d103      	bne.n	800a8c2 <HAL_DMA_IRQHandler+0x1da>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d007      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0208 	bic.w	r2, r2, #8
 800a8d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d6:	223f      	movs	r2, #63	; 0x3f
 800a8d8:	409a      	lsls	r2, r3
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d07d      	beq.n	800a9f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
        }
        return;
 800a8fe:	e078      	b.n	800a9f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d01c      	beq.n	800a948 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d108      	bne.n	800a92e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a920:	2b00      	cmp	r3, #0
 800a922:	d030      	beq.n	800a986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
 800a92c:	e02b      	b.n	800a986 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	2b00      	cmp	r3, #0
 800a934:	d027      	beq.n	800a986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
 800a93e:	e022      	b.n	800a986 <HAL_DMA_IRQHandler+0x29e>
 800a940:	20000000 	.word	0x20000000
 800a944:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10f      	bne.n	800a976 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f022 0210 	bic.w	r2, r2, #16
 800a964:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d032      	beq.n	800a9f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d022      	beq.n	800a9e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2205      	movs	r2, #5
 800a99e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0201 	bic.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60bb      	str	r3, [r7, #8]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d307      	bcc.n	800a9ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f2      	bne.n	800a9b2 <HAL_DMA_IRQHandler+0x2ca>
 800a9cc:	e000      	b.n	800a9d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a9ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
 800a9f0:	e000      	b.n	800a9f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a9f2:	bf00      	nop
    }
  }
}
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop

0800a9fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	2b40      	cmp	r3, #64	; 0x40
 800aa28:	d108      	bne.n	800aa3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aa3a:	e007      	b.n	800aa4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	60da      	str	r2, [r3, #12]
}
 800aa4c:	bf00      	nop
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	3b10      	subs	r3, #16
 800aa68:	4a14      	ldr	r2, [pc, #80]	; (800aabc <DMA_CalcBaseAndBitshift+0x64>)
 800aa6a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6e:	091b      	lsrs	r3, r3, #4
 800aa70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800aa72:	4a13      	ldr	r2, [pc, #76]	; (800aac0 <DMA_CalcBaseAndBitshift+0x68>)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d909      	bls.n	800aa9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	1d1a      	adds	r2, r3, #4
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	659a      	str	r2, [r3, #88]	; 0x58
 800aa98:	e007      	b.n	800aaaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	aaaaaaab 	.word	0xaaaaaaab
 800aac0:	0800e720 	.word	0x0800e720

0800aac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d11f      	bne.n	800ab1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d855      	bhi.n	800ab90 <DMA_CheckFifoParam+0xcc>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <DMA_CheckFifoParam+0x28>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800aafd 	.word	0x0800aafd
 800aaf0:	0800ab0f 	.word	0x0800ab0f
 800aaf4:	0800aafd 	.word	0x0800aafd
 800aaf8:	0800ab91 	.word	0x0800ab91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d045      	beq.n	800ab94 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab0c:	e042      	b.n	800ab94 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab16:	d13f      	bne.n	800ab98 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab1c:	e03c      	b.n	800ab98 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab26:	d121      	bne.n	800ab6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d836      	bhi.n	800ab9c <DMA_CheckFifoParam+0xd8>
 800ab2e:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <DMA_CheckFifoParam+0x70>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab4b 	.word	0x0800ab4b
 800ab3c:	0800ab45 	.word	0x0800ab45
 800ab40:	0800ab5d 	.word	0x0800ab5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	73fb      	strb	r3, [r7, #15]
      break;
 800ab48:	e02f      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d024      	beq.n	800aba0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab5a:	e021      	b.n	800aba0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab64:	d11e      	bne.n	800aba4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ab6a:	e01b      	b.n	800aba4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d902      	bls.n	800ab78 <DMA_CheckFifoParam+0xb4>
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d003      	beq.n	800ab7e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ab76:	e018      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab7c:	e015      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00e      	beq.n	800aba8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8e:	e00b      	b.n	800aba8 <DMA_CheckFifoParam+0xe4>
      break;
 800ab90:	bf00      	nop
 800ab92:	e00a      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      break;
 800ab94:	bf00      	nop
 800ab96:	e008      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      break;
 800ab98:	bf00      	nop
 800ab9a:	e006      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e004      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      break;
 800aba0:	bf00      	nop
 800aba2:	e002      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      break;   
 800aba4:	bf00      	nop
 800aba6:	e000      	b.n	800abaa <DMA_CheckFifoParam+0xe6>
      break;
 800aba8:	bf00      	nop
    }
  } 
  
  return status; 
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	; 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800abca:	2300      	movs	r3, #0
 800abcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
 800abd2:	e159      	b.n	800ae88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800abd4:	2201      	movs	r2, #1
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	fa02 f303 	lsl.w	r3, r2, r3
 800abdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	4013      	ands	r3, r2
 800abe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	429a      	cmp	r2, r3
 800abee:	f040 8148 	bne.w	800ae82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d00b      	beq.n	800ac12 <HAL_GPIO_Init+0x5a>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d007      	beq.n	800ac12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ac06:	2b11      	cmp	r3, #17
 800ac08:	d003      	beq.n	800ac12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b12      	cmp	r3, #18
 800ac10:	d130      	bne.n	800ac74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac22:	43db      	mvns	r3, r3
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	4013      	ands	r3, r2
 800ac28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	fa02 f303 	lsl.w	r3, r2, r3
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69ba      	ldr	r2, [r7, #24]
 800ac40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac48:	2201      	movs	r2, #1
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac50:	43db      	mvns	r3, r3
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	4013      	ands	r3, r2
 800ac56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	091b      	lsrs	r3, r3, #4
 800ac5e:	f003 0201 	and.w	r2, r3, #1
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69ba      	ldr	r2, [r7, #24]
 800ac72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	2203      	movs	r2, #3
 800ac80:	fa02 f303 	lsl.w	r3, r2, r3
 800ac84:	43db      	mvns	r3, r3
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	fa02 f303 	lsl.w	r3, r2, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d003      	beq.n	800acb4 <HAL_GPIO_Init+0xfc>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b12      	cmp	r3, #18
 800acb2:	d123      	bne.n	800acfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	08da      	lsrs	r2, r3, #3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3208      	adds	r2, #8
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	f003 0307 	and.w	r3, r3, #7
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	220f      	movs	r2, #15
 800accc:	fa02 f303 	lsl.w	r3, r2, r3
 800acd0:	43db      	mvns	r3, r3
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	4013      	ands	r3, r2
 800acd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	fa02 f303 	lsl.w	r3, r2, r3
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	4313      	orrs	r3, r2
 800acec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	08da      	lsrs	r2, r3, #3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3208      	adds	r2, #8
 800acf6:	69b9      	ldr	r1, [r7, #24]
 800acf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	2203      	movs	r2, #3
 800ad08:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0c:	43db      	mvns	r3, r3
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	4013      	ands	r3, r2
 800ad12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	f003 0203 	and.w	r2, r3, #3
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	fa02 f303 	lsl.w	r3, r2, r3
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 80a2 	beq.w	800ae82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	4b56      	ldr	r3, [pc, #344]	; (800ae9c <HAL_GPIO_Init+0x2e4>)
 800ad44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad46:	4a55      	ldr	r2, [pc, #340]	; (800ae9c <HAL_GPIO_Init+0x2e4>)
 800ad48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad4c:	6453      	str	r3, [r2, #68]	; 0x44
 800ad4e:	4b53      	ldr	r3, [pc, #332]	; (800ae9c <HAL_GPIO_Init+0x2e4>)
 800ad50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad5a:	4a51      	ldr	r2, [pc, #324]	; (800aea0 <HAL_GPIO_Init+0x2e8>)
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	089b      	lsrs	r3, r3, #2
 800ad60:	3302      	adds	r3, #2
 800ad62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	220f      	movs	r2, #15
 800ad72:	fa02 f303 	lsl.w	r3, r2, r3
 800ad76:	43db      	mvns	r3, r3
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a48      	ldr	r2, [pc, #288]	; (800aea4 <HAL_GPIO_Init+0x2ec>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d019      	beq.n	800adba <HAL_GPIO_Init+0x202>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a47      	ldr	r2, [pc, #284]	; (800aea8 <HAL_GPIO_Init+0x2f0>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d013      	beq.n	800adb6 <HAL_GPIO_Init+0x1fe>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a46      	ldr	r2, [pc, #280]	; (800aeac <HAL_GPIO_Init+0x2f4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d00d      	beq.n	800adb2 <HAL_GPIO_Init+0x1fa>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a45      	ldr	r2, [pc, #276]	; (800aeb0 <HAL_GPIO_Init+0x2f8>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <HAL_GPIO_Init+0x1f6>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a44      	ldr	r2, [pc, #272]	; (800aeb4 <HAL_GPIO_Init+0x2fc>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d101      	bne.n	800adaa <HAL_GPIO_Init+0x1f2>
 800ada6:	2304      	movs	r3, #4
 800ada8:	e008      	b.n	800adbc <HAL_GPIO_Init+0x204>
 800adaa:	2307      	movs	r3, #7
 800adac:	e006      	b.n	800adbc <HAL_GPIO_Init+0x204>
 800adae:	2303      	movs	r3, #3
 800adb0:	e004      	b.n	800adbc <HAL_GPIO_Init+0x204>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e002      	b.n	800adbc <HAL_GPIO_Init+0x204>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e000      	b.n	800adbc <HAL_GPIO_Init+0x204>
 800adba:	2300      	movs	r3, #0
 800adbc:	69fa      	ldr	r2, [r7, #28]
 800adbe:	f002 0203 	and.w	r2, r2, #3
 800adc2:	0092      	lsls	r2, r2, #2
 800adc4:	4093      	lsls	r3, r2
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	4313      	orrs	r3, r2
 800adca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800adcc:	4934      	ldr	r1, [pc, #208]	; (800aea0 <HAL_GPIO_Init+0x2e8>)
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	089b      	lsrs	r3, r3, #2
 800add2:	3302      	adds	r3, #2
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	43db      	mvns	r3, r3
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	4013      	ands	r3, r2
 800ade8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adfe:	4a2e      	ldr	r2, [pc, #184]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ae04:	4b2c      	ldr	r3, [pc, #176]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	43db      	mvns	r3, r3
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	4013      	ands	r3, r2
 800ae12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ae20:	69ba      	ldr	r2, [r7, #24]
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ae28:	4a23      	ldr	r2, [pc, #140]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae2e:	4b22      	ldr	r3, [pc, #136]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	43db      	mvns	r3, r3
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae52:	4a19      	ldr	r2, [pc, #100]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae58:	4b17      	ldr	r3, [pc, #92]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	43db      	mvns	r3, r3
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	4013      	ands	r3, r2
 800ae66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae7c:	4a0e      	ldr	r2, [pc, #56]	; (800aeb8 <HAL_GPIO_Init+0x300>)
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	3301      	adds	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b0f      	cmp	r3, #15
 800ae8c:	f67f aea2 	bls.w	800abd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae90:	bf00      	nop
 800ae92:	3724      	adds	r7, #36	; 0x24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	40023800 	.word	0x40023800
 800aea0:	40013800 	.word	0x40013800
 800aea4:	40020000 	.word	0x40020000
 800aea8:	40020400 	.word	0x40020400
 800aeac:	40020800 	.word	0x40020800
 800aeb0:	40020c00 	.word	0x40020c00
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	40013c00 	.word	0x40013c00

0800aebc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aed2:	2300      	movs	r3, #0
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	e0bb      	b.n	800b050 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aed8:	2201      	movs	r2, #1
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	fa02 f303 	lsl.w	r3, r2, r3
 800aee0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	4013      	ands	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	f040 80ab 	bne.w	800b04a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aef4:	4a5b      	ldr	r2, [pc, #364]	; (800b064 <HAL_GPIO_DeInit+0x1a8>)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	089b      	lsrs	r3, r3, #2
 800aefa:	3302      	adds	r3, #2
 800aefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af00:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	220f      	movs	r2, #15
 800af0c:	fa02 f303 	lsl.w	r3, r2, r3
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	4013      	ands	r3, r2
 800af14:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a53      	ldr	r2, [pc, #332]	; (800b068 <HAL_GPIO_DeInit+0x1ac>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d019      	beq.n	800af52 <HAL_GPIO_DeInit+0x96>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a52      	ldr	r2, [pc, #328]	; (800b06c <HAL_GPIO_DeInit+0x1b0>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d013      	beq.n	800af4e <HAL_GPIO_DeInit+0x92>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a51      	ldr	r2, [pc, #324]	; (800b070 <HAL_GPIO_DeInit+0x1b4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00d      	beq.n	800af4a <HAL_GPIO_DeInit+0x8e>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a50      	ldr	r2, [pc, #320]	; (800b074 <HAL_GPIO_DeInit+0x1b8>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <HAL_GPIO_DeInit+0x8a>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a4f      	ldr	r2, [pc, #316]	; (800b078 <HAL_GPIO_DeInit+0x1bc>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d101      	bne.n	800af42 <HAL_GPIO_DeInit+0x86>
 800af3e:	2304      	movs	r3, #4
 800af40:	e008      	b.n	800af54 <HAL_GPIO_DeInit+0x98>
 800af42:	2307      	movs	r3, #7
 800af44:	e006      	b.n	800af54 <HAL_GPIO_DeInit+0x98>
 800af46:	2303      	movs	r3, #3
 800af48:	e004      	b.n	800af54 <HAL_GPIO_DeInit+0x98>
 800af4a:	2302      	movs	r3, #2
 800af4c:	e002      	b.n	800af54 <HAL_GPIO_DeInit+0x98>
 800af4e:	2301      	movs	r3, #1
 800af50:	e000      	b.n	800af54 <HAL_GPIO_DeInit+0x98>
 800af52:	2300      	movs	r3, #0
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	f002 0203 	and.w	r2, r2, #3
 800af5a:	0092      	lsls	r2, r2, #2
 800af5c:	4093      	lsls	r3, r2
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	429a      	cmp	r2, r3
 800af62:	d132      	bne.n	800afca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800af64:	4b45      	ldr	r3, [pc, #276]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	43db      	mvns	r3, r3
 800af6c:	4943      	ldr	r1, [pc, #268]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af6e:	4013      	ands	r3, r2
 800af70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800af72:	4b42      	ldr	r3, [pc, #264]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	43db      	mvns	r3, r3
 800af7a:	4940      	ldr	r1, [pc, #256]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af7c:	4013      	ands	r3, r2
 800af7e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800af80:	4b3e      	ldr	r3, [pc, #248]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	43db      	mvns	r3, r3
 800af88:	493c      	ldr	r1, [pc, #240]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800af8e:	4b3b      	ldr	r3, [pc, #236]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	43db      	mvns	r3, r3
 800af96:	4939      	ldr	r1, [pc, #228]	; (800b07c <HAL_GPIO_DeInit+0x1c0>)
 800af98:	4013      	ands	r3, r2
 800af9a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	220f      	movs	r2, #15
 800afa6:	fa02 f303 	lsl.w	r3, r2, r3
 800afaa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800afac:	4a2d      	ldr	r2, [pc, #180]	; (800b064 <HAL_GPIO_DeInit+0x1a8>)
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	089b      	lsrs	r3, r3, #2
 800afb2:	3302      	adds	r3, #2
 800afb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	43da      	mvns	r2, r3
 800afbc:	4829      	ldr	r0, [pc, #164]	; (800b064 <HAL_GPIO_DeInit+0x1a8>)
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	089b      	lsrs	r3, r3, #2
 800afc2:	400a      	ands	r2, r1
 800afc4:	3302      	adds	r3, #2
 800afc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	2103      	movs	r1, #3
 800afd4:	fa01 f303 	lsl.w	r3, r1, r3
 800afd8:	43db      	mvns	r3, r3
 800afda:	401a      	ands	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	08da      	lsrs	r2, r3, #3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3208      	adds	r2, #8
 800afe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f003 0307 	and.w	r3, r3, #7
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	220f      	movs	r2, #15
 800aff6:	fa02 f303 	lsl.w	r3, r2, r3
 800affa:	43db      	mvns	r3, r3
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	08d2      	lsrs	r2, r2, #3
 800b000:	4019      	ands	r1, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3208      	adds	r2, #8
 800b006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	2103      	movs	r1, #3
 800b014:	fa01 f303 	lsl.w	r3, r1, r3
 800b018:	43db      	mvns	r3, r3
 800b01a:	401a      	ands	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	2101      	movs	r1, #1
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	fa01 f303 	lsl.w	r3, r1, r3
 800b02c:	43db      	mvns	r3, r3
 800b02e:	401a      	ands	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	689a      	ldr	r2, [r3, #8]
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	2103      	movs	r1, #3
 800b03e:	fa01 f303 	lsl.w	r3, r1, r3
 800b042:	43db      	mvns	r3, r3
 800b044:	401a      	ands	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	3301      	adds	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2b0f      	cmp	r3, #15
 800b054:	f67f af40 	bls.w	800aed8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b058:	bf00      	nop
 800b05a:	371c      	adds	r7, #28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	40013800 	.word	0x40013800
 800b068:	40020000 	.word	0x40020000
 800b06c:	40020400 	.word	0x40020400
 800b070:	40020800 	.word	0x40020800
 800b074:	40020c00 	.word	0x40020c00
 800b078:	40021000 	.word	0x40021000
 800b07c:	40013c00 	.word	0x40013c00

0800b080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	807b      	strh	r3, [r7, #2]
 800b08c:	4613      	mov	r3, r2
 800b08e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b090:	787b      	ldrb	r3, [r7, #1]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b096:	887a      	ldrh	r2, [r7, #2]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b09c:	e003      	b.n	800b0a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b09e:	887b      	ldrh	r3, [r7, #2]
 800b0a0:	041a      	lsls	r2, r3, #16
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	619a      	str	r2, [r3, #24]
}
 800b0a6:	bf00      	nop
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695a      	ldr	r2, [r3, #20]
 800b0c2:	887b      	ldrh	r3, [r7, #2]
 800b0c4:	401a      	ands	r2, r3
 800b0c6:	887b      	ldrh	r3, [r7, #2]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d104      	bne.n	800b0d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b0cc:	887b      	ldrh	r3, [r7, #2]
 800b0ce:	041a      	lsls	r2, r3, #16
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800b0d4:	e002      	b.n	800b0dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800b0d6:	887a      	ldrh	r2, [r7, #2]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	619a      	str	r2, [r3, #24]
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e11f      	b.n	800b33a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f951 	bl	800b3b6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2224      	movs	r2, #36	; 0x24
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 0201 	bic.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b13a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b14a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b14c:	f001 fc14 	bl	800c978 <HAL_RCC_GetPCLK1Freq>
 800b150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	4a7b      	ldr	r2, [pc, #492]	; (800b344 <HAL_I2C_Init+0x25c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d807      	bhi.n	800b16c <HAL_I2C_Init+0x84>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4a7a      	ldr	r2, [pc, #488]	; (800b348 <HAL_I2C_Init+0x260>)
 800b160:	4293      	cmp	r3, r2
 800b162:	bf94      	ite	ls
 800b164:	2301      	movls	r3, #1
 800b166:	2300      	movhi	r3, #0
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	e006      	b.n	800b17a <HAL_I2C_Init+0x92>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4a77      	ldr	r2, [pc, #476]	; (800b34c <HAL_I2C_Init+0x264>)
 800b170:	4293      	cmp	r3, r2
 800b172:	bf94      	ite	ls
 800b174:	2301      	movls	r3, #1
 800b176:	2300      	movhi	r3, #0
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e0db      	b.n	800b33a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	4a72      	ldr	r2, [pc, #456]	; (800b350 <HAL_I2C_Init+0x268>)
 800b186:	fba2 2303 	umull	r2, r3, r2, r3
 800b18a:	0c9b      	lsrs	r3, r3, #18
 800b18c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4a64      	ldr	r2, [pc, #400]	; (800b344 <HAL_I2C_Init+0x25c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d802      	bhi.n	800b1bc <HAL_I2C_Init+0xd4>
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	e009      	b.n	800b1d0 <HAL_I2C_Init+0xe8>
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b1c2:	fb02 f303 	mul.w	r3, r2, r3
 800b1c6:	4a63      	ldr	r2, [pc, #396]	; (800b354 <HAL_I2C_Init+0x26c>)
 800b1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1cc:	099b      	lsrs	r3, r3, #6
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6812      	ldr	r2, [r2, #0]
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b1e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	4956      	ldr	r1, [pc, #344]	; (800b344 <HAL_I2C_Init+0x25c>)
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	d80d      	bhi.n	800b20c <HAL_I2C_Init+0x124>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	1e59      	subs	r1, r3, #1
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1fe:	3301      	adds	r3, #1
 800b200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b204:	2b04      	cmp	r3, #4
 800b206:	bf38      	it	cc
 800b208:	2304      	movcc	r3, #4
 800b20a:	e04f      	b.n	800b2ac <HAL_I2C_Init+0x1c4>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d111      	bne.n	800b238 <HAL_I2C_Init+0x150>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1e58      	subs	r0, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6859      	ldr	r1, [r3, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	440b      	add	r3, r1
 800b222:	fbb0 f3f3 	udiv	r3, r0, r3
 800b226:	3301      	adds	r3, #1
 800b228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bf0c      	ite	eq
 800b230:	2301      	moveq	r3, #1
 800b232:	2300      	movne	r3, #0
 800b234:	b2db      	uxtb	r3, r3
 800b236:	e012      	b.n	800b25e <HAL_I2C_Init+0x176>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	1e58      	subs	r0, r3, #1
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6859      	ldr	r1, [r3, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	440b      	add	r3, r1
 800b246:	0099      	lsls	r1, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b24e:	3301      	adds	r3, #1
 800b250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf0c      	ite	eq
 800b258:	2301      	moveq	r3, #1
 800b25a:	2300      	movne	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <HAL_I2C_Init+0x17e>
 800b262:	2301      	movs	r3, #1
 800b264:	e022      	b.n	800b2ac <HAL_I2C_Init+0x1c4>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10e      	bne.n	800b28c <HAL_I2C_Init+0x1a4>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	1e58      	subs	r0, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6859      	ldr	r1, [r3, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	440b      	add	r3, r1
 800b27c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b280:	3301      	adds	r3, #1
 800b282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b28a:	e00f      	b.n	800b2ac <HAL_I2C_Init+0x1c4>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1e58      	subs	r0, r3, #1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6859      	ldr	r1, [r3, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	0099      	lsls	r1, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	6809      	ldr	r1, [r1, #0]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69da      	ldr	r2, [r3, #28]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b2da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	6911      	ldr	r1, [r2, #16]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68d2      	ldr	r2, [r2, #12]
 800b2e6:	4311      	orrs	r1, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695a      	ldr	r2, [r3, #20]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	431a      	orrs	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	430a      	orrs	r2, r1
 800b30a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0201 	orr.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	000186a0 	.word	0x000186a0
 800b348:	001e847f 	.word	0x001e847f
 800b34c:	003d08ff 	.word	0x003d08ff
 800b350:	431bde83 	.word	0x431bde83
 800b354:	10624dd3 	.word	0x10624dd3

0800b358 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e021      	b.n	800b3ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2224      	movs	r2, #36	; 0x24
 800b36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0201 	bic.w	r2, r2, #1
 800b380:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f821 	bl	800b3ca <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b3d2:	bf00      	nop
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	817b      	strh	r3, [r7, #10]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	813b      	strh	r3, [r7, #8]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b3fa:	f7fe ff0d 	bl	800a218 <HAL_GetTick>
 800b3fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b20      	cmp	r3, #32
 800b40a:	f040 80d9 	bne.w	800b5c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	2319      	movs	r3, #25
 800b414:	2201      	movs	r2, #1
 800b416:	496d      	ldr	r1, [pc, #436]	; (800b5cc <HAL_I2C_Mem_Write+0x1ec>)
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 fc95 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b424:	2302      	movs	r3, #2
 800b426:	e0cc      	b.n	800b5c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d101      	bne.n	800b436 <HAL_I2C_Mem_Write+0x56>
 800b432:	2302      	movs	r3, #2
 800b434:	e0c5      	b.n	800b5c2 <HAL_I2C_Mem_Write+0x1e2>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d007      	beq.n	800b45c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0201 	orr.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b46a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2221      	movs	r2, #33	; 0x21
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2240      	movs	r2, #64	; 0x40
 800b478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6a3a      	ldr	r2, [r7, #32]
 800b486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b48c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b492:	b29a      	uxth	r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	4a4d      	ldr	r2, [pc, #308]	; (800b5d0 <HAL_I2C_Mem_Write+0x1f0>)
 800b49c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b49e:	88f8      	ldrh	r0, [r7, #6]
 800b4a0:	893a      	ldrh	r2, [r7, #8]
 800b4a2:	8979      	ldrh	r1, [r7, #10]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 fad0 	bl	800ba54 <I2C_RequestMemoryWrite>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d052      	beq.n	800b560 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e081      	b.n	800b5c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fd16 	bl	800bef4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00d      	beq.n	800b4ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d107      	bne.n	800b4e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e06b      	b.n	800b5c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	781a      	ldrb	r2, [r3, #0]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b504:	3b01      	subs	r3, #1
 800b506:	b29a      	uxth	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b510:	b29b      	uxth	r3, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	b29a      	uxth	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	2b04      	cmp	r3, #4
 800b526:	d11b      	bne.n	800b560 <HAL_I2C_Mem_Write+0x180>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d017      	beq.n	800b560 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54a:	3b01      	subs	r3, #1
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b556:	b29b      	uxth	r3, r3
 800b558:	3b01      	subs	r3, #1
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1aa      	bne.n	800b4be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 fd02 	bl	800bf76 <I2C_WaitOnBTFFlagUntilTimeout>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00d      	beq.n	800b594 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d107      	bne.n	800b590 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b58e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e016      	b.n	800b5c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e000      	b.n	800b5c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b5c0:	2302      	movs	r3, #2
  }
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	00100002 	.word	0x00100002
 800b5d0:	ffff0000 	.word	0xffff0000

0800b5d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08c      	sub	sp, #48	; 0x30
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	4608      	mov	r0, r1
 800b5de:	4611      	mov	r1, r2
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	817b      	strh	r3, [r7, #10]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	813b      	strh	r3, [r7, #8]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b5ee:	f7fe fe13 	bl	800a218 <HAL_GetTick>
 800b5f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b20      	cmp	r3, #32
 800b5fe:	f040 8208 	bne.w	800ba12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	2319      	movs	r3, #25
 800b608:	2201      	movs	r2, #1
 800b60a:	497b      	ldr	r1, [pc, #492]	; (800b7f8 <HAL_I2C_Mem_Read+0x224>)
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fb9b 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b618:	2302      	movs	r3, #2
 800b61a:	e1fb      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b622:	2b01      	cmp	r3, #1
 800b624:	d101      	bne.n	800b62a <HAL_I2C_Mem_Read+0x56>
 800b626:	2302      	movs	r3, #2
 800b628:	e1f4      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d007      	beq.n	800b650 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f042 0201 	orr.w	r2, r2, #1
 800b64e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b65e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2222      	movs	r2, #34	; 0x22
 800b664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2240      	movs	r2, #64	; 0x40
 800b66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b67a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4a5b      	ldr	r2, [pc, #364]	; (800b7fc <HAL_I2C_Mem_Read+0x228>)
 800b690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b692:	88f8      	ldrh	r0, [r7, #6]
 800b694:	893a      	ldrh	r2, [r7, #8]
 800b696:	8979      	ldrh	r1, [r7, #10]
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 fa6a 	bl	800bb7c <I2C_RequestMemoryRead>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e1b0      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d113      	bne.n	800b6e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	623b      	str	r3, [r7, #32]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	623b      	str	r3, [r7, #32]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	623b      	str	r3, [r7, #32]
 800b6ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	e184      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d11b      	bne.n	800b722 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	e164      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b726:	2b02      	cmp	r3, #2
 800b728:	d11b      	bne.n	800b762 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b738:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b74a:	2300      	movs	r3, #0
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	e144      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	617b      	str	r3, [r7, #20]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	617b      	str	r3, [r7, #20]
 800b776:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b778:	e138      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b77e:	2b03      	cmp	r3, #3
 800b780:	f200 80f1 	bhi.w	800b966 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d123      	bne.n	800b7d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 fc31 	bl	800bff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e139      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	691a      	ldr	r2, [r3, #16]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7d2:	e10b      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d14e      	bne.n	800b87a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4906      	ldr	r1, [pc, #24]	; (800b800 <HAL_I2C_Mem_Read+0x22c>)
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 faae 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d008      	beq.n	800b804 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e10e      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
 800b7f6:	bf00      	nop
 800b7f8:	00100002 	.word	0x00100002
 800b7fc:	ffff0000 	.word	0xffff0000
 800b800:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	691a      	ldr	r2, [r3, #16]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b830:	3b01      	subs	r3, #1
 800b832:	b29a      	uxth	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	3b01      	subs	r3, #1
 800b840:	b29a      	uxth	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	b2d2      	uxtb	r2, r2
 800b852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b862:	3b01      	subs	r3, #1
 800b864:	b29a      	uxth	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b86e:	b29b      	uxth	r3, r3
 800b870:	3b01      	subs	r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b878:	e0b8      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	2200      	movs	r2, #0
 800b882:	4966      	ldr	r1, [pc, #408]	; (800ba1c <HAL_I2C_Mem_Read+0x448>)
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 fa5f 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e0bf      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	691a      	ldr	r2, [r3, #16]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	b2d2      	uxtb	r2, r2
 800b8b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b6:	1c5a      	adds	r2, r3, #1
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8dc:	2200      	movs	r2, #0
 800b8de:	494f      	ldr	r1, [pc, #316]	; (800ba1c <HAL_I2C_Mem_Read+0x448>)
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 fa31 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e091      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	691a      	ldr	r2, [r3, #16]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b91c:	3b01      	subs	r3, #1
 800b91e:	b29a      	uxth	r2, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b928:	b29b      	uxth	r3, r3
 800b92a:	3b01      	subs	r3, #1
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	691a      	ldr	r2, [r3, #16]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94e:	3b01      	subs	r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3b01      	subs	r3, #1
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b964:	e042      	b.n	800b9ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 fb44 	bl	800bff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e04c      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	691a      	ldr	r2, [r3, #16]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	b2d2      	uxtb	r2, r2
 800b986:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b996:	3b01      	subs	r3, #1
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	f003 0304 	and.w	r3, r3, #4
 800b9b6:	2b04      	cmp	r3, #4
 800b9b8:	d118      	bne.n	800b9ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	b2d2      	uxtb	r2, r2
 800b9c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f47f aec2 	bne.w	800b77a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e000      	b.n	800ba14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ba12:	2302      	movs	r3, #2
  }
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3728      	adds	r7, #40	; 0x28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	00010004 	.word	0x00010004

0800ba20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba2e:	b2db      	uxtb	r3, r3
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	4611      	mov	r1, r2
 800ba60:	461a      	mov	r2, r3
 800ba62:	4603      	mov	r3, r0
 800ba64:	817b      	strh	r3, [r7, #10]
 800ba66:	460b      	mov	r3, r1
 800ba68:	813b      	strh	r3, [r7, #8]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 f95c 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00c      	beq.n	800bab0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e05f      	b.n	800bb70 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bab0:	897b      	ldrh	r3, [r7, #10]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800babe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	6a3a      	ldr	r2, [r7, #32]
 800bac4:	492c      	ldr	r1, [pc, #176]	; (800bb78 <I2C_RequestMemoryWrite+0x124>)
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 f995 	bl	800bdf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e04c      	b.n	800bb70 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800baec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baee:	6a39      	ldr	r1, [r7, #32]
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 f9ff 	bl	800bef4 <I2C_WaitOnTXEFlagUntilTimeout>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00d      	beq.n	800bb18 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d107      	bne.n	800bb14 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e02b      	b.n	800bb70 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb18:	88fb      	ldrh	r3, [r7, #6]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d105      	bne.n	800bb2a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bb1e:	893b      	ldrh	r3, [r7, #8]
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	611a      	str	r2, [r3, #16]
 800bb28:	e021      	b.n	800bb6e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bb2a:	893b      	ldrh	r3, [r7, #8]
 800bb2c:	0a1b      	lsrs	r3, r3, #8
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3a:	6a39      	ldr	r1, [r7, #32]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f000 f9d9 	bl	800bef4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00d      	beq.n	800bb64 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d107      	bne.n	800bb60 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e005      	b.n	800bb70 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bb64:	893b      	ldrh	r3, [r7, #8]
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	00010002 	.word	0x00010002

0800bb7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	4608      	mov	r0, r1
 800bb86:	4611      	mov	r1, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	817b      	strh	r3, [r7, #10]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	813b      	strh	r3, [r7, #8]
 800bb92:	4613      	mov	r3, r2
 800bb94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bba4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 f8c0 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00c      	beq.n	800bbe8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbe2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e0a9      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bbe8:	897b      	ldrh	r3, [r7, #10]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	461a      	mov	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bbf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	6a3a      	ldr	r2, [r7, #32]
 800bbfc:	4951      	ldr	r1, [pc, #324]	; (800bd44 <I2C_RequestMemoryRead+0x1c8>)
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 f8f9 	bl	800bdf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e096      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc0e:	2300      	movs	r3, #0
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	617b      	str	r3, [r7, #20]
 800bc22:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc26:	6a39      	ldr	r1, [r7, #32]
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 f963 	bl	800bef4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00d      	beq.n	800bc50 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d107      	bne.n	800bc4c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e075      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc50:	88fb      	ldrh	r3, [r7, #6]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d105      	bne.n	800bc62 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bc56:	893b      	ldrh	r3, [r7, #8]
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	611a      	str	r2, [r3, #16]
 800bc60:	e021      	b.n	800bca6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bc62:	893b      	ldrh	r3, [r7, #8]
 800bc64:	0a1b      	lsrs	r3, r3, #8
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc72:	6a39      	ldr	r1, [r7, #32]
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f93d 	bl	800bef4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00d      	beq.n	800bc9c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d107      	bne.n	800bc98 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e04f      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bc9c:	893b      	ldrh	r3, [r7, #8]
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca8:	6a39      	ldr	r1, [r7, #32]
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 f922 	bl	800bef4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00d      	beq.n	800bcd2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d107      	bne.n	800bcce <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e034      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 f82a 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00c      	beq.n	800bd14 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e013      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bd14:	897b      	ldrh	r3, [r7, #10]
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	f043 0301 	orr.w	r3, r3, #1
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	6a3a      	ldr	r2, [r7, #32]
 800bd28:	4906      	ldr	r1, [pc, #24]	; (800bd44 <I2C_RequestMemoryRead+0x1c8>)
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 f863 	bl	800bdf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	00010002 	.word	0x00010002

0800bd48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	4613      	mov	r3, r2
 800bd56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd58:	e025      	b.n	800bda6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd60:	d021      	beq.n	800bda6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd62:	f7fe fa59 	bl	800a218 <HAL_GetTick>
 800bd66:	4602      	mov	r2, r0
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d302      	bcc.n	800bd78 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d116      	bne.n	800bda6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2220      	movs	r2, #32
 800bd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd92:	f043 0220 	orr.w	r2, r3, #32
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e023      	b.n	800bdee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	0c1b      	lsrs	r3, r3, #16
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d10d      	bne.n	800bdcc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	43da      	mvns	r2, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bf0c      	ite	eq
 800bdc2:	2301      	moveq	r3, #1
 800bdc4:	2300      	movne	r3, #0
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	461a      	mov	r2, r3
 800bdca:	e00c      	b.n	800bde6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	43da      	mvns	r2, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	bf0c      	ite	eq
 800bdde:	2301      	moveq	r3, #1
 800bde0:	2300      	movne	r3, #0
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	461a      	mov	r2, r3
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d0b6      	beq.n	800bd5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	60f8      	str	r0, [r7, #12]
 800bdfe:	60b9      	str	r1, [r7, #8]
 800be00:	607a      	str	r2, [r7, #4]
 800be02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be04:	e051      	b.n	800beaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be14:	d123      	bne.n	800be5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800be2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2220      	movs	r2, #32
 800be3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f043 0204 	orr.w	r2, r3, #4
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e046      	b.n	800beec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be64:	d021      	beq.n	800beaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be66:	f7fe f9d7 	bl	800a218 <HAL_GetTick>
 800be6a:	4602      	mov	r2, r0
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	429a      	cmp	r2, r3
 800be74:	d302      	bcc.n	800be7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d116      	bne.n	800beaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2220      	movs	r2, #32
 800be86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be96:	f043 0220 	orr.w	r2, r3, #32
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e020      	b.n	800beec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	0c1b      	lsrs	r3, r3, #16
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d10c      	bne.n	800bece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	43da      	mvns	r2, r3
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4013      	ands	r3, r2
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bf14      	ite	ne
 800bec6:	2301      	movne	r3, #1
 800bec8:	2300      	moveq	r3, #0
 800beca:	b2db      	uxtb	r3, r3
 800becc:	e00b      	b.n	800bee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	43da      	mvns	r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	4013      	ands	r3, r2
 800beda:	b29b      	uxth	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bf14      	ite	ne
 800bee0:	2301      	movne	r3, #1
 800bee2:	2300      	moveq	r3, #0
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d18d      	bne.n	800be06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf00:	e02d      	b.n	800bf5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f000 f8ce 	bl	800c0a4 <I2C_IsAcknowledgeFailed>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e02d      	b.n	800bf6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf18:	d021      	beq.n	800bf5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf1a:	f7fe f97d 	bl	800a218 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d302      	bcc.n	800bf30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d116      	bne.n	800bf5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	f043 0220 	orr.w	r2, r3, #32
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e007      	b.n	800bf6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf68:	2b80      	cmp	r3, #128	; 0x80
 800bf6a:	d1ca      	bne.n	800bf02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf82:	e02d      	b.n	800bfe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 f88d 	bl	800c0a4 <I2C_IsAcknowledgeFailed>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e02d      	b.n	800bff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf9a:	d021      	beq.n	800bfe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf9c:	f7fe f93c 	bl	800a218 <HAL_GetTick>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d302      	bcc.n	800bfb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d116      	bne.n	800bfe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfcc:	f043 0220 	orr.w	r2, r3, #32
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e007      	b.n	800bff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	f003 0304 	and.w	r3, r3, #4
 800bfea:	2b04      	cmp	r3, #4
 800bfec:	d1ca      	bne.n	800bf84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c004:	e042      	b.n	800c08c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	f003 0310 	and.w	r3, r3, #16
 800c010:	2b10      	cmp	r3, #16
 800c012:	d119      	bne.n	800c048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f06f 0210 	mvn.w	r2, #16
 800c01c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2220      	movs	r2, #32
 800c028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e029      	b.n	800c09c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c048:	f7fe f8e6 	bl	800a218 <HAL_GetTick>
 800c04c:	4602      	mov	r2, r0
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	429a      	cmp	r2, r3
 800c056:	d302      	bcc.n	800c05e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d116      	bne.n	800c08c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2220      	movs	r2, #32
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c078:	f043 0220 	orr.w	r2, r3, #32
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e007      	b.n	800c09c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c096:	2b40      	cmp	r3, #64	; 0x40
 800c098:	d1b5      	bne.n	800c006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ba:	d11b      	bne.n	800c0f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c0c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2220      	movs	r2, #32
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e0:	f043 0204 	orr.w	r2, r3, #4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e000      	b.n	800c0f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
	...

0800c104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d101      	bne.n	800c116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e25b      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0301 	and.w	r3, r3, #1
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d075      	beq.n	800c20e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c122:	4ba3      	ldr	r3, [pc, #652]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f003 030c 	and.w	r3, r3, #12
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	d00c      	beq.n	800c148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c12e:	4ba0      	ldr	r3, [pc, #640]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c136:	2b08      	cmp	r3, #8
 800c138:	d112      	bne.n	800c160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c13a:	4b9d      	ldr	r3, [pc, #628]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c146:	d10b      	bne.n	800c160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c148:	4b99      	ldr	r3, [pc, #612]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d05b      	beq.n	800c20c <HAL_RCC_OscConfig+0x108>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d157      	bne.n	800c20c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e236      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c168:	d106      	bne.n	800c178 <HAL_RCC_OscConfig+0x74>
 800c16a:	4b91      	ldr	r3, [pc, #580]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a90      	ldr	r2, [pc, #576]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	e01d      	b.n	800c1b4 <HAL_RCC_OscConfig+0xb0>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c180:	d10c      	bne.n	800c19c <HAL_RCC_OscConfig+0x98>
 800c182:	4b8b      	ldr	r3, [pc, #556]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a8a      	ldr	r2, [pc, #552]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	4b88      	ldr	r3, [pc, #544]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a87      	ldr	r2, [pc, #540]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c198:	6013      	str	r3, [r2, #0]
 800c19a:	e00b      	b.n	800c1b4 <HAL_RCC_OscConfig+0xb0>
 800c19c:	4b84      	ldr	r3, [pc, #528]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a83      	ldr	r2, [pc, #524]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	4b81      	ldr	r3, [pc, #516]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a80      	ldr	r2, [pc, #512]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c1ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d013      	beq.n	800c1e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1bc:	f7fe f82c 	bl	800a218 <HAL_GetTick>
 800c1c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1c2:	e008      	b.n	800c1d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c1c4:	f7fe f828 	bl	800a218 <HAL_GetTick>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	2b64      	cmp	r3, #100	; 0x64
 800c1d0:	d901      	bls.n	800c1d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	e1fb      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1d6:	4b76      	ldr	r3, [pc, #472]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0f0      	beq.n	800c1c4 <HAL_RCC_OscConfig+0xc0>
 800c1e2:	e014      	b.n	800c20e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1e4:	f7fe f818 	bl	800a218 <HAL_GetTick>
 800c1e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c1ea:	e008      	b.n	800c1fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c1ec:	f7fe f814 	bl	800a218 <HAL_GetTick>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	2b64      	cmp	r3, #100	; 0x64
 800c1f8:	d901      	bls.n	800c1fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e1e7      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c1fe:	4b6c      	ldr	r3, [pc, #432]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1f0      	bne.n	800c1ec <HAL_RCC_OscConfig+0xe8>
 800c20a:	e000      	b.n	800c20e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c20c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 0302 	and.w	r3, r3, #2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d063      	beq.n	800c2e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c21a:	4b65      	ldr	r3, [pc, #404]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f003 030c 	and.w	r3, r3, #12
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00b      	beq.n	800c23e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c226:	4b62      	ldr	r3, [pc, #392]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c22e:	2b08      	cmp	r3, #8
 800c230:	d11c      	bne.n	800c26c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c232:	4b5f      	ldr	r3, [pc, #380]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d116      	bne.n	800c26c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c23e:	4b5c      	ldr	r3, [pc, #368]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 0302 	and.w	r3, r3, #2
 800c246:	2b00      	cmp	r3, #0
 800c248:	d005      	beq.n	800c256 <HAL_RCC_OscConfig+0x152>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d001      	beq.n	800c256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e1bb      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c256:	4b56      	ldr	r3, [pc, #344]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	4952      	ldr	r1, [pc, #328]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c266:	4313      	orrs	r3, r2
 800c268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c26a:	e03a      	b.n	800c2e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d020      	beq.n	800c2b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c274:	4b4f      	ldr	r3, [pc, #316]	; (800c3b4 <HAL_RCC_OscConfig+0x2b0>)
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c27a:	f7fd ffcd 	bl	800a218 <HAL_GetTick>
 800c27e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c280:	e008      	b.n	800c294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c282:	f7fd ffc9 	bl	800a218 <HAL_GetTick>
 800c286:	4602      	mov	r2, r0
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d901      	bls.n	800c294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e19c      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c294:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 0302 	and.w	r3, r3, #2
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0f0      	beq.n	800c282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2a0:	4b43      	ldr	r3, [pc, #268]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	00db      	lsls	r3, r3, #3
 800c2ae:	4940      	ldr	r1, [pc, #256]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	600b      	str	r3, [r1, #0]
 800c2b4:	e015      	b.n	800c2e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c2b6:	4b3f      	ldr	r3, [pc, #252]	; (800c3b4 <HAL_RCC_OscConfig+0x2b0>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2bc:	f7fd ffac 	bl	800a218 <HAL_GetTick>
 800c2c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c2c2:	e008      	b.n	800c2d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c2c4:	f7fd ffa8 	bl	800a218 <HAL_GetTick>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d901      	bls.n	800c2d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e17b      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c2d6:	4b36      	ldr	r3, [pc, #216]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0302 	and.w	r3, r3, #2
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1f0      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0308 	and.w	r3, r3, #8
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d030      	beq.n	800c350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d016      	beq.n	800c324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c2f6:	4b30      	ldr	r3, [pc, #192]	; (800c3b8 <HAL_RCC_OscConfig+0x2b4>)
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2fc:	f7fd ff8c 	bl	800a218 <HAL_GetTick>
 800c300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c302:	e008      	b.n	800c316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c304:	f7fd ff88 	bl	800a218 <HAL_GetTick>
 800c308:	4602      	mov	r2, r0
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d901      	bls.n	800c316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c312:	2303      	movs	r3, #3
 800c314:	e15b      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c316:	4b26      	ldr	r3, [pc, #152]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c31a:	f003 0302 	and.w	r3, r3, #2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0f0      	beq.n	800c304 <HAL_RCC_OscConfig+0x200>
 800c322:	e015      	b.n	800c350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c324:	4b24      	ldr	r3, [pc, #144]	; (800c3b8 <HAL_RCC_OscConfig+0x2b4>)
 800c326:	2200      	movs	r2, #0
 800c328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c32a:	f7fd ff75 	bl	800a218 <HAL_GetTick>
 800c32e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c330:	e008      	b.n	800c344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c332:	f7fd ff71 	bl	800a218 <HAL_GetTick>
 800c336:	4602      	mov	r2, r0
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d901      	bls.n	800c344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e144      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c344:	4b1a      	ldr	r3, [pc, #104]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c348:	f003 0302 	and.w	r3, r3, #2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1f0      	bne.n	800c332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0304 	and.w	r3, r3, #4
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 80a0 	beq.w	800c49e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c35e:	2300      	movs	r3, #0
 800c360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c362:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10f      	bne.n	800c38e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c36e:	2300      	movs	r3, #0
 800c370:	60bb      	str	r3, [r7, #8]
 800c372:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c376:	4a0e      	ldr	r2, [pc, #56]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c37c:	6413      	str	r3, [r2, #64]	; 0x40
 800c37e:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <HAL_RCC_OscConfig+0x2ac>)
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c386:	60bb      	str	r3, [r7, #8]
 800c388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c38a:	2301      	movs	r3, #1
 800c38c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <HAL_RCC_OscConfig+0x2b8>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c396:	2b00      	cmp	r3, #0
 800c398:	d121      	bne.n	800c3de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c39a:	4b08      	ldr	r3, [pc, #32]	; (800c3bc <HAL_RCC_OscConfig+0x2b8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a07      	ldr	r2, [pc, #28]	; (800c3bc <HAL_RCC_OscConfig+0x2b8>)
 800c3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c3a6:	f7fd ff37 	bl	800a218 <HAL_GetTick>
 800c3aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c3ac:	e011      	b.n	800c3d2 <HAL_RCC_OscConfig+0x2ce>
 800c3ae:	bf00      	nop
 800c3b0:	40023800 	.word	0x40023800
 800c3b4:	42470000 	.word	0x42470000
 800c3b8:	42470e80 	.word	0x42470e80
 800c3bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3c0:	f7fd ff2a 	bl	800a218 <HAL_GetTick>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d901      	bls.n	800c3d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	e0fd      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c3d2:	4b81      	ldr	r3, [pc, #516]	; (800c5d8 <HAL_RCC_OscConfig+0x4d4>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d0f0      	beq.n	800c3c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d106      	bne.n	800c3f4 <HAL_RCC_OscConfig+0x2f0>
 800c3e6:	4b7d      	ldr	r3, [pc, #500]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ea:	4a7c      	ldr	r2, [pc, #496]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c3ec:	f043 0301 	orr.w	r3, r3, #1
 800c3f0:	6713      	str	r3, [r2, #112]	; 0x70
 800c3f2:	e01c      	b.n	800c42e <HAL_RCC_OscConfig+0x32a>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	2b05      	cmp	r3, #5
 800c3fa:	d10c      	bne.n	800c416 <HAL_RCC_OscConfig+0x312>
 800c3fc:	4b77      	ldr	r3, [pc, #476]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c400:	4a76      	ldr	r2, [pc, #472]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c402:	f043 0304 	orr.w	r3, r3, #4
 800c406:	6713      	str	r3, [r2, #112]	; 0x70
 800c408:	4b74      	ldr	r3, [pc, #464]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c40c:	4a73      	ldr	r2, [pc, #460]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c40e:	f043 0301 	orr.w	r3, r3, #1
 800c412:	6713      	str	r3, [r2, #112]	; 0x70
 800c414:	e00b      	b.n	800c42e <HAL_RCC_OscConfig+0x32a>
 800c416:	4b71      	ldr	r3, [pc, #452]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41a:	4a70      	ldr	r2, [pc, #448]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c41c:	f023 0301 	bic.w	r3, r3, #1
 800c420:	6713      	str	r3, [r2, #112]	; 0x70
 800c422:	4b6e      	ldr	r3, [pc, #440]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c426:	4a6d      	ldr	r2, [pc, #436]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c428:	f023 0304 	bic.w	r3, r3, #4
 800c42c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d015      	beq.n	800c462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c436:	f7fd feef 	bl	800a218 <HAL_GetTick>
 800c43a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c43c:	e00a      	b.n	800c454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c43e:	f7fd feeb 	bl	800a218 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	f241 3288 	movw	r2, #5000	; 0x1388
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d901      	bls.n	800c454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	e0bc      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c454:	4b61      	ldr	r3, [pc, #388]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0ee      	beq.n	800c43e <HAL_RCC_OscConfig+0x33a>
 800c460:	e014      	b.n	800c48c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c462:	f7fd fed9 	bl	800a218 <HAL_GetTick>
 800c466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c468:	e00a      	b.n	800c480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c46a:	f7fd fed5 	bl	800a218 <HAL_GetTick>
 800c46e:	4602      	mov	r2, r0
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	f241 3288 	movw	r2, #5000	; 0x1388
 800c478:	4293      	cmp	r3, r2
 800c47a:	d901      	bls.n	800c480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c47c:	2303      	movs	r3, #3
 800c47e:	e0a6      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c480:	4b56      	ldr	r3, [pc, #344]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c484:	f003 0302 	and.w	r3, r3, #2
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1ee      	bne.n	800c46a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d105      	bne.n	800c49e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c492:	4b52      	ldr	r3, [pc, #328]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c496:	4a51      	ldr	r2, [pc, #324]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c49c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 8092 	beq.w	800c5cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c4a8:	4b4c      	ldr	r3, [pc, #304]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f003 030c 	and.w	r3, r3, #12
 800c4b0:	2b08      	cmp	r3, #8
 800c4b2:	d05c      	beq.n	800c56e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d141      	bne.n	800c540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4bc:	4b48      	ldr	r3, [pc, #288]	; (800c5e0 <HAL_RCC_OscConfig+0x4dc>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4c2:	f7fd fea9 	bl	800a218 <HAL_GetTick>
 800c4c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4c8:	e008      	b.n	800c4dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4ca:	f7fd fea5 	bl	800a218 <HAL_GetTick>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d901      	bls.n	800c4dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e078      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4dc:	4b3f      	ldr	r3, [pc, #252]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1f0      	bne.n	800c4ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	69da      	ldr	r2, [r3, #28]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	019b      	lsls	r3, r3, #6
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fe:	085b      	lsrs	r3, r3, #1
 800c500:	3b01      	subs	r3, #1
 800c502:	041b      	lsls	r3, r3, #16
 800c504:	431a      	orrs	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50a:	061b      	lsls	r3, r3, #24
 800c50c:	4933      	ldr	r1, [pc, #204]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c50e:	4313      	orrs	r3, r2
 800c510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c512:	4b33      	ldr	r3, [pc, #204]	; (800c5e0 <HAL_RCC_OscConfig+0x4dc>)
 800c514:	2201      	movs	r2, #1
 800c516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c518:	f7fd fe7e 	bl	800a218 <HAL_GetTick>
 800c51c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c51e:	e008      	b.n	800c532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c520:	f7fd fe7a 	bl	800a218 <HAL_GetTick>
 800c524:	4602      	mov	r2, r0
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d901      	bls.n	800c532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e04d      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c532:	4b2a      	ldr	r3, [pc, #168]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0f0      	beq.n	800c520 <HAL_RCC_OscConfig+0x41c>
 800c53e:	e045      	b.n	800c5cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c540:	4b27      	ldr	r3, [pc, #156]	; (800c5e0 <HAL_RCC_OscConfig+0x4dc>)
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c546:	f7fd fe67 	bl	800a218 <HAL_GetTick>
 800c54a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c54c:	e008      	b.n	800c560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c54e:	f7fd fe63 	bl	800a218 <HAL_GetTick>
 800c552:	4602      	mov	r2, r0
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d901      	bls.n	800c560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e036      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c560:	4b1e      	ldr	r3, [pc, #120]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1f0      	bne.n	800c54e <HAL_RCC_OscConfig+0x44a>
 800c56c:	e02e      	b.n	800c5cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d101      	bne.n	800c57a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e029      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c57a:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <HAL_RCC_OscConfig+0x4d8>)
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d11c      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c598:	429a      	cmp	r2, r3
 800c59a:	d115      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d10d      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d106      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d001      	beq.n	800c5cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e000      	b.n	800c5ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	40007000 	.word	0x40007000
 800c5dc:	40023800 	.word	0x40023800
 800c5e0:	42470060 	.word	0x42470060

0800c5e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e0cc      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c5f8:	4b68      	ldr	r3, [pc, #416]	; (800c79c <HAL_RCC_ClockConfig+0x1b8>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 030f 	and.w	r3, r3, #15
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	429a      	cmp	r2, r3
 800c604:	d90c      	bls.n	800c620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c606:	4b65      	ldr	r3, [pc, #404]	; (800c79c <HAL_RCC_ClockConfig+0x1b8>)
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c60e:	4b63      	ldr	r3, [pc, #396]	; (800c79c <HAL_RCC_ClockConfig+0x1b8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 030f 	and.w	r3, r3, #15
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d001      	beq.n	800c620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e0b8      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0302 	and.w	r3, r3, #2
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d020      	beq.n	800c66e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 0304 	and.w	r3, r3, #4
 800c634:	2b00      	cmp	r3, #0
 800c636:	d005      	beq.n	800c644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c638:	4b59      	ldr	r3, [pc, #356]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	4a58      	ldr	r2, [pc, #352]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c63e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0308 	and.w	r3, r3, #8
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d005      	beq.n	800c65c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c650:	4b53      	ldr	r3, [pc, #332]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	4a52      	ldr	r2, [pc, #328]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c65a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c65c:	4b50      	ldr	r3, [pc, #320]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	494d      	ldr	r1, [pc, #308]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	2b00      	cmp	r3, #0
 800c678:	d044      	beq.n	800c704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d107      	bne.n	800c692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c682:	4b47      	ldr	r3, [pc, #284]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d119      	bne.n	800c6c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e07f      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d003      	beq.n	800c6a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d107      	bne.n	800c6b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6a2:	4b3f      	ldr	r3, [pc, #252]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d109      	bne.n	800c6c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e06f      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6b2:	4b3b      	ldr	r3, [pc, #236]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e067      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c6c2:	4b37      	ldr	r3, [pc, #220]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f023 0203 	bic.w	r2, r3, #3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	4934      	ldr	r1, [pc, #208]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c6d4:	f7fd fda0 	bl	800a218 <HAL_GetTick>
 800c6d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6da:	e00a      	b.n	800c6f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6dc:	f7fd fd9c 	bl	800a218 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d901      	bls.n	800c6f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e04f      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6f2:	4b2b      	ldr	r3, [pc, #172]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	f003 020c 	and.w	r2, r3, #12
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	429a      	cmp	r2, r3
 800c702:	d1eb      	bne.n	800c6dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c704:	4b25      	ldr	r3, [pc, #148]	; (800c79c <HAL_RCC_ClockConfig+0x1b8>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d20c      	bcs.n	800c72c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c712:	4b22      	ldr	r3, [pc, #136]	; (800c79c <HAL_RCC_ClockConfig+0x1b8>)
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	b2d2      	uxtb	r2, r2
 800c718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c71a:	4b20      	ldr	r3, [pc, #128]	; (800c79c <HAL_RCC_ClockConfig+0x1b8>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 030f 	and.w	r3, r3, #15
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d001      	beq.n	800c72c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	e032      	b.n	800c792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d008      	beq.n	800c74a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c738:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	4916      	ldr	r1, [pc, #88]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c746:	4313      	orrs	r3, r2
 800c748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0308 	and.w	r3, r3, #8
 800c752:	2b00      	cmp	r3, #0
 800c754:	d009      	beq.n	800c76a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c756:	4b12      	ldr	r3, [pc, #72]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	490e      	ldr	r1, [pc, #56]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c766:	4313      	orrs	r3, r2
 800c768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c76a:	f000 f821 	bl	800c7b0 <HAL_RCC_GetSysClockFreq>
 800c76e:	4601      	mov	r1, r0
 800c770:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	091b      	lsrs	r3, r3, #4
 800c776:	f003 030f 	and.w	r3, r3, #15
 800c77a:	4a0a      	ldr	r2, [pc, #40]	; (800c7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800c77c:	5cd3      	ldrb	r3, [r2, r3]
 800c77e:	fa21 f303 	lsr.w	r3, r1, r3
 800c782:	4a09      	ldr	r2, [pc, #36]	; (800c7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800c784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c786:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <HAL_RCC_ClockConfig+0x1c8>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fd fd00 	bl	800a190 <HAL_InitTick>

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	40023c00 	.word	0x40023c00
 800c7a0:	40023800 	.word	0x40023800
 800c7a4:	0800e5a4 	.word	0x0800e5a4
 800c7a8:	20000000 	.word	0x20000000
 800c7ac:	200000f4 	.word	0x200000f4

0800c7b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	607b      	str	r3, [r7, #4]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7c6:	4b63      	ldr	r3, [pc, #396]	; (800c954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	f003 030c 	and.w	r3, r3, #12
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	d007      	beq.n	800c7e2 <HAL_RCC_GetSysClockFreq+0x32>
 800c7d2:	2b08      	cmp	r3, #8
 800c7d4:	d008      	beq.n	800c7e8 <HAL_RCC_GetSysClockFreq+0x38>
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f040 80b4 	bne.w	800c944 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c7dc:	4b5e      	ldr	r3, [pc, #376]	; (800c958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c7de:	60bb      	str	r3, [r7, #8]
       break;
 800c7e0:	e0b3      	b.n	800c94a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c7e2:	4b5e      	ldr	r3, [pc, #376]	; (800c95c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c7e4:	60bb      	str	r3, [r7, #8]
      break;
 800c7e6:	e0b0      	b.n	800c94a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c7e8:	4b5a      	ldr	r3, [pc, #360]	; (800c954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c7f2:	4b58      	ldr	r3, [pc, #352]	; (800c954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d04a      	beq.n	800c894 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7fe:	4b55      	ldr	r3, [pc, #340]	; (800c954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	099b      	lsrs	r3, r3, #6
 800c804:	f04f 0400 	mov.w	r4, #0
 800c808:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c80c:	f04f 0200 	mov.w	r2, #0
 800c810:	ea03 0501 	and.w	r5, r3, r1
 800c814:	ea04 0602 	and.w	r6, r4, r2
 800c818:	4629      	mov	r1, r5
 800c81a:	4632      	mov	r2, r6
 800c81c:	f04f 0300 	mov.w	r3, #0
 800c820:	f04f 0400 	mov.w	r4, #0
 800c824:	0154      	lsls	r4, r2, #5
 800c826:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c82a:	014b      	lsls	r3, r1, #5
 800c82c:	4619      	mov	r1, r3
 800c82e:	4622      	mov	r2, r4
 800c830:	1b49      	subs	r1, r1, r5
 800c832:	eb62 0206 	sbc.w	r2, r2, r6
 800c836:	f04f 0300 	mov.w	r3, #0
 800c83a:	f04f 0400 	mov.w	r4, #0
 800c83e:	0194      	lsls	r4, r2, #6
 800c840:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c844:	018b      	lsls	r3, r1, #6
 800c846:	1a5b      	subs	r3, r3, r1
 800c848:	eb64 0402 	sbc.w	r4, r4, r2
 800c84c:	f04f 0100 	mov.w	r1, #0
 800c850:	f04f 0200 	mov.w	r2, #0
 800c854:	00e2      	lsls	r2, r4, #3
 800c856:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c85a:	00d9      	lsls	r1, r3, #3
 800c85c:	460b      	mov	r3, r1
 800c85e:	4614      	mov	r4, r2
 800c860:	195b      	adds	r3, r3, r5
 800c862:	eb44 0406 	adc.w	r4, r4, r6
 800c866:	f04f 0100 	mov.w	r1, #0
 800c86a:	f04f 0200 	mov.w	r2, #0
 800c86e:	0262      	lsls	r2, r4, #9
 800c870:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c874:	0259      	lsls	r1, r3, #9
 800c876:	460b      	mov	r3, r1
 800c878:	4614      	mov	r4, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	4621      	mov	r1, r4
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f04f 0400 	mov.w	r4, #0
 800c884:	461a      	mov	r2, r3
 800c886:	4623      	mov	r3, r4
 800c888:	f7f3 fe68 	bl	800055c <__aeabi_uldivmod>
 800c88c:	4603      	mov	r3, r0
 800c88e:	460c      	mov	r4, r1
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	e049      	b.n	800c928 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c894:	4b2f      	ldr	r3, [pc, #188]	; (800c954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	099b      	lsrs	r3, r3, #6
 800c89a:	f04f 0400 	mov.w	r4, #0
 800c89e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c8a2:	f04f 0200 	mov.w	r2, #0
 800c8a6:	ea03 0501 	and.w	r5, r3, r1
 800c8aa:	ea04 0602 	and.w	r6, r4, r2
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	4632      	mov	r2, r6
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	f04f 0400 	mov.w	r4, #0
 800c8ba:	0154      	lsls	r4, r2, #5
 800c8bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c8c0:	014b      	lsls	r3, r1, #5
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	1b49      	subs	r1, r1, r5
 800c8c8:	eb62 0206 	sbc.w	r2, r2, r6
 800c8cc:	f04f 0300 	mov.w	r3, #0
 800c8d0:	f04f 0400 	mov.w	r4, #0
 800c8d4:	0194      	lsls	r4, r2, #6
 800c8d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c8da:	018b      	lsls	r3, r1, #6
 800c8dc:	1a5b      	subs	r3, r3, r1
 800c8de:	eb64 0402 	sbc.w	r4, r4, r2
 800c8e2:	f04f 0100 	mov.w	r1, #0
 800c8e6:	f04f 0200 	mov.w	r2, #0
 800c8ea:	00e2      	lsls	r2, r4, #3
 800c8ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c8f0:	00d9      	lsls	r1, r3, #3
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	195b      	adds	r3, r3, r5
 800c8f8:	eb44 0406 	adc.w	r4, r4, r6
 800c8fc:	f04f 0100 	mov.w	r1, #0
 800c900:	f04f 0200 	mov.w	r2, #0
 800c904:	02a2      	lsls	r2, r4, #10
 800c906:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c90a:	0299      	lsls	r1, r3, #10
 800c90c:	460b      	mov	r3, r1
 800c90e:	4614      	mov	r4, r2
 800c910:	4618      	mov	r0, r3
 800c912:	4621      	mov	r1, r4
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f04f 0400 	mov.w	r4, #0
 800c91a:	461a      	mov	r2, r3
 800c91c:	4623      	mov	r3, r4
 800c91e:	f7f3 fe1d 	bl	800055c <__aeabi_uldivmod>
 800c922:	4603      	mov	r3, r0
 800c924:	460c      	mov	r4, r1
 800c926:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	0c1b      	lsrs	r3, r3, #16
 800c92e:	f003 0303 	and.w	r3, r3, #3
 800c932:	3301      	adds	r3, #1
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c940:	60bb      	str	r3, [r7, #8]
      break;
 800c942:	e002      	b.n	800c94a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c944:	4b04      	ldr	r3, [pc, #16]	; (800c958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c946:	60bb      	str	r3, [r7, #8]
      break;
 800c948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c94a:	68bb      	ldr	r3, [r7, #8]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c954:	40023800 	.word	0x40023800
 800c958:	00f42400 	.word	0x00f42400
 800c95c:	007a1200 	.word	0x007a1200

0800c960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c960:	b480      	push	{r7}
 800c962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c964:	4b03      	ldr	r3, [pc, #12]	; (800c974 <HAL_RCC_GetHCLKFreq+0x14>)
 800c966:	681b      	ldr	r3, [r3, #0]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20000000 	.word	0x20000000

0800c978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c97c:	f7ff fff0 	bl	800c960 <HAL_RCC_GetHCLKFreq>
 800c980:	4601      	mov	r1, r0
 800c982:	4b05      	ldr	r3, [pc, #20]	; (800c998 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	0a9b      	lsrs	r3, r3, #10
 800c988:	f003 0307 	and.w	r3, r3, #7
 800c98c:	4a03      	ldr	r2, [pc, #12]	; (800c99c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c98e:	5cd3      	ldrb	r3, [r2, r3]
 800c990:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c994:	4618      	mov	r0, r3
 800c996:	bd80      	pop	{r7, pc}
 800c998:	40023800 	.word	0x40023800
 800c99c:	0800e5b4 	.word	0x0800e5b4

0800c9a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c9a4:	f7ff ffdc 	bl	800c960 <HAL_RCC_GetHCLKFreq>
 800c9a8:	4601      	mov	r1, r0
 800c9aa:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	0b5b      	lsrs	r3, r3, #13
 800c9b0:	f003 0307 	and.w	r3, r3, #7
 800c9b4:	4a03      	ldr	r2, [pc, #12]	; (800c9c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c9b6:	5cd3      	ldrb	r3, [r2, r3]
 800c9b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	40023800 	.word	0x40023800
 800c9c4:	0800e5b4 	.word	0x0800e5b4

0800c9c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e04a      	b.n	800ca70 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d111      	bne.n	800ca0a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa70 	bl	800ced4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d102      	bne.n	800ca02 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a1e      	ldr	r2, [pc, #120]	; (800ca78 <HAL_UART_Init+0xb0>)
 800ca00:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2224      	movs	r2, #36	; 0x24
 800ca0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68da      	ldr	r2, [r3, #12]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fc8a 	bl	800d33c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	691a      	ldr	r2, [r3, #16]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	695a      	ldr	r2, [r3, #20]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68da      	ldr	r2, [r3, #12]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	08000c15 	.word	0x08000c15

0800ca7c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	4613      	mov	r3, r2
 800ca88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b20      	cmp	r3, #32
 800ca94:	d153      	bne.n	800cb3e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <HAL_UART_Transmit_DMA+0x26>
 800ca9c:	88fb      	ldrh	r3, [r7, #6]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e04c      	b.n	800cb40 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800caac:	2b01      	cmp	r3, #1
 800caae:	d101      	bne.n	800cab4 <HAL_UART_Transmit_DMA+0x38>
 800cab0:	2302      	movs	r3, #2
 800cab2:	e045      	b.n	800cb40 <HAL_UART_Transmit_DMA+0xc4>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	88fa      	ldrh	r2, [r7, #6]
 800cac6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	88fa      	ldrh	r2, [r7, #6]
 800cacc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2221      	movs	r2, #33	; 0x21
 800cad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae0:	4a19      	ldr	r2, [pc, #100]	; (800cb48 <HAL_UART_Transmit_DMA+0xcc>)
 800cae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae8:	4a18      	ldr	r2, [pc, #96]	; (800cb4c <HAL_UART_Transmit_DMA+0xd0>)
 800caea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf0:	4a17      	ldr	r2, [pc, #92]	; (800cb50 <HAL_UART_Transmit_DMA+0xd4>)
 800caf2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf8:	2200      	movs	r2, #0
 800cafa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800cafc:	f107 0308 	add.w	r3, r7, #8
 800cb00:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	6819      	ldr	r1, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	461a      	mov	r2, r3
 800cb12:	88fb      	ldrh	r3, [r7, #6]
 800cb14:	f7fd fd6e 	bl	800a5f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb20:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	695a      	ldr	r2, [r3, #20]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb38:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e000      	b.n	800cb40 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800cb3e:	2302      	movs	r3, #2
  }
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	0800cf39 	.word	0x0800cf39
 800cb4c:	0800cf8d 	.word	0x0800cf8d
 800cb50:	0800d033 	.word	0x0800d033

0800cb54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	d166      	bne.n	800cc3c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d002      	beq.n	800cb7a <HAL_UART_Receive_DMA+0x26>
 800cb74:	88fb      	ldrh	r3, [r7, #6]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e05f      	b.n	800cc3e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d101      	bne.n	800cb8c <HAL_UART_Receive_DMA+0x38>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e058      	b.n	800cc3e <HAL_UART_Receive_DMA+0xea>
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	88fa      	ldrh	r2, [r7, #6]
 800cb9e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2222      	movs	r2, #34	; 0x22
 800cbaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb2:	4a25      	ldr	r2, [pc, #148]	; (800cc48 <HAL_UART_Receive_DMA+0xf4>)
 800cbb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbba:	4a24      	ldr	r2, [pc, #144]	; (800cc4c <HAL_UART_Receive_DMA+0xf8>)
 800cbbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc2:	4a23      	ldr	r2, [pc, #140]	; (800cc50 <HAL_UART_Receive_DMA+0xfc>)
 800cbc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbca:	2200      	movs	r2, #0
 800cbcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800cbce:	f107 0308 	add.w	r3, r7, #8
 800cbd2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	4619      	mov	r1, r3
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	88fb      	ldrh	r3, [r7, #6]
 800cbe6:	f7fd fd05 	bl	800a5f4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800cbea:	2300      	movs	r3, #0
 800cbec:	613b      	str	r3, [r7, #16]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	613b      	str	r3, [r7, #16]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	613b      	str	r3, [r7, #16]
 800cbfe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc16:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695a      	ldr	r2, [r3, #20]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f042 0201 	orr.w	r2, r2, #1
 800cc26:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	695a      	ldr	r2, [r3, #20]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc36:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e000      	b.n	800cc3e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800cc3c:	2302      	movs	r3, #2
  }
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3718      	adds	r7, #24
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	0800cfab 	.word	0x0800cfab
 800cc4c:	0800d015 	.word	0x0800d015
 800cc50:	0800d033 	.word	0x0800d033

0800cc54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	f003 030f 	and.w	r3, r3, #15
 800cc82:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10d      	bne.n	800cca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d008      	beq.n	800cca6 <HAL_UART_IRQHandler+0x52>
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	f003 0320 	and.w	r3, r3, #32
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 faca 	bl	800d238 <UART_Receive_IT>
      return;
 800cca4:	e0d4      	b.n	800ce50 <HAL_UART_IRQHandler+0x1fc>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 80b3 	beq.w	800ce14 <HAL_UART_IRQHandler+0x1c0>
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f003 0301 	and.w	r3, r3, #1
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d105      	bne.n	800ccc4 <HAL_UART_IRQHandler+0x70>
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f000 80a8 	beq.w	800ce14 <HAL_UART_IRQHandler+0x1c0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00a      	beq.n	800cce4 <HAL_UART_IRQHandler+0x90>
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d005      	beq.n	800cce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccdc:	f043 0201 	orr.w	r2, r3, #1
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	f003 0304 	and.w	r3, r3, #4
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00a      	beq.n	800cd04 <HAL_UART_IRQHandler+0xb0>
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfc:	f043 0202 	orr.w	r2, r3, #2
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00a      	beq.n	800cd24 <HAL_UART_IRQHandler+0xd0>
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1c:	f043 0204 	orr.w	r2, r3, #4
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	f003 0308 	and.w	r3, r3, #8
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00f      	beq.n	800cd4e <HAL_UART_IRQHandler+0xfa>
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	f003 0320 	and.w	r3, r3, #32
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <HAL_UART_IRQHandler+0xee>
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d005      	beq.n	800cd4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	f043 0208 	orr.w	r2, r3, #8
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d07b      	beq.n	800ce4e <HAL_UART_IRQHandler+0x1fa>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	f003 0320 	and.w	r3, r3, #32
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d007      	beq.n	800cd70 <HAL_UART_IRQHandler+0x11c>
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	f003 0320 	and.w	r3, r3, #32
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa64 	bl	800d238 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd7a:	2b40      	cmp	r3, #64	; 0x40
 800cd7c:	bf0c      	ite	eq
 800cd7e:	2301      	moveq	r3, #1
 800cd80:	2300      	movne	r3, #0
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8a:	f003 0308 	and.w	r3, r3, #8
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d102      	bne.n	800cd98 <HAL_UART_IRQHandler+0x144>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d033      	beq.n	800ce00 <HAL_UART_IRQHandler+0x1ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f9ab 	bl	800d0f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda8:	2b40      	cmp	r3, #64	; 0x40
 800cdaa:	d124      	bne.n	800cdf6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	695a      	ldr	r2, [r3, #20]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d013      	beq.n	800cdec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc8:	4a23      	ldr	r2, [pc, #140]	; (800ce58 <HAL_UART_IRQHandler+0x204>)
 800cdca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fd fc67 	bl	800a6a4 <HAL_DMA_Abort_IT>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d019      	beq.n	800ce10 <HAL_UART_IRQHandler+0x1bc>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cde6:	4610      	mov	r0, r2
 800cde8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdea:	e011      	b.n	800ce10 <HAL_UART_IRQHandler+0x1bc>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf4:	e00c      	b.n	800ce10 <HAL_UART_IRQHandler+0x1bc>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdfe:	e007      	b.n	800ce10 <HAL_UART_IRQHandler+0x1bc>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ce0e:	e01e      	b.n	800ce4e <HAL_UART_IRQHandler+0x1fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce10:	bf00      	nop
    return;
 800ce12:	e01c      	b.n	800ce4e <HAL_UART_IRQHandler+0x1fa>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d008      	beq.n	800ce30 <HAL_UART_IRQHandler+0x1dc>
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d003      	beq.n	800ce30 <HAL_UART_IRQHandler+0x1dc>
  {
    UART_Transmit_IT(huart);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 f996 	bl	800d15a <UART_Transmit_IT>
    return;
 800ce2e:	e00f      	b.n	800ce50 <HAL_UART_IRQHandler+0x1fc>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <HAL_UART_IRQHandler+0x1fc>
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d005      	beq.n	800ce50 <HAL_UART_IRQHandler+0x1fc>
  {
    UART_EndTransmit_IT(huart);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f9de 	bl	800d206 <UART_EndTransmit_IT>
    return;
 800ce4a:	bf00      	nop
 800ce4c:	e000      	b.n	800ce50 <HAL_UART_IRQHandler+0x1fc>
    return;
 800ce4e:	bf00      	nop
  }
}
 800ce50:	3720      	adds	r7, #32
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	0800d131 	.word	0x0800d131

0800ce5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ce64:	bf00      	nop
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a0e      	ldr	r2, [pc, #56]	; (800cf18 <UART_InitCallbacksToDefault+0x44>)
 800cee0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4a0d      	ldr	r2, [pc, #52]	; (800cf1c <UART_InitCallbacksToDefault+0x48>)
 800cee6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a0d      	ldr	r2, [pc, #52]	; (800cf20 <UART_InitCallbacksToDefault+0x4c>)
 800ceec:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a0c      	ldr	r2, [pc, #48]	; (800cf24 <UART_InitCallbacksToDefault+0x50>)
 800cef2:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a0c      	ldr	r2, [pc, #48]	; (800cf28 <UART_InitCallbacksToDefault+0x54>)
 800cef8:	651a      	str	r2, [r3, #80]	; 0x50
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a0b      	ldr	r2, [pc, #44]	; (800cf2c <UART_InitCallbacksToDefault+0x58>)
 800cefe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a0b      	ldr	r2, [pc, #44]	; (800cf30 <UART_InitCallbacksToDefault+0x5c>)
 800cf04:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a0a      	ldr	r2, [pc, #40]	; (800cf34 <UART_InitCallbacksToDefault+0x60>)
 800cf0a:	65da      	str	r2, [r3, #92]	; 0x5c

}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	0800ce5d 	.word	0x0800ce5d
 800cf1c:	080008b5 	.word	0x080008b5
 800cf20:	0800ce71 	.word	0x0800ce71
 800cf24:	080008d5 	.word	0x080008d5
 800cf28:	0800ce85 	.word	0x0800ce85
 800cf2c:	0800ce99 	.word	0x0800ce99
 800cf30:	0800cead 	.word	0x0800cead
 800cf34:	0800cec1 	.word	0x0800cec1

0800cf38 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf44:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d113      	bne.n	800cf7c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	695a      	ldr	r2, [r3, #20]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf68:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68da      	ldr	r2, [r3, #12]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf78:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf7a:	e003      	b.n	800cf84 <UART_DMATransmitCplt+0x4c>
    huart->TxCpltCallback(huart);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	4798      	blx	r3
}
 800cf84:	bf00      	nop
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf98:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d11e      	bne.n	800d004 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cfda:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	695a      	ldr	r2, [r3, #20]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f022 0201 	bic.w	r2, r2, #1
 800cfea:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	695a      	ldr	r2, [r3, #20]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cffa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2220      	movs	r2, #32
 800d000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	4798      	blx	r3
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d00c:	bf00      	nop
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d020:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	4798      	blx	r3
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d02a:	bf00      	nop
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d03a:	2300      	movs	r3, #0
 800d03c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d042:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d04e:	2b80      	cmp	r3, #128	; 0x80
 800d050:	bf0c      	ite	eq
 800d052:	2301      	moveq	r3, #1
 800d054:	2300      	movne	r3, #0
 800d056:	b2db      	uxtb	r3, r3
 800d058:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b21      	cmp	r3, #33	; 0x21
 800d064:	d108      	bne.n	800d078 <UART_DMAError+0x46>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2200      	movs	r2, #0
 800d070:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d072:	68b8      	ldr	r0, [r7, #8]
 800d074:	f000 f828 	bl	800d0c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	695b      	ldr	r3, [r3, #20]
 800d07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d082:	2b40      	cmp	r3, #64	; 0x40
 800d084:	bf0c      	ite	eq
 800d086:	2301      	moveq	r3, #1
 800d088:	2300      	movne	r3, #0
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b22      	cmp	r3, #34	; 0x22
 800d098:	d108      	bne.n	800d0ac <UART_DMAError+0x7a>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d005      	beq.n	800d0ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f000 f824 	bl	800d0f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b0:	f043 0210 	orr.w	r2, r3, #16
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0bc:	68b8      	ldr	r0, [r7, #8]
 800d0be:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0c0:	bf00      	nop
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68da      	ldr	r2, [r3, #12]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d0de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2220      	movs	r2, #32
 800d0e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68da      	ldr	r2, [r3, #12]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d10a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	695a      	ldr	r2, [r3, #20]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0201 	bic.w	r2, r2, #1
 800d11a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2220      	movs	r2, #32
 800d120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b085      	sub	sp, #20
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b21      	cmp	r3, #33	; 0x21
 800d16c:	d144      	bne.n	800d1f8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d176:	d11a      	bne.n	800d1ae <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a1b      	ldr	r3, [r3, #32]
 800d17c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d18c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d105      	bne.n	800d1a2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	1c9a      	adds	r2, r3, #2
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	621a      	str	r2, [r3, #32]
 800d1a0:	e00e      	b.n	800d1c0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	621a      	str	r2, [r3, #32]
 800d1ac:	e008      	b.n	800d1c0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
 800d1b2:	1c59      	adds	r1, r3, #1
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	6211      	str	r1, [r2, #32]
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10f      	bne.n	800d1f4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68da      	ldr	r2, [r3, #12]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68da      	ldr	r2, [r3, #12]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e000      	b.n	800d1fa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d1f8:	2302      	movs	r3, #2
  }
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b082      	sub	sp, #8
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68da      	ldr	r2, [r3, #12]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d21c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2220      	movs	r2, #32
 800d222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b22      	cmp	r3, #34	; 0x22
 800d24a:	d172      	bne.n	800d332 <UART_Receive_IT+0xfa>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d254:	d123      	bne.n	800d29e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10e      	bne.n	800d282 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d270:	b29a      	uxth	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27a:	1c9a      	adds	r2, r3, #2
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	629a      	str	r2, [r3, #40]	; 0x28
 800d280:	e029      	b.n	800d2d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	b29b      	uxth	r3, r3
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	629a      	str	r2, [r3, #40]	; 0x28
 800d29c:	e01b      	b.n	800d2d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10a      	bne.n	800d2bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6858      	ldr	r0, [r3, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b0:	1c59      	adds	r1, r3, #1
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	6291      	str	r1, [r2, #40]	; 0x28
 800d2b6:	b2c2      	uxtb	r2, r0
 800d2b8:	701a      	strb	r2, [r3, #0]
 800d2ba:	e00c      	b.n	800d2d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c8:	1c58      	adds	r0, r3, #1
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	6288      	str	r0, [r1, #40]	; 0x28
 800d2ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2d2:	b2d2      	uxtb	r2, r2
 800d2d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d121      	bne.n	800d32e <UART_Receive_IT+0xf6>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68da      	ldr	r2, [r3, #12]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f022 0220 	bic.w	r2, r2, #32
 800d2f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	695a      	ldr	r2, [r3, #20]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f022 0201 	bic.w	r2, r2, #1
 800d318:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2220      	movs	r2, #32
 800d31e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	4798      	blx	r3
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	e002      	b.n	800d334 <UART_Receive_IT+0xfc>
    }
    return HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	e000      	b.n	800d334 <UART_Receive_IT+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800d332:	2302      	movs	r3, #2
  }
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d340:	b085      	sub	sp, #20
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	68da      	ldr	r2, [r3, #12]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	430a      	orrs	r2, r1
 800d35a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	689a      	ldr	r2, [r3, #8]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	431a      	orrs	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	431a      	orrs	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	69db      	ldr	r3, [r3, #28]
 800d370:	4313      	orrs	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d37e:	f023 030c 	bic.w	r3, r3, #12
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	6812      	ldr	r2, [r2, #0]
 800d386:	68f9      	ldr	r1, [r7, #12]
 800d388:	430b      	orrs	r3, r1
 800d38a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	695b      	ldr	r3, [r3, #20]
 800d392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	699a      	ldr	r2, [r3, #24]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3aa:	f040 818b 	bne.w	800d6c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4ac1      	ldr	r2, [pc, #772]	; (800d6b8 <UART_SetConfig+0x37c>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d005      	beq.n	800d3c4 <UART_SetConfig+0x88>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4abf      	ldr	r2, [pc, #764]	; (800d6bc <UART_SetConfig+0x380>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	f040 80bd 	bne.w	800d53e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d3c4:	f7ff faec 	bl	800c9a0 <HAL_RCC_GetPCLK2Freq>
 800d3c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	461d      	mov	r5, r3
 800d3ce:	f04f 0600 	mov.w	r6, #0
 800d3d2:	46a8      	mov	r8, r5
 800d3d4:	46b1      	mov	r9, r6
 800d3d6:	eb18 0308 	adds.w	r3, r8, r8
 800d3da:	eb49 0409 	adc.w	r4, r9, r9
 800d3de:	4698      	mov	r8, r3
 800d3e0:	46a1      	mov	r9, r4
 800d3e2:	eb18 0805 	adds.w	r8, r8, r5
 800d3e6:	eb49 0906 	adc.w	r9, r9, r6
 800d3ea:	f04f 0100 	mov.w	r1, #0
 800d3ee:	f04f 0200 	mov.w	r2, #0
 800d3f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d3f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d3fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d3fe:	4688      	mov	r8, r1
 800d400:	4691      	mov	r9, r2
 800d402:	eb18 0005 	adds.w	r0, r8, r5
 800d406:	eb49 0106 	adc.w	r1, r9, r6
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	461d      	mov	r5, r3
 800d410:	f04f 0600 	mov.w	r6, #0
 800d414:	196b      	adds	r3, r5, r5
 800d416:	eb46 0406 	adc.w	r4, r6, r6
 800d41a:	461a      	mov	r2, r3
 800d41c:	4623      	mov	r3, r4
 800d41e:	f7f3 f89d 	bl	800055c <__aeabi_uldivmod>
 800d422:	4603      	mov	r3, r0
 800d424:	460c      	mov	r4, r1
 800d426:	461a      	mov	r2, r3
 800d428:	4ba5      	ldr	r3, [pc, #660]	; (800d6c0 <UART_SetConfig+0x384>)
 800d42a:	fba3 2302 	umull	r2, r3, r3, r2
 800d42e:	095b      	lsrs	r3, r3, #5
 800d430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	461d      	mov	r5, r3
 800d438:	f04f 0600 	mov.w	r6, #0
 800d43c:	46a9      	mov	r9, r5
 800d43e:	46b2      	mov	sl, r6
 800d440:	eb19 0309 	adds.w	r3, r9, r9
 800d444:	eb4a 040a 	adc.w	r4, sl, sl
 800d448:	4699      	mov	r9, r3
 800d44a:	46a2      	mov	sl, r4
 800d44c:	eb19 0905 	adds.w	r9, r9, r5
 800d450:	eb4a 0a06 	adc.w	sl, sl, r6
 800d454:	f04f 0100 	mov.w	r1, #0
 800d458:	f04f 0200 	mov.w	r2, #0
 800d45c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d468:	4689      	mov	r9, r1
 800d46a:	4692      	mov	sl, r2
 800d46c:	eb19 0005 	adds.w	r0, r9, r5
 800d470:	eb4a 0106 	adc.w	r1, sl, r6
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	461d      	mov	r5, r3
 800d47a:	f04f 0600 	mov.w	r6, #0
 800d47e:	196b      	adds	r3, r5, r5
 800d480:	eb46 0406 	adc.w	r4, r6, r6
 800d484:	461a      	mov	r2, r3
 800d486:	4623      	mov	r3, r4
 800d488:	f7f3 f868 	bl	800055c <__aeabi_uldivmod>
 800d48c:	4603      	mov	r3, r0
 800d48e:	460c      	mov	r4, r1
 800d490:	461a      	mov	r2, r3
 800d492:	4b8b      	ldr	r3, [pc, #556]	; (800d6c0 <UART_SetConfig+0x384>)
 800d494:	fba3 1302 	umull	r1, r3, r3, r2
 800d498:	095b      	lsrs	r3, r3, #5
 800d49a:	2164      	movs	r1, #100	; 0x64
 800d49c:	fb01 f303 	mul.w	r3, r1, r3
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	3332      	adds	r3, #50	; 0x32
 800d4a6:	4a86      	ldr	r2, [pc, #536]	; (800d6c0 <UART_SetConfig+0x384>)
 800d4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ac:	095b      	lsrs	r3, r3, #5
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d4b4:	4498      	add	r8, r3
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	461d      	mov	r5, r3
 800d4ba:	f04f 0600 	mov.w	r6, #0
 800d4be:	46a9      	mov	r9, r5
 800d4c0:	46b2      	mov	sl, r6
 800d4c2:	eb19 0309 	adds.w	r3, r9, r9
 800d4c6:	eb4a 040a 	adc.w	r4, sl, sl
 800d4ca:	4699      	mov	r9, r3
 800d4cc:	46a2      	mov	sl, r4
 800d4ce:	eb19 0905 	adds.w	r9, r9, r5
 800d4d2:	eb4a 0a06 	adc.w	sl, sl, r6
 800d4d6:	f04f 0100 	mov.w	r1, #0
 800d4da:	f04f 0200 	mov.w	r2, #0
 800d4de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d4e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d4ea:	4689      	mov	r9, r1
 800d4ec:	4692      	mov	sl, r2
 800d4ee:	eb19 0005 	adds.w	r0, r9, r5
 800d4f2:	eb4a 0106 	adc.w	r1, sl, r6
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	461d      	mov	r5, r3
 800d4fc:	f04f 0600 	mov.w	r6, #0
 800d500:	196b      	adds	r3, r5, r5
 800d502:	eb46 0406 	adc.w	r4, r6, r6
 800d506:	461a      	mov	r2, r3
 800d508:	4623      	mov	r3, r4
 800d50a:	f7f3 f827 	bl	800055c <__aeabi_uldivmod>
 800d50e:	4603      	mov	r3, r0
 800d510:	460c      	mov	r4, r1
 800d512:	461a      	mov	r2, r3
 800d514:	4b6a      	ldr	r3, [pc, #424]	; (800d6c0 <UART_SetConfig+0x384>)
 800d516:	fba3 1302 	umull	r1, r3, r3, r2
 800d51a:	095b      	lsrs	r3, r3, #5
 800d51c:	2164      	movs	r1, #100	; 0x64
 800d51e:	fb01 f303 	mul.w	r3, r1, r3
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	3332      	adds	r3, #50	; 0x32
 800d528:	4a65      	ldr	r2, [pc, #404]	; (800d6c0 <UART_SetConfig+0x384>)
 800d52a:	fba2 2303 	umull	r2, r3, r2, r3
 800d52e:	095b      	lsrs	r3, r3, #5
 800d530:	f003 0207 	and.w	r2, r3, #7
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4442      	add	r2, r8
 800d53a:	609a      	str	r2, [r3, #8]
 800d53c:	e26f      	b.n	800da1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d53e:	f7ff fa1b 	bl	800c978 <HAL_RCC_GetPCLK1Freq>
 800d542:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	461d      	mov	r5, r3
 800d548:	f04f 0600 	mov.w	r6, #0
 800d54c:	46a8      	mov	r8, r5
 800d54e:	46b1      	mov	r9, r6
 800d550:	eb18 0308 	adds.w	r3, r8, r8
 800d554:	eb49 0409 	adc.w	r4, r9, r9
 800d558:	4698      	mov	r8, r3
 800d55a:	46a1      	mov	r9, r4
 800d55c:	eb18 0805 	adds.w	r8, r8, r5
 800d560:	eb49 0906 	adc.w	r9, r9, r6
 800d564:	f04f 0100 	mov.w	r1, #0
 800d568:	f04f 0200 	mov.w	r2, #0
 800d56c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d570:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d574:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d578:	4688      	mov	r8, r1
 800d57a:	4691      	mov	r9, r2
 800d57c:	eb18 0005 	adds.w	r0, r8, r5
 800d580:	eb49 0106 	adc.w	r1, r9, r6
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	461d      	mov	r5, r3
 800d58a:	f04f 0600 	mov.w	r6, #0
 800d58e:	196b      	adds	r3, r5, r5
 800d590:	eb46 0406 	adc.w	r4, r6, r6
 800d594:	461a      	mov	r2, r3
 800d596:	4623      	mov	r3, r4
 800d598:	f7f2 ffe0 	bl	800055c <__aeabi_uldivmod>
 800d59c:	4603      	mov	r3, r0
 800d59e:	460c      	mov	r4, r1
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4b47      	ldr	r3, [pc, #284]	; (800d6c0 <UART_SetConfig+0x384>)
 800d5a4:	fba3 2302 	umull	r2, r3, r3, r2
 800d5a8:	095b      	lsrs	r3, r3, #5
 800d5aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	461d      	mov	r5, r3
 800d5b2:	f04f 0600 	mov.w	r6, #0
 800d5b6:	46a9      	mov	r9, r5
 800d5b8:	46b2      	mov	sl, r6
 800d5ba:	eb19 0309 	adds.w	r3, r9, r9
 800d5be:	eb4a 040a 	adc.w	r4, sl, sl
 800d5c2:	4699      	mov	r9, r3
 800d5c4:	46a2      	mov	sl, r4
 800d5c6:	eb19 0905 	adds.w	r9, r9, r5
 800d5ca:	eb4a 0a06 	adc.w	sl, sl, r6
 800d5ce:	f04f 0100 	mov.w	r1, #0
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d5de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d5e2:	4689      	mov	r9, r1
 800d5e4:	4692      	mov	sl, r2
 800d5e6:	eb19 0005 	adds.w	r0, r9, r5
 800d5ea:	eb4a 0106 	adc.w	r1, sl, r6
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	461d      	mov	r5, r3
 800d5f4:	f04f 0600 	mov.w	r6, #0
 800d5f8:	196b      	adds	r3, r5, r5
 800d5fa:	eb46 0406 	adc.w	r4, r6, r6
 800d5fe:	461a      	mov	r2, r3
 800d600:	4623      	mov	r3, r4
 800d602:	f7f2 ffab 	bl	800055c <__aeabi_uldivmod>
 800d606:	4603      	mov	r3, r0
 800d608:	460c      	mov	r4, r1
 800d60a:	461a      	mov	r2, r3
 800d60c:	4b2c      	ldr	r3, [pc, #176]	; (800d6c0 <UART_SetConfig+0x384>)
 800d60e:	fba3 1302 	umull	r1, r3, r3, r2
 800d612:	095b      	lsrs	r3, r3, #5
 800d614:	2164      	movs	r1, #100	; 0x64
 800d616:	fb01 f303 	mul.w	r3, r1, r3
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	3332      	adds	r3, #50	; 0x32
 800d620:	4a27      	ldr	r2, [pc, #156]	; (800d6c0 <UART_SetConfig+0x384>)
 800d622:	fba2 2303 	umull	r2, r3, r2, r3
 800d626:	095b      	lsrs	r3, r3, #5
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d62e:	4498      	add	r8, r3
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	461d      	mov	r5, r3
 800d634:	f04f 0600 	mov.w	r6, #0
 800d638:	46a9      	mov	r9, r5
 800d63a:	46b2      	mov	sl, r6
 800d63c:	eb19 0309 	adds.w	r3, r9, r9
 800d640:	eb4a 040a 	adc.w	r4, sl, sl
 800d644:	4699      	mov	r9, r3
 800d646:	46a2      	mov	sl, r4
 800d648:	eb19 0905 	adds.w	r9, r9, r5
 800d64c:	eb4a 0a06 	adc.w	sl, sl, r6
 800d650:	f04f 0100 	mov.w	r1, #0
 800d654:	f04f 0200 	mov.w	r2, #0
 800d658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d65c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d664:	4689      	mov	r9, r1
 800d666:	4692      	mov	sl, r2
 800d668:	eb19 0005 	adds.w	r0, r9, r5
 800d66c:	eb4a 0106 	adc.w	r1, sl, r6
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	461d      	mov	r5, r3
 800d676:	f04f 0600 	mov.w	r6, #0
 800d67a:	196b      	adds	r3, r5, r5
 800d67c:	eb46 0406 	adc.w	r4, r6, r6
 800d680:	461a      	mov	r2, r3
 800d682:	4623      	mov	r3, r4
 800d684:	f7f2 ff6a 	bl	800055c <__aeabi_uldivmod>
 800d688:	4603      	mov	r3, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	461a      	mov	r2, r3
 800d68e:	4b0c      	ldr	r3, [pc, #48]	; (800d6c0 <UART_SetConfig+0x384>)
 800d690:	fba3 1302 	umull	r1, r3, r3, r2
 800d694:	095b      	lsrs	r3, r3, #5
 800d696:	2164      	movs	r1, #100	; 0x64
 800d698:	fb01 f303 	mul.w	r3, r1, r3
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	3332      	adds	r3, #50	; 0x32
 800d6a2:	4a07      	ldr	r2, [pc, #28]	; (800d6c0 <UART_SetConfig+0x384>)
 800d6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a8:	095b      	lsrs	r3, r3, #5
 800d6aa:	f003 0207 	and.w	r2, r3, #7
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4442      	add	r2, r8
 800d6b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d6b6:	e1b2      	b.n	800da1e <UART_SetConfig+0x6e2>
 800d6b8:	40011000 	.word	0x40011000
 800d6bc:	40011400 	.word	0x40011400
 800d6c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4ad7      	ldr	r2, [pc, #860]	; (800da28 <UART_SetConfig+0x6ec>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d005      	beq.n	800d6da <UART_SetConfig+0x39e>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4ad6      	ldr	r2, [pc, #856]	; (800da2c <UART_SetConfig+0x6f0>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	f040 80d1 	bne.w	800d87c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d6da:	f7ff f961 	bl	800c9a0 <HAL_RCC_GetPCLK2Freq>
 800d6de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	469a      	mov	sl, r3
 800d6e4:	f04f 0b00 	mov.w	fp, #0
 800d6e8:	46d0      	mov	r8, sl
 800d6ea:	46d9      	mov	r9, fp
 800d6ec:	eb18 0308 	adds.w	r3, r8, r8
 800d6f0:	eb49 0409 	adc.w	r4, r9, r9
 800d6f4:	4698      	mov	r8, r3
 800d6f6:	46a1      	mov	r9, r4
 800d6f8:	eb18 080a 	adds.w	r8, r8, sl
 800d6fc:	eb49 090b 	adc.w	r9, r9, fp
 800d700:	f04f 0100 	mov.w	r1, #0
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d70c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d710:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d714:	4688      	mov	r8, r1
 800d716:	4691      	mov	r9, r2
 800d718:	eb1a 0508 	adds.w	r5, sl, r8
 800d71c:	eb4b 0609 	adc.w	r6, fp, r9
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	4619      	mov	r1, r3
 800d726:	f04f 0200 	mov.w	r2, #0
 800d72a:	f04f 0300 	mov.w	r3, #0
 800d72e:	f04f 0400 	mov.w	r4, #0
 800d732:	0094      	lsls	r4, r2, #2
 800d734:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d738:	008b      	lsls	r3, r1, #2
 800d73a:	461a      	mov	r2, r3
 800d73c:	4623      	mov	r3, r4
 800d73e:	4628      	mov	r0, r5
 800d740:	4631      	mov	r1, r6
 800d742:	f7f2 ff0b 	bl	800055c <__aeabi_uldivmod>
 800d746:	4603      	mov	r3, r0
 800d748:	460c      	mov	r4, r1
 800d74a:	461a      	mov	r2, r3
 800d74c:	4bb8      	ldr	r3, [pc, #736]	; (800da30 <UART_SetConfig+0x6f4>)
 800d74e:	fba3 2302 	umull	r2, r3, r3, r2
 800d752:	095b      	lsrs	r3, r3, #5
 800d754:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	469b      	mov	fp, r3
 800d75c:	f04f 0c00 	mov.w	ip, #0
 800d760:	46d9      	mov	r9, fp
 800d762:	46e2      	mov	sl, ip
 800d764:	eb19 0309 	adds.w	r3, r9, r9
 800d768:	eb4a 040a 	adc.w	r4, sl, sl
 800d76c:	4699      	mov	r9, r3
 800d76e:	46a2      	mov	sl, r4
 800d770:	eb19 090b 	adds.w	r9, r9, fp
 800d774:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d778:	f04f 0100 	mov.w	r1, #0
 800d77c:	f04f 0200 	mov.w	r2, #0
 800d780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d78c:	4689      	mov	r9, r1
 800d78e:	4692      	mov	sl, r2
 800d790:	eb1b 0509 	adds.w	r5, fp, r9
 800d794:	eb4c 060a 	adc.w	r6, ip, sl
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	4619      	mov	r1, r3
 800d79e:	f04f 0200 	mov.w	r2, #0
 800d7a2:	f04f 0300 	mov.w	r3, #0
 800d7a6:	f04f 0400 	mov.w	r4, #0
 800d7aa:	0094      	lsls	r4, r2, #2
 800d7ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7b0:	008b      	lsls	r3, r1, #2
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	4623      	mov	r3, r4
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	f7f2 fecf 	bl	800055c <__aeabi_uldivmod>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	4b9a      	ldr	r3, [pc, #616]	; (800da30 <UART_SetConfig+0x6f4>)
 800d7c6:	fba3 1302 	umull	r1, r3, r3, r2
 800d7ca:	095b      	lsrs	r3, r3, #5
 800d7cc:	2164      	movs	r1, #100	; 0x64
 800d7ce:	fb01 f303 	mul.w	r3, r1, r3
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	3332      	adds	r3, #50	; 0x32
 800d7d8:	4a95      	ldr	r2, [pc, #596]	; (800da30 <UART_SetConfig+0x6f4>)
 800d7da:	fba2 2303 	umull	r2, r3, r2, r3
 800d7de:	095b      	lsrs	r3, r3, #5
 800d7e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7e4:	4498      	add	r8, r3
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	469b      	mov	fp, r3
 800d7ea:	f04f 0c00 	mov.w	ip, #0
 800d7ee:	46d9      	mov	r9, fp
 800d7f0:	46e2      	mov	sl, ip
 800d7f2:	eb19 0309 	adds.w	r3, r9, r9
 800d7f6:	eb4a 040a 	adc.w	r4, sl, sl
 800d7fa:	4699      	mov	r9, r3
 800d7fc:	46a2      	mov	sl, r4
 800d7fe:	eb19 090b 	adds.w	r9, r9, fp
 800d802:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d806:	f04f 0100 	mov.w	r1, #0
 800d80a:	f04f 0200 	mov.w	r2, #0
 800d80e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d81a:	4689      	mov	r9, r1
 800d81c:	4692      	mov	sl, r2
 800d81e:	eb1b 0509 	adds.w	r5, fp, r9
 800d822:	eb4c 060a 	adc.w	r6, ip, sl
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	4619      	mov	r1, r3
 800d82c:	f04f 0200 	mov.w	r2, #0
 800d830:	f04f 0300 	mov.w	r3, #0
 800d834:	f04f 0400 	mov.w	r4, #0
 800d838:	0094      	lsls	r4, r2, #2
 800d83a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d83e:	008b      	lsls	r3, r1, #2
 800d840:	461a      	mov	r2, r3
 800d842:	4623      	mov	r3, r4
 800d844:	4628      	mov	r0, r5
 800d846:	4631      	mov	r1, r6
 800d848:	f7f2 fe88 	bl	800055c <__aeabi_uldivmod>
 800d84c:	4603      	mov	r3, r0
 800d84e:	460c      	mov	r4, r1
 800d850:	461a      	mov	r2, r3
 800d852:	4b77      	ldr	r3, [pc, #476]	; (800da30 <UART_SetConfig+0x6f4>)
 800d854:	fba3 1302 	umull	r1, r3, r3, r2
 800d858:	095b      	lsrs	r3, r3, #5
 800d85a:	2164      	movs	r1, #100	; 0x64
 800d85c:	fb01 f303 	mul.w	r3, r1, r3
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	011b      	lsls	r3, r3, #4
 800d864:	3332      	adds	r3, #50	; 0x32
 800d866:	4a72      	ldr	r2, [pc, #456]	; (800da30 <UART_SetConfig+0x6f4>)
 800d868:	fba2 2303 	umull	r2, r3, r2, r3
 800d86c:	095b      	lsrs	r3, r3, #5
 800d86e:	f003 020f 	and.w	r2, r3, #15
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4442      	add	r2, r8
 800d878:	609a      	str	r2, [r3, #8]
 800d87a:	e0d0      	b.n	800da1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d87c:	f7ff f87c 	bl	800c978 <HAL_RCC_GetPCLK1Freq>
 800d880:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	469a      	mov	sl, r3
 800d886:	f04f 0b00 	mov.w	fp, #0
 800d88a:	46d0      	mov	r8, sl
 800d88c:	46d9      	mov	r9, fp
 800d88e:	eb18 0308 	adds.w	r3, r8, r8
 800d892:	eb49 0409 	adc.w	r4, r9, r9
 800d896:	4698      	mov	r8, r3
 800d898:	46a1      	mov	r9, r4
 800d89a:	eb18 080a 	adds.w	r8, r8, sl
 800d89e:	eb49 090b 	adc.w	r9, r9, fp
 800d8a2:	f04f 0100 	mov.w	r1, #0
 800d8a6:	f04f 0200 	mov.w	r2, #0
 800d8aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d8ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d8b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d8b6:	4688      	mov	r8, r1
 800d8b8:	4691      	mov	r9, r2
 800d8ba:	eb1a 0508 	adds.w	r5, sl, r8
 800d8be:	eb4b 0609 	adc.w	r6, fp, r9
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	f04f 0200 	mov.w	r2, #0
 800d8cc:	f04f 0300 	mov.w	r3, #0
 800d8d0:	f04f 0400 	mov.w	r4, #0
 800d8d4:	0094      	lsls	r4, r2, #2
 800d8d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d8da:	008b      	lsls	r3, r1, #2
 800d8dc:	461a      	mov	r2, r3
 800d8de:	4623      	mov	r3, r4
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	f7f2 fe3a 	bl	800055c <__aeabi_uldivmod>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	4b50      	ldr	r3, [pc, #320]	; (800da30 <UART_SetConfig+0x6f4>)
 800d8f0:	fba3 2302 	umull	r2, r3, r3, r2
 800d8f4:	095b      	lsrs	r3, r3, #5
 800d8f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	469b      	mov	fp, r3
 800d8fe:	f04f 0c00 	mov.w	ip, #0
 800d902:	46d9      	mov	r9, fp
 800d904:	46e2      	mov	sl, ip
 800d906:	eb19 0309 	adds.w	r3, r9, r9
 800d90a:	eb4a 040a 	adc.w	r4, sl, sl
 800d90e:	4699      	mov	r9, r3
 800d910:	46a2      	mov	sl, r4
 800d912:	eb19 090b 	adds.w	r9, r9, fp
 800d916:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d91a:	f04f 0100 	mov.w	r1, #0
 800d91e:	f04f 0200 	mov.w	r2, #0
 800d922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d926:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d92a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d92e:	4689      	mov	r9, r1
 800d930:	4692      	mov	sl, r2
 800d932:	eb1b 0509 	adds.w	r5, fp, r9
 800d936:	eb4c 060a 	adc.w	r6, ip, sl
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	4619      	mov	r1, r3
 800d940:	f04f 0200 	mov.w	r2, #0
 800d944:	f04f 0300 	mov.w	r3, #0
 800d948:	f04f 0400 	mov.w	r4, #0
 800d94c:	0094      	lsls	r4, r2, #2
 800d94e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d952:	008b      	lsls	r3, r1, #2
 800d954:	461a      	mov	r2, r3
 800d956:	4623      	mov	r3, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	4631      	mov	r1, r6
 800d95c:	f7f2 fdfe 	bl	800055c <__aeabi_uldivmod>
 800d960:	4603      	mov	r3, r0
 800d962:	460c      	mov	r4, r1
 800d964:	461a      	mov	r2, r3
 800d966:	4b32      	ldr	r3, [pc, #200]	; (800da30 <UART_SetConfig+0x6f4>)
 800d968:	fba3 1302 	umull	r1, r3, r3, r2
 800d96c:	095b      	lsrs	r3, r3, #5
 800d96e:	2164      	movs	r1, #100	; 0x64
 800d970:	fb01 f303 	mul.w	r3, r1, r3
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	3332      	adds	r3, #50	; 0x32
 800d97a:	4a2d      	ldr	r2, [pc, #180]	; (800da30 <UART_SetConfig+0x6f4>)
 800d97c:	fba2 2303 	umull	r2, r3, r2, r3
 800d980:	095b      	lsrs	r3, r3, #5
 800d982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d986:	4498      	add	r8, r3
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	469b      	mov	fp, r3
 800d98c:	f04f 0c00 	mov.w	ip, #0
 800d990:	46d9      	mov	r9, fp
 800d992:	46e2      	mov	sl, ip
 800d994:	eb19 0309 	adds.w	r3, r9, r9
 800d998:	eb4a 040a 	adc.w	r4, sl, sl
 800d99c:	4699      	mov	r9, r3
 800d99e:	46a2      	mov	sl, r4
 800d9a0:	eb19 090b 	adds.w	r9, r9, fp
 800d9a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d9a8:	f04f 0100 	mov.w	r1, #0
 800d9ac:	f04f 0200 	mov.w	r2, #0
 800d9b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d9b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d9b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d9bc:	4689      	mov	r9, r1
 800d9be:	4692      	mov	sl, r2
 800d9c0:	eb1b 0509 	adds.w	r5, fp, r9
 800d9c4:	eb4c 060a 	adc.w	r6, ip, sl
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	f04f 0200 	mov.w	r2, #0
 800d9d2:	f04f 0300 	mov.w	r3, #0
 800d9d6:	f04f 0400 	mov.w	r4, #0
 800d9da:	0094      	lsls	r4, r2, #2
 800d9dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d9e0:	008b      	lsls	r3, r1, #2
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	4623      	mov	r3, r4
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	f7f2 fdb7 	bl	800055c <__aeabi_uldivmod>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	4b0e      	ldr	r3, [pc, #56]	; (800da30 <UART_SetConfig+0x6f4>)
 800d9f6:	fba3 1302 	umull	r1, r3, r3, r2
 800d9fa:	095b      	lsrs	r3, r3, #5
 800d9fc:	2164      	movs	r1, #100	; 0x64
 800d9fe:	fb01 f303 	mul.w	r3, r1, r3
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	011b      	lsls	r3, r3, #4
 800da06:	3332      	adds	r3, #50	; 0x32
 800da08:	4a09      	ldr	r2, [pc, #36]	; (800da30 <UART_SetConfig+0x6f4>)
 800da0a:	fba2 2303 	umull	r2, r3, r2, r3
 800da0e:	095b      	lsrs	r3, r3, #5
 800da10:	f003 020f 	and.w	r2, r3, #15
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4442      	add	r2, r8
 800da1a:	609a      	str	r2, [r3, #8]
}
 800da1c:	e7ff      	b.n	800da1e <UART_SetConfig+0x6e2>
 800da1e:	bf00      	nop
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da28:	40011000 	.word	0x40011000
 800da2c:	40011400 	.word	0x40011400
 800da30:	51eb851f 	.word	0x51eb851f

0800da34 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance, uint8_t * whoami);
static void MX_IKS01A2_DataLogTerminal_Init();
static void MX_IKS01A2_DataLogTerminal_Process();

void MX_MEMS_Init()
{
 800da34:	b580      	push	{r7, lr}
 800da36:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS01A2_DataLogTerminal_Init();
 800da38:	f000 f808 	bl	800da4c <MX_IKS01A2_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800da3c:	bf00      	nop
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process()
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS01A2_DataLogTerminal_Process();
 800da44:	f000 f83e 	bl	800dac4 <MX_IKS01A2_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800da48:	bf00      	nop
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <MX_IKS01A2_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A2_DataLogTerminal_Init()
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
  int i;
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 800da52:	2103      	movs	r1, #3
 800da54:	2000      	movs	r0, #0
 800da56:	f7fc f999 	bl	8009d8c <IKS01A2_MOTION_SENSOR_Init>

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
#endif

  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800da5a:	2300      	movs	r3, #0
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	e00d      	b.n	800da7c <MX_IKS01A2_DataLogTerminal_Init+0x30>
  {
    IKS01A2_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	4613      	mov	r3, r2
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	1a9b      	subs	r3, r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4a13      	ldr	r2, [pc, #76]	; (800dabc <MX_IKS01A2_DataLogTerminal_Init+0x70>)
 800da6e:	4413      	add	r3, r2
 800da70:	4619      	mov	r1, r3
 800da72:	f7fc fa13 	bl	8009e9c <IKS01A2_MOTION_SENSOR_GetCapabilities>
  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3301      	adds	r3, #1
 800da7a:	607b      	str	r3, [r7, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d0ee      	beq.n	800da60 <MX_IKS01A2_DataLogTerminal_Init+0x14>
    printf("%s", dataOut);
#endif	/* TERMINAL_VERBOSE */
  }

#if USE_IKS01A2_ENV_SENSOR_HTS221_0
  IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800da82:	2105      	movs	r1, #5
 800da84:	2000      	movs	r0, #0
 800da86:	f7fb feab 	bl	80097e0 <IKS01A2_ENV_SENSOR_Init>
#endif

#if USE_IKS01A2_ENV_SENSOR_LPS22HB_0
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800da8a:	2103      	movs	r1, #3
 800da8c:	2001      	movs	r0, #1
 800da8e:	f7fb fea7 	bl	80097e0 <IKS01A2_ENV_SENSOR_Init>
#endif

  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800da92:	2300      	movs	r3, #0
 800da94:	607b      	str	r3, [r7, #4]
 800da96:	e00a      	b.n	800daae <MX_IKS01A2_DataLogTerminal_Init+0x62>
  {
    IKS01A2_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	011b      	lsls	r3, r3, #4
 800da9e:	4a08      	ldr	r2, [pc, #32]	; (800dac0 <MX_IKS01A2_DataLogTerminal_Init+0x74>)
 800daa0:	4413      	add	r3, r2
 800daa2:	4619      	mov	r1, r3
 800daa4:	f7fb ff5c 	bl	8009960 <IKS01A2_ENV_SENSOR_GetCapabilities>
  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3301      	adds	r3, #1
 800daac:	607b      	str	r3, [r7, #4]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d9f1      	bls.n	800da98 <MX_IKS01A2_DataLogTerminal_Init+0x4c>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
#endif /* TERMINAL_VERBOSE */
  }
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	2000027c 	.word	0x2000027c
 800dac0:	20000298 	.word	0x20000298

0800dac4 <MX_IKS01A2_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A2_DataLogTerminal_Process(C_ROSserial_t * c_ROSserial)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t l_u8_whoami = 0xFF;
 800dacc:	23ff      	movs	r3, #255	; 0xff
 800dace:	72fb      	strb	r3, [r7, #11]

  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	e037      	b.n	800db46 <MX_IKS01A2_DataLogTerminal_Process+0x82>
  {
    if(MotionCapabilities[i].Acc)
 800dad6:	493a      	ldr	r1, [pc, #232]	; (800dbc0 <MX_IKS01A2_DataLogTerminal_Process+0xfc>)
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	4613      	mov	r3, r2
 800dadc:	00db      	lsls	r3, r3, #3
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	440b      	add	r3, r1
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <MX_IKS01A2_DataLogTerminal_Process+0x34>
    {
      Accelero_Sensor_Handler(i, &l_u8_whoami);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f107 020b 	add.w	r2, r7, #11
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 f882 	bl	800dbfc <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800daf8:	4931      	ldr	r1, [pc, #196]	; (800dbc0 <MX_IKS01A2_DataLogTerminal_Process+0xfc>)
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	4613      	mov	r3, r2
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	1a9b      	subs	r3, r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	440b      	add	r3, r1
 800db06:	3301      	adds	r3, #1
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d006      	beq.n	800db1c <MX_IKS01A2_DataLogTerminal_Process+0x58>
    {
      Gyro_Sensor_Handler(i, &l_u8_whoami);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f107 020b 	add.w	r2, r7, #11
 800db14:	4611      	mov	r1, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f884 	bl	800dc24 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800db1c:	4928      	ldr	r1, [pc, #160]	; (800dbc0 <MX_IKS01A2_DataLogTerminal_Process+0xfc>)
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4613      	mov	r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	3302      	adds	r3, #2
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d006      	beq.n	800db40 <MX_IKS01A2_DataLogTerminal_Process+0x7c>
    {
      Magneto_Sensor_Handler(i, &l_u8_whoami);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f107 020b 	add.w	r2, r7, #11
 800db38:	4611      	mov	r1, r2
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 f886 	bl	800dc4c <Magneto_Sensor_Handler>
  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3301      	adds	r3, #1
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d0c4      	beq.n	800dad6 <MX_IKS01A2_DataLogTerminal_Process+0x12>
    }
  }

  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	e02e      	b.n	800dbb0 <MX_IKS01A2_DataLogTerminal_Process+0xec>
  {
    if(EnvCapabilities[i].Humidity)
 800db52:	4a1c      	ldr	r2, [pc, #112]	; (800dbc4 <MX_IKS01A2_DataLogTerminal_Process+0x100>)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	011b      	lsls	r3, r3, #4
 800db58:	4413      	add	r3, r2
 800db5a:	3302      	adds	r3, #2
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d006      	beq.n	800db70 <MX_IKS01A2_DataLogTerminal_Process+0xac>
    {
      Hum_Sensor_Handler(i, &l_u8_whoami);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f107 020b 	add.w	r2, r7, #11
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 f8aa 	bl	800dcc4 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 800db70:	4a14      	ldr	r2, [pc, #80]	; (800dbc4 <MX_IKS01A2_DataLogTerminal_Process+0x100>)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	011b      	lsls	r3, r3, #4
 800db76:	4413      	add	r3, r2
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d006      	beq.n	800db8c <MX_IKS01A2_DataLogTerminal_Process+0xc8>
    {
      Temp_Sensor_Handler(i, &l_u8_whoami);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f107 020b 	add.w	r2, r7, #11
 800db84:	4611      	mov	r1, r2
 800db86:	4618      	mov	r0, r3
 800db88:	f000 f874 	bl	800dc74 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 800db8c:	4a0d      	ldr	r2, [pc, #52]	; (800dbc4 <MX_IKS01A2_DataLogTerminal_Process+0x100>)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	011b      	lsls	r3, r3, #4
 800db92:	4413      	add	r3, r2
 800db94:	3301      	adds	r3, #1
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d006      	beq.n	800dbaa <MX_IKS01A2_DataLogTerminal_Process+0xe6>
    {
      Press_Sensor_Handler(i, &l_u8_whoami);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f107 020b 	add.w	r2, r7, #11
 800dba2:	4611      	mov	r1, r2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f879 	bl	800dc9c <Press_Sensor_Handler>
  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3301      	adds	r3, #1
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d9cd      	bls.n	800db52 <MX_IKS01A2_DataLogTerminal_Process+0x8e>
    }
  }
}
 800dbb6:	bf00      	nop
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	2000027c 	.word	0x2000027c
 800dbc4:	20000298 	.word	0x20000298

0800dbc8 <APP_X_MOTION_SENSOR_GetWhoAmI>:
  * @param  Instance the device instance
  * @param  whoami the sensor ID variable
  * @retval None
  */
static void APP_X_MOTION_SENSOR_GetWhoAmI(uint32_t Instance, uint8_t * whoami)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
	if (IKS01A2_MOTION_SENSOR_ReadID(Instance, whoami))
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7fc f98b 	bl	8009ef0 <IKS01A2_MOTION_SENSOR_ReadID>
#if TERMINAL_VERBOSE
		snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)*whoami);
	    printf("%s", dataOut);
#endif /* TERMINAL_VERBOSE */
	}
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <APP_X_ENV_SENSOR_GetWhoAmI>:
  * @param  Instance the device instance
  * @param  whoami the sensor ID variable
  * @retval None
  */
static void APP_X_ENV_SENSOR_GetWhoAmI(uint32_t Instance, uint8_t * whoami)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
	if (IKS01A2_ENV_SENSOR_ReadID(Instance, whoami))
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7fb fee0 	bl	80099b4 <IKS01A2_ENV_SENSOR_ReadID>
#if TERMINAL_VERBOSE
		snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)*whoami);
	    printf("%s", dataOut);
#endif /* TERMINAL_VERBOSE */
	}
}
 800dbf4:	bf00      	nop
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance, uint8_t * whoami)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  IKS01A2_MOTION_SENSOR_Axes_t acceleration;

  //	Get the sensor ID whoami
  APP_X_MOTION_SENSOR_GetWhoAmI(Instance, whoami);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff ffdd 	bl	800dbc8 <APP_X_MOTION_SENSOR_GetWhoAmI>

  if (IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800dc0e:	f107 030c 	add.w	r3, r7, #12
 800dc12:	461a      	mov	r2, r3
 800dc14:	2102      	movs	r1, #2
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7fc f994 	bl	8009f44 <IKS01A2_MOTION_SENSOR_GetAxes>
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
    }

    printf("%s", dataOut);
#endif /*	TERMINAL_VERBOSE */
}
 800dc1c:	bf00      	nop
 800dc1e:	3718      	adds	r7, #24
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance, uint8_t * whoami)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  IKS01A2_MOTION_SENSOR_Axes_t angular_velocity;

  //	Get the sensor ID whoami
  APP_X_MOTION_SENSOR_GetWhoAmI(Instance, whoami);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff ffc9 	bl	800dbc8 <APP_X_MOTION_SENSOR_GetWhoAmI>

  if (IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	2101      	movs	r1, #1
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7fc f980 	bl	8009f44 <IKS01A2_MOTION_SENSOR_GetAxes>
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
    }

    printf("%s", dataOut);
#endif /*	TERMINAL_VERBOSE */
}
 800dc44:	bf00      	nop
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance, uint8_t * whoami)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  IKS01A2_MOTION_SENSOR_Axes_t magnetic_field;

  //	Get the sensor ID whoami
  APP_X_MOTION_SENSOR_GetWhoAmI(Instance, whoami);
 800dc56:	6839      	ldr	r1, [r7, #0]
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff ffb5 	bl	800dbc8 <APP_X_MOTION_SENSOR_GetWhoAmI>

  if (IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800dc5e:	f107 030c 	add.w	r3, r7, #12
 800dc62:	461a      	mov	r2, r3
 800dc64:	2104      	movs	r1, #4
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7fc f96c 	bl	8009f44 <IKS01A2_MOTION_SENSOR_GetAxes>
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
    }

    printf("%s", dataOut);
#endif /* TERMINAL_VERBOSE */
}
 800dc6c:	bf00      	nop
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance, uint8_t * whoami)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  float temperature;

  //	Get the sensor ID whoami
  APP_X_ENV_SENSOR_GetWhoAmI(Instance, whoami);
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff ffae 	bl	800dbe2 <APP_X_ENV_SENSOR_GetWhoAmI>

  //	Get temperature from sensor
  if (IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800dc86:	f107 030c 	add.w	r3, r7, #12
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	2101      	movs	r1, #1
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7fb feba 	bl	8009a08 <IKS01A2_ENV_SENSOR_GetValue>
               (int)outValue->out_dec);
    }

    printf("%s", dataOut);
#endif /* TERMINAL_VERBOSE */
}
 800dc94:	bf00      	nop
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance, uint8_t * whoami)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  float pressure;

  //	Get the sensor ID whoami
  APP_X_ENV_SENSOR_GetWhoAmI(Instance, whoami);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff ff9a 	bl	800dbe2 <APP_X_ENV_SENSOR_GetWhoAmI>

  if (IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800dcae:	f107 030c 	add.w	r3, r7, #12
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	2102      	movs	r1, #2
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7fb fea6 	bl	8009a08 <IKS01A2_ENV_SENSOR_GetValue>
               (int)outValue->out_dec);
    }

    printf("%s", dataOut);
#endif /* TERMINAL_VERBOSE */
}
 800dcbc:	bf00      	nop
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance, uint8_t * whoami)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  float humidity;

  //	Get the sensor ID whoami
  APP_X_ENV_SENSOR_GetWhoAmI(Instance, whoami);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff ff86 	bl	800dbe2 <APP_X_ENV_SENSOR_GetWhoAmI>

  if (IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800dcd6:	f107 030c 	add.w	r3, r7, #12
 800dcda:	461a      	mov	r2, r3
 800dcdc:	2104      	movs	r1, #4
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7fb fe92 	bl	8009a08 <IKS01A2_ENV_SENSOR_GetValue>
               (int)outValue->out_dec);
    }

    printf("%s", dataOut);
#endif 	/* TERMINAL_VERBOSE */
}
 800dce4:	bf00      	nop
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <__cxa_pure_virtual>:
 800dcec:	b508      	push	{r3, lr}
 800dcee:	f000 f829 	bl	800dd44 <_ZSt9terminatev>

0800dcf2 <_ZdlPvj>:
 800dcf2:	f000 b819 	b.w	800dd28 <_ZdlPv>

0800dcf6 <_Znwj>:
 800dcf6:	b510      	push	{r4, lr}
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	bf14      	ite	ne
 800dcfc:	4604      	movne	r4, r0
 800dcfe:	2401      	moveq	r4, #1
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 f855 	bl	800ddb0 <malloc>
 800dd06:	b930      	cbnz	r0, 800dd16 <_Znwj+0x20>
 800dd08:	f000 f806 	bl	800dd18 <_ZSt15get_new_handlerv>
 800dd0c:	b908      	cbnz	r0, 800dd12 <_Znwj+0x1c>
 800dd0e:	f000 f81e 	bl	800dd4e <abort>
 800dd12:	4780      	blx	r0
 800dd14:	e7f4      	b.n	800dd00 <_Znwj+0xa>
 800dd16:	bd10      	pop	{r4, pc}

0800dd18 <_ZSt15get_new_handlerv>:
 800dd18:	4b02      	ldr	r3, [pc, #8]	; (800dd24 <_ZSt15get_new_handlerv+0xc>)
 800dd1a:	6818      	ldr	r0, [r3, #0]
 800dd1c:	f3bf 8f5b 	dmb	ish
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	200002b8 	.word	0x200002b8

0800dd28 <_ZdlPv>:
 800dd28:	f000 b84a 	b.w	800ddc0 <free>

0800dd2c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dd2c:	b508      	push	{r3, lr}
 800dd2e:	4780      	blx	r0
 800dd30:	f000 f80d 	bl	800dd4e <abort>

0800dd34 <_ZSt13get_terminatev>:
 800dd34:	4b02      	ldr	r3, [pc, #8]	; (800dd40 <_ZSt13get_terminatev+0xc>)
 800dd36:	6818      	ldr	r0, [r3, #0]
 800dd38:	f3bf 8f5b 	dmb	ish
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	200000fc 	.word	0x200000fc

0800dd44 <_ZSt9terminatev>:
 800dd44:	b508      	push	{r3, lr}
 800dd46:	f7ff fff5 	bl	800dd34 <_ZSt13get_terminatev>
 800dd4a:	f7ff ffef 	bl	800dd2c <_ZN10__cxxabiv111__terminateEPFvvE>

0800dd4e <abort>:
 800dd4e:	b508      	push	{r3, lr}
 800dd50:	2006      	movs	r0, #6
 800dd52:	f000 f939 	bl	800dfc8 <raise>
 800dd56:	2001      	movs	r0, #1
 800dd58:	f7f3 f9c8 	bl	80010ec <_exit>

0800dd5c <__errno>:
 800dd5c:	4b01      	ldr	r3, [pc, #4]	; (800dd64 <__errno+0x8>)
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	20000100 	.word	0x20000100

0800dd68 <__libc_init_array>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	4e0d      	ldr	r6, [pc, #52]	; (800dda0 <__libc_init_array+0x38>)
 800dd6c:	4c0d      	ldr	r4, [pc, #52]	; (800dda4 <__libc_init_array+0x3c>)
 800dd6e:	1ba4      	subs	r4, r4, r6
 800dd70:	10a4      	asrs	r4, r4, #2
 800dd72:	2500      	movs	r5, #0
 800dd74:	42a5      	cmp	r5, r4
 800dd76:	d109      	bne.n	800dd8c <__libc_init_array+0x24>
 800dd78:	4e0b      	ldr	r6, [pc, #44]	; (800dda8 <__libc_init_array+0x40>)
 800dd7a:	4c0c      	ldr	r4, [pc, #48]	; (800ddac <__libc_init_array+0x44>)
 800dd7c:	f000 f970 	bl	800e060 <_init>
 800dd80:	1ba4      	subs	r4, r4, r6
 800dd82:	10a4      	asrs	r4, r4, #2
 800dd84:	2500      	movs	r5, #0
 800dd86:	42a5      	cmp	r5, r4
 800dd88:	d105      	bne.n	800dd96 <__libc_init_array+0x2e>
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd90:	4798      	blx	r3
 800dd92:	3501      	adds	r5, #1
 800dd94:	e7ee      	b.n	800dd74 <__libc_init_array+0xc>
 800dd96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd9a:	4798      	blx	r3
 800dd9c:	3501      	adds	r5, #1
 800dd9e:	e7f2      	b.n	800dd86 <__libc_init_array+0x1e>
 800dda0:	0800e730 	.word	0x0800e730
 800dda4:	0800e730 	.word	0x0800e730
 800dda8:	0800e730 	.word	0x0800e730
 800ddac:	0800e734 	.word	0x0800e734

0800ddb0 <malloc>:
 800ddb0:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <malloc+0xc>)
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f000 b86d 	b.w	800de94 <_malloc_r>
 800ddba:	bf00      	nop
 800ddbc:	20000100 	.word	0x20000100

0800ddc0 <free>:
 800ddc0:	4b02      	ldr	r3, [pc, #8]	; (800ddcc <free+0xc>)
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	f000 b817 	b.w	800ddf8 <_free_r>
 800ddca:	bf00      	nop
 800ddcc:	20000100 	.word	0x20000100

0800ddd0 <memcpy>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	1e43      	subs	r3, r0, #1
 800ddd4:	440a      	add	r2, r1
 800ddd6:	4291      	cmp	r1, r2
 800ddd8:	d100      	bne.n	800dddc <memcpy+0xc>
 800ddda:	bd10      	pop	{r4, pc}
 800dddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dde0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dde4:	e7f7      	b.n	800ddd6 <memcpy+0x6>

0800dde6 <memset>:
 800dde6:	4402      	add	r2, r0
 800dde8:	4603      	mov	r3, r0
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d100      	bne.n	800ddf0 <memset+0xa>
 800ddee:	4770      	bx	lr
 800ddf0:	f803 1b01 	strb.w	r1, [r3], #1
 800ddf4:	e7f9      	b.n	800ddea <memset+0x4>
	...

0800ddf8 <_free_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	d045      	beq.n	800de8c <_free_r+0x94>
 800de00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de04:	1f0c      	subs	r4, r1, #4
 800de06:	2b00      	cmp	r3, #0
 800de08:	bfb8      	it	lt
 800de0a:	18e4      	addlt	r4, r4, r3
 800de0c:	f000 f8f8 	bl	800e000 <__malloc_lock>
 800de10:	4a1f      	ldr	r2, [pc, #124]	; (800de90 <_free_r+0x98>)
 800de12:	6813      	ldr	r3, [r2, #0]
 800de14:	4610      	mov	r0, r2
 800de16:	b933      	cbnz	r3, 800de26 <_free_r+0x2e>
 800de18:	6063      	str	r3, [r4, #4]
 800de1a:	6014      	str	r4, [r2, #0]
 800de1c:	4628      	mov	r0, r5
 800de1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de22:	f000 b8ee 	b.w	800e002 <__malloc_unlock>
 800de26:	42a3      	cmp	r3, r4
 800de28:	d90c      	bls.n	800de44 <_free_r+0x4c>
 800de2a:	6821      	ldr	r1, [r4, #0]
 800de2c:	1862      	adds	r2, r4, r1
 800de2e:	4293      	cmp	r3, r2
 800de30:	bf04      	itt	eq
 800de32:	681a      	ldreq	r2, [r3, #0]
 800de34:	685b      	ldreq	r3, [r3, #4]
 800de36:	6063      	str	r3, [r4, #4]
 800de38:	bf04      	itt	eq
 800de3a:	1852      	addeq	r2, r2, r1
 800de3c:	6022      	streq	r2, [r4, #0]
 800de3e:	6004      	str	r4, [r0, #0]
 800de40:	e7ec      	b.n	800de1c <_free_r+0x24>
 800de42:	4613      	mov	r3, r2
 800de44:	685a      	ldr	r2, [r3, #4]
 800de46:	b10a      	cbz	r2, 800de4c <_free_r+0x54>
 800de48:	42a2      	cmp	r2, r4
 800de4a:	d9fa      	bls.n	800de42 <_free_r+0x4a>
 800de4c:	6819      	ldr	r1, [r3, #0]
 800de4e:	1858      	adds	r0, r3, r1
 800de50:	42a0      	cmp	r0, r4
 800de52:	d10b      	bne.n	800de6c <_free_r+0x74>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	4401      	add	r1, r0
 800de58:	1858      	adds	r0, r3, r1
 800de5a:	4282      	cmp	r2, r0
 800de5c:	6019      	str	r1, [r3, #0]
 800de5e:	d1dd      	bne.n	800de1c <_free_r+0x24>
 800de60:	6810      	ldr	r0, [r2, #0]
 800de62:	6852      	ldr	r2, [r2, #4]
 800de64:	605a      	str	r2, [r3, #4]
 800de66:	4401      	add	r1, r0
 800de68:	6019      	str	r1, [r3, #0]
 800de6a:	e7d7      	b.n	800de1c <_free_r+0x24>
 800de6c:	d902      	bls.n	800de74 <_free_r+0x7c>
 800de6e:	230c      	movs	r3, #12
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	e7d3      	b.n	800de1c <_free_r+0x24>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	1821      	adds	r1, r4, r0
 800de78:	428a      	cmp	r2, r1
 800de7a:	bf04      	itt	eq
 800de7c:	6811      	ldreq	r1, [r2, #0]
 800de7e:	6852      	ldreq	r2, [r2, #4]
 800de80:	6062      	str	r2, [r4, #4]
 800de82:	bf04      	itt	eq
 800de84:	1809      	addeq	r1, r1, r0
 800de86:	6021      	streq	r1, [r4, #0]
 800de88:	605c      	str	r4, [r3, #4]
 800de8a:	e7c7      	b.n	800de1c <_free_r+0x24>
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
 800de8e:	bf00      	nop
 800de90:	200002bc 	.word	0x200002bc

0800de94 <_malloc_r>:
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	1ccd      	adds	r5, r1, #3
 800de98:	f025 0503 	bic.w	r5, r5, #3
 800de9c:	3508      	adds	r5, #8
 800de9e:	2d0c      	cmp	r5, #12
 800dea0:	bf38      	it	cc
 800dea2:	250c      	movcc	r5, #12
 800dea4:	2d00      	cmp	r5, #0
 800dea6:	4606      	mov	r6, r0
 800dea8:	db01      	blt.n	800deae <_malloc_r+0x1a>
 800deaa:	42a9      	cmp	r1, r5
 800deac:	d903      	bls.n	800deb6 <_malloc_r+0x22>
 800deae:	230c      	movs	r3, #12
 800deb0:	6033      	str	r3, [r6, #0]
 800deb2:	2000      	movs	r0, #0
 800deb4:	bd70      	pop	{r4, r5, r6, pc}
 800deb6:	f000 f8a3 	bl	800e000 <__malloc_lock>
 800deba:	4a21      	ldr	r2, [pc, #132]	; (800df40 <_malloc_r+0xac>)
 800debc:	6814      	ldr	r4, [r2, #0]
 800debe:	4621      	mov	r1, r4
 800dec0:	b991      	cbnz	r1, 800dee8 <_malloc_r+0x54>
 800dec2:	4c20      	ldr	r4, [pc, #128]	; (800df44 <_malloc_r+0xb0>)
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	b91b      	cbnz	r3, 800ded0 <_malloc_r+0x3c>
 800dec8:	4630      	mov	r0, r6
 800deca:	f000 f845 	bl	800df58 <_sbrk_r>
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	4629      	mov	r1, r5
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 f840 	bl	800df58 <_sbrk_r>
 800ded8:	1c43      	adds	r3, r0, #1
 800deda:	d124      	bne.n	800df26 <_malloc_r+0x92>
 800dedc:	230c      	movs	r3, #12
 800dede:	6033      	str	r3, [r6, #0]
 800dee0:	4630      	mov	r0, r6
 800dee2:	f000 f88e 	bl	800e002 <__malloc_unlock>
 800dee6:	e7e4      	b.n	800deb2 <_malloc_r+0x1e>
 800dee8:	680b      	ldr	r3, [r1, #0]
 800deea:	1b5b      	subs	r3, r3, r5
 800deec:	d418      	bmi.n	800df20 <_malloc_r+0x8c>
 800deee:	2b0b      	cmp	r3, #11
 800def0:	d90f      	bls.n	800df12 <_malloc_r+0x7e>
 800def2:	600b      	str	r3, [r1, #0]
 800def4:	50cd      	str	r5, [r1, r3]
 800def6:	18cc      	adds	r4, r1, r3
 800def8:	4630      	mov	r0, r6
 800defa:	f000 f882 	bl	800e002 <__malloc_unlock>
 800defe:	f104 000b 	add.w	r0, r4, #11
 800df02:	1d23      	adds	r3, r4, #4
 800df04:	f020 0007 	bic.w	r0, r0, #7
 800df08:	1ac3      	subs	r3, r0, r3
 800df0a:	d0d3      	beq.n	800deb4 <_malloc_r+0x20>
 800df0c:	425a      	negs	r2, r3
 800df0e:	50e2      	str	r2, [r4, r3]
 800df10:	e7d0      	b.n	800deb4 <_malloc_r+0x20>
 800df12:	428c      	cmp	r4, r1
 800df14:	684b      	ldr	r3, [r1, #4]
 800df16:	bf16      	itet	ne
 800df18:	6063      	strne	r3, [r4, #4]
 800df1a:	6013      	streq	r3, [r2, #0]
 800df1c:	460c      	movne	r4, r1
 800df1e:	e7eb      	b.n	800def8 <_malloc_r+0x64>
 800df20:	460c      	mov	r4, r1
 800df22:	6849      	ldr	r1, [r1, #4]
 800df24:	e7cc      	b.n	800dec0 <_malloc_r+0x2c>
 800df26:	1cc4      	adds	r4, r0, #3
 800df28:	f024 0403 	bic.w	r4, r4, #3
 800df2c:	42a0      	cmp	r0, r4
 800df2e:	d005      	beq.n	800df3c <_malloc_r+0xa8>
 800df30:	1a21      	subs	r1, r4, r0
 800df32:	4630      	mov	r0, r6
 800df34:	f000 f810 	bl	800df58 <_sbrk_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	d0cf      	beq.n	800dedc <_malloc_r+0x48>
 800df3c:	6025      	str	r5, [r4, #0]
 800df3e:	e7db      	b.n	800def8 <_malloc_r+0x64>
 800df40:	200002bc 	.word	0x200002bc
 800df44:	200002c0 	.word	0x200002c0

0800df48 <realloc>:
 800df48:	4b02      	ldr	r3, [pc, #8]	; (800df54 <realloc+0xc>)
 800df4a:	460a      	mov	r2, r1
 800df4c:	4601      	mov	r1, r0
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	f000 b858 	b.w	800e004 <_realloc_r>
 800df54:	20000100 	.word	0x20000100

0800df58 <_sbrk_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4c06      	ldr	r4, [pc, #24]	; (800df74 <_sbrk_r+0x1c>)
 800df5c:	2300      	movs	r3, #0
 800df5e:	4605      	mov	r5, r0
 800df60:	4608      	mov	r0, r1
 800df62:	6023      	str	r3, [r4, #0]
 800df64:	f7f3 f8cc 	bl	8001100 <_sbrk>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_sbrk_r+0x1a>
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_sbrk_r+0x1a>
 800df70:	602b      	str	r3, [r5, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	20000454 	.word	0x20000454

0800df78 <_raise_r>:
 800df78:	291f      	cmp	r1, #31
 800df7a:	b538      	push	{r3, r4, r5, lr}
 800df7c:	4604      	mov	r4, r0
 800df7e:	460d      	mov	r5, r1
 800df80:	d904      	bls.n	800df8c <_raise_r+0x14>
 800df82:	2316      	movs	r3, #22
 800df84:	6003      	str	r3, [r0, #0]
 800df86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df8e:	b112      	cbz	r2, 800df96 <_raise_r+0x1e>
 800df90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df94:	b94b      	cbnz	r3, 800dfaa <_raise_r+0x32>
 800df96:	4620      	mov	r0, r4
 800df98:	f000 f830 	bl	800dffc <_getpid_r>
 800df9c:	462a      	mov	r2, r5
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfa6:	f000 b817 	b.w	800dfd8 <_kill_r>
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d00a      	beq.n	800dfc4 <_raise_r+0x4c>
 800dfae:	1c59      	adds	r1, r3, #1
 800dfb0:	d103      	bne.n	800dfba <_raise_r+0x42>
 800dfb2:	2316      	movs	r3, #22
 800dfb4:	6003      	str	r3, [r0, #0]
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	e7e7      	b.n	800df8a <_raise_r+0x12>
 800dfba:	2400      	movs	r4, #0
 800dfbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	4798      	blx	r3
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	e7e0      	b.n	800df8a <_raise_r+0x12>

0800dfc8 <raise>:
 800dfc8:	4b02      	ldr	r3, [pc, #8]	; (800dfd4 <raise+0xc>)
 800dfca:	4601      	mov	r1, r0
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	f7ff bfd3 	b.w	800df78 <_raise_r>
 800dfd2:	bf00      	nop
 800dfd4:	20000100 	.word	0x20000100

0800dfd8 <_kill_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4c07      	ldr	r4, [pc, #28]	; (800dff8 <_kill_r+0x20>)
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4605      	mov	r5, r0
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	4611      	mov	r1, r2
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	f7f3 f871 	bl	80010cc <_kill>
 800dfea:	1c43      	adds	r3, r0, #1
 800dfec:	d102      	bne.n	800dff4 <_kill_r+0x1c>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	b103      	cbz	r3, 800dff4 <_kill_r+0x1c>
 800dff2:	602b      	str	r3, [r5, #0]
 800dff4:	bd38      	pop	{r3, r4, r5, pc}
 800dff6:	bf00      	nop
 800dff8:	20000454 	.word	0x20000454

0800dffc <_getpid_r>:
 800dffc:	f7f3 b85e 	b.w	80010bc <_getpid>

0800e000 <__malloc_lock>:
 800e000:	4770      	bx	lr

0800e002 <__malloc_unlock>:
 800e002:	4770      	bx	lr

0800e004 <_realloc_r>:
 800e004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e006:	4607      	mov	r7, r0
 800e008:	4614      	mov	r4, r2
 800e00a:	460e      	mov	r6, r1
 800e00c:	b921      	cbnz	r1, 800e018 <_realloc_r+0x14>
 800e00e:	4611      	mov	r1, r2
 800e010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e014:	f7ff bf3e 	b.w	800de94 <_malloc_r>
 800e018:	b922      	cbnz	r2, 800e024 <_realloc_r+0x20>
 800e01a:	f7ff feed 	bl	800ddf8 <_free_r>
 800e01e:	4625      	mov	r5, r4
 800e020:	4628      	mov	r0, r5
 800e022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e024:	f000 f814 	bl	800e050 <_malloc_usable_size_r>
 800e028:	42a0      	cmp	r0, r4
 800e02a:	d20f      	bcs.n	800e04c <_realloc_r+0x48>
 800e02c:	4621      	mov	r1, r4
 800e02e:	4638      	mov	r0, r7
 800e030:	f7ff ff30 	bl	800de94 <_malloc_r>
 800e034:	4605      	mov	r5, r0
 800e036:	2800      	cmp	r0, #0
 800e038:	d0f2      	beq.n	800e020 <_realloc_r+0x1c>
 800e03a:	4631      	mov	r1, r6
 800e03c:	4622      	mov	r2, r4
 800e03e:	f7ff fec7 	bl	800ddd0 <memcpy>
 800e042:	4631      	mov	r1, r6
 800e044:	4638      	mov	r0, r7
 800e046:	f7ff fed7 	bl	800ddf8 <_free_r>
 800e04a:	e7e9      	b.n	800e020 <_realloc_r+0x1c>
 800e04c:	4635      	mov	r5, r6
 800e04e:	e7e7      	b.n	800e020 <_realloc_r+0x1c>

0800e050 <_malloc_usable_size_r>:
 800e050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e054:	1f18      	subs	r0, r3, #4
 800e056:	2b00      	cmp	r3, #0
 800e058:	bfbc      	itt	lt
 800e05a:	580b      	ldrlt	r3, [r1, r0]
 800e05c:	18c0      	addlt	r0, r0, r3
 800e05e:	4770      	bx	lr

0800e060 <_init>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	bf00      	nop
 800e064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e066:	bc08      	pop	{r3}
 800e068:	469e      	mov	lr, r3
 800e06a:	4770      	bx	lr

0800e06c <_fini>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	bf00      	nop
 800e070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e072:	bc08      	pop	{r3}
 800e074:	469e      	mov	lr, r3
 800e076:	4770      	bx	lr
