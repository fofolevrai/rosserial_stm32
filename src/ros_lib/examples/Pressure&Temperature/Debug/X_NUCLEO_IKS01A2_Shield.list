
X_NUCLEO_IKS01A2_Shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000952c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d8  080099d8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e0  080099e0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080099ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  20000088  08009a70  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ccc  08009a70  00020ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015514  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a62  00000000  00000000  000355c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e0  00000000  00000000  00038030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00039210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a16  00000000  00000000  0003a310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccae  00000000  00000000  00052d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009482a  00000000  00000000  0005f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f41fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  000f427c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000088 	.word	0x20000088
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080096a8 	.word	0x080096a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000008c 	.word	0x2000008c
 80001d0:	080096a8 	.word	0x080096a8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000322:	f1a4 0401 	sub.w	r4, r4, #1
 8000326:	d1e9      	bne.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_uldivmod>:
 8000980:	b953      	cbnz	r3, 8000998 <__aeabi_uldivmod+0x18>
 8000982:	b94a      	cbnz	r2, 8000998 <__aeabi_uldivmod+0x18>
 8000984:	2900      	cmp	r1, #0
 8000986:	bf08      	it	eq
 8000988:	2800      	cmpeq	r0, #0
 800098a:	bf1c      	itt	ne
 800098c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000990:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000994:	f000 b972 	b.w	8000c7c <__aeabi_idiv0>
 8000998:	f1ad 0c08 	sub.w	ip, sp, #8
 800099c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a0:	f000 f806 	bl	80009b0 <__udivmoddi4>
 80009a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ac:	b004      	add	sp, #16
 80009ae:	4770      	bx	lr

080009b0 <__udivmoddi4>:
 80009b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b4:	9e08      	ldr	r6, [sp, #32]
 80009b6:	4604      	mov	r4, r0
 80009b8:	4688      	mov	r8, r1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d14b      	bne.n	8000a56 <__udivmoddi4+0xa6>
 80009be:	428a      	cmp	r2, r1
 80009c0:	4615      	mov	r5, r2
 80009c2:	d967      	bls.n	8000a94 <__udivmoddi4+0xe4>
 80009c4:	fab2 f282 	clz	r2, r2
 80009c8:	b14a      	cbz	r2, 80009de <__udivmoddi4+0x2e>
 80009ca:	f1c2 0720 	rsb	r7, r2, #32
 80009ce:	fa01 f302 	lsl.w	r3, r1, r2
 80009d2:	fa20 f707 	lsr.w	r7, r0, r7
 80009d6:	4095      	lsls	r5, r2
 80009d8:	ea47 0803 	orr.w	r8, r7, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009e2:	0c23      	lsrs	r3, r4, #16
 80009e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80009e8:	fa1f fc85 	uxth.w	ip, r5
 80009ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80009f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f4:	fb07 f10c 	mul.w	r1, r7, ip
 80009f8:	4299      	cmp	r1, r3
 80009fa:	d909      	bls.n	8000a10 <__udivmoddi4+0x60>
 80009fc:	18eb      	adds	r3, r5, r3
 80009fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a02:	f080 811b 	bcs.w	8000c3c <__udivmoddi4+0x28c>
 8000a06:	4299      	cmp	r1, r3
 8000a08:	f240 8118 	bls.w	8000c3c <__udivmoddi4+0x28c>
 8000a0c:	3f02      	subs	r7, #2
 8000a0e:	442b      	add	r3, r5
 8000a10:	1a5b      	subs	r3, r3, r1
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a20:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a24:	45a4      	cmp	ip, r4
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x8c>
 8000a28:	192c      	adds	r4, r5, r4
 8000a2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a2e:	f080 8107 	bcs.w	8000c40 <__udivmoddi4+0x290>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	f240 8104 	bls.w	8000c40 <__udivmoddi4+0x290>
 8000a38:	3802      	subs	r0, #2
 8000a3a:	442c      	add	r4, r5
 8000a3c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a40:	eba4 040c 	sub.w	r4, r4, ip
 8000a44:	2700      	movs	r7, #0
 8000a46:	b11e      	cbz	r6, 8000a50 <__udivmoddi4+0xa0>
 8000a48:	40d4      	lsrs	r4, r2
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e9c6 4300 	strd	r4, r3, [r6]
 8000a50:	4639      	mov	r1, r7
 8000a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d909      	bls.n	8000a6e <__udivmoddi4+0xbe>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	f000 80eb 	beq.w	8000c36 <__udivmoddi4+0x286>
 8000a60:	2700      	movs	r7, #0
 8000a62:	e9c6 0100 	strd	r0, r1, [r6]
 8000a66:	4638      	mov	r0, r7
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	fab3 f783 	clz	r7, r3
 8000a72:	2f00      	cmp	r7, #0
 8000a74:	d147      	bne.n	8000b06 <__udivmoddi4+0x156>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	d302      	bcc.n	8000a80 <__udivmoddi4+0xd0>
 8000a7a:	4282      	cmp	r2, r0
 8000a7c:	f200 80fa 	bhi.w	8000c74 <__udivmoddi4+0x2c4>
 8000a80:	1a84      	subs	r4, r0, r2
 8000a82:	eb61 0303 	sbc.w	r3, r1, r3
 8000a86:	2001      	movs	r0, #1
 8000a88:	4698      	mov	r8, r3
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d0e0      	beq.n	8000a50 <__udivmoddi4+0xa0>
 8000a8e:	e9c6 4800 	strd	r4, r8, [r6]
 8000a92:	e7dd      	b.n	8000a50 <__udivmoddi4+0xa0>
 8000a94:	b902      	cbnz	r2, 8000a98 <__udivmoddi4+0xe8>
 8000a96:	deff      	udf	#255	; 0xff
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	f040 808f 	bne.w	8000bc0 <__udivmoddi4+0x210>
 8000aa2:	1b49      	subs	r1, r1, r5
 8000aa4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa8:	fa1f f885 	uxth.w	r8, r5
 8000aac:	2701      	movs	r7, #1
 8000aae:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ab2:	0c23      	lsrs	r3, r4, #16
 8000ab4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ab8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000abc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ac0:	4299      	cmp	r1, r3
 8000ac2:	d907      	bls.n	8000ad4 <__udivmoddi4+0x124>
 8000ac4:	18eb      	adds	r3, r5, r3
 8000ac6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x122>
 8000acc:	4299      	cmp	r1, r3
 8000ace:	f200 80cd 	bhi.w	8000c6c <__udivmoddi4+0x2bc>
 8000ad2:	4684      	mov	ip, r0
 8000ad4:	1a59      	subs	r1, r3, r1
 8000ad6:	b2a3      	uxth	r3, r4
 8000ad8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000adc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ae0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ae4:	fb08 f800 	mul.w	r8, r8, r0
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	d907      	bls.n	8000afc <__udivmoddi4+0x14c>
 8000aec:	192c      	adds	r4, r5, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af2:	d202      	bcs.n	8000afa <__udivmoddi4+0x14a>
 8000af4:	45a0      	cmp	r8, r4
 8000af6:	f200 80b6 	bhi.w	8000c66 <__udivmoddi4+0x2b6>
 8000afa:	4618      	mov	r0, r3
 8000afc:	eba4 0408 	sub.w	r4, r4, r8
 8000b00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b04:	e79f      	b.n	8000a46 <__udivmoddi4+0x96>
 8000b06:	f1c7 0c20 	rsb	ip, r7, #32
 8000b0a:	40bb      	lsls	r3, r7
 8000b0c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b10:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b14:	fa01 f407 	lsl.w	r4, r1, r7
 8000b18:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b1c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b20:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b24:	4325      	orrs	r5, r4
 8000b26:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b2a:	0c2c      	lsrs	r4, r5, #16
 8000b2c:	fb08 3319 	mls	r3, r8, r9, r3
 8000b30:	fa1f fa8e 	uxth.w	sl, lr
 8000b34:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b38:	fb09 f40a 	mul.w	r4, r9, sl
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	fa02 f207 	lsl.w	r2, r2, r7
 8000b42:	fa00 f107 	lsl.w	r1, r0, r7
 8000b46:	d90b      	bls.n	8000b60 <__udivmoddi4+0x1b0>
 8000b48:	eb1e 0303 	adds.w	r3, lr, r3
 8000b4c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b50:	f080 8087 	bcs.w	8000c62 <__udivmoddi4+0x2b2>
 8000b54:	429c      	cmp	r4, r3
 8000b56:	f240 8084 	bls.w	8000c62 <__udivmoddi4+0x2b2>
 8000b5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000b5e:	4473      	add	r3, lr
 8000b60:	1b1b      	subs	r3, r3, r4
 8000b62:	b2ad      	uxth	r5, r5
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b70:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b74:	45a2      	cmp	sl, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x1da>
 8000b78:	eb1e 0404 	adds.w	r4, lr, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b80:	d26b      	bcs.n	8000c5a <__udivmoddi4+0x2aa>
 8000b82:	45a2      	cmp	sl, r4
 8000b84:	d969      	bls.n	8000c5a <__udivmoddi4+0x2aa>
 8000b86:	3802      	subs	r0, #2
 8000b88:	4474      	add	r4, lr
 8000b8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b92:	eba4 040a 	sub.w	r4, r4, sl
 8000b96:	454c      	cmp	r4, r9
 8000b98:	46c2      	mov	sl, r8
 8000b9a:	464b      	mov	r3, r9
 8000b9c:	d354      	bcc.n	8000c48 <__udivmoddi4+0x298>
 8000b9e:	d051      	beq.n	8000c44 <__udivmoddi4+0x294>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d069      	beq.n	8000c78 <__udivmoddi4+0x2c8>
 8000ba4:	ebb1 050a 	subs.w	r5, r1, sl
 8000ba8:	eb64 0403 	sbc.w	r4, r4, r3
 8000bac:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bb0:	40fd      	lsrs	r5, r7
 8000bb2:	40fc      	lsrs	r4, r7
 8000bb4:	ea4c 0505 	orr.w	r5, ip, r5
 8000bb8:	e9c6 5400 	strd	r5, r4, [r6]
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e747      	b.n	8000a50 <__udivmoddi4+0xa0>
 8000bc0:	f1c2 0320 	rsb	r3, r2, #32
 8000bc4:	fa20 f703 	lsr.w	r7, r0, r3
 8000bc8:	4095      	lsls	r5, r2
 8000bca:	fa01 f002 	lsl.w	r0, r1, r2
 8000bce:	fa21 f303 	lsr.w	r3, r1, r3
 8000bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd6:	4338      	orrs	r0, r7
 8000bd8:	0c01      	lsrs	r1, r0, #16
 8000bda:	fbb3 f7fe 	udiv	r7, r3, lr
 8000bde:	fa1f f885 	uxth.w	r8, r5
 8000be2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000be6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bea:	fb07 f308 	mul.w	r3, r7, r8
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x256>
 8000bf6:	1869      	adds	r1, r5, r1
 8000bf8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000bfc:	d22f      	bcs.n	8000c5e <__udivmoddi4+0x2ae>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d92d      	bls.n	8000c5e <__udivmoddi4+0x2ae>
 8000c02:	3f02      	subs	r7, #2
 8000c04:	4429      	add	r1, r5
 8000c06:	1acb      	subs	r3, r1, r3
 8000c08:	b281      	uxth	r1, r0
 8000c0a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c16:	fb00 f308 	mul.w	r3, r0, r8
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x27e>
 8000c1e:	1869      	adds	r1, r5, r1
 8000c20:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c24:	d217      	bcs.n	8000c56 <__udivmoddi4+0x2a6>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d915      	bls.n	8000c56 <__udivmoddi4+0x2a6>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4429      	add	r1, r5
 8000c2e:	1ac9      	subs	r1, r1, r3
 8000c30:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c34:	e73b      	b.n	8000aae <__udivmoddi4+0xfe>
 8000c36:	4637      	mov	r7, r6
 8000c38:	4630      	mov	r0, r6
 8000c3a:	e709      	b.n	8000a50 <__udivmoddi4+0xa0>
 8000c3c:	4607      	mov	r7, r0
 8000c3e:	e6e7      	b.n	8000a10 <__udivmoddi4+0x60>
 8000c40:	4618      	mov	r0, r3
 8000c42:	e6fb      	b.n	8000a3c <__udivmoddi4+0x8c>
 8000c44:	4541      	cmp	r1, r8
 8000c46:	d2ab      	bcs.n	8000ba0 <__udivmoddi4+0x1f0>
 8000c48:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c4c:	eb69 020e 	sbc.w	r2, r9, lr
 8000c50:	3801      	subs	r0, #1
 8000c52:	4613      	mov	r3, r2
 8000c54:	e7a4      	b.n	8000ba0 <__udivmoddi4+0x1f0>
 8000c56:	4660      	mov	r0, ip
 8000c58:	e7e9      	b.n	8000c2e <__udivmoddi4+0x27e>
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	e795      	b.n	8000b8a <__udivmoddi4+0x1da>
 8000c5e:	4667      	mov	r7, ip
 8000c60:	e7d1      	b.n	8000c06 <__udivmoddi4+0x256>
 8000c62:	4681      	mov	r9, r0
 8000c64:	e77c      	b.n	8000b60 <__udivmoddi4+0x1b0>
 8000c66:	3802      	subs	r0, #2
 8000c68:	442c      	add	r4, r5
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0x14c>
 8000c6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c70:	442b      	add	r3, r5
 8000c72:	e72f      	b.n	8000ad4 <__udivmoddi4+0x124>
 8000c74:	4638      	mov	r0, r7
 8000c76:	e708      	b.n	8000a8a <__udivmoddi4+0xda>
 8000c78:	4637      	mov	r7, r6
 8000c7a:	e6e9      	b.n	8000a50 <__udivmoddi4+0xa0>

08000c7c <__aeabi_idiv0>:
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0a5a      	lsrs	r2, r3, #9
 8000c90:	490f      	ldr	r1, [pc, #60]	; (8000cd0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000c92:	fba1 1202 	umull	r1, r2, r1, r2
 8000c96:	09d2      	lsrs	r2, r2, #7
 8000c98:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000c9a:	fb01 f202 	mul.w	r2, r1, r2
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	0a5b      	lsrs	r3, r3, #9
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	09db      	lsrs	r3, r3, #7
 8000cb0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	441a      	add	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	00044b83 	.word	0x00044b83
 8000cd4:	3b9aca00 	.word	0x3b9aca00

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cdc:	f003 fba0 	bl	8004420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce0:	f000 f810 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce4:	f000 f958 	bl	8000f98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce8:	f000 f91e 	bl	8000f28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cec:	f000 f8f2 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cf0:	f000 f874 	bl	8000ddc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cf4:	f000 f8a0 	bl	8000e38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000cf8:	f002 f99e 	bl	8003038 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000cfc:	f002 fa72 	bl	80031e4 <loop>
 8000d00:	e7fc      	b.n	8000cfc <main+0x24>
	...

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2230      	movs	r2, #48	; 0x30
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f008 fb8b 	bl	800942e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SystemClock_Config+0xd4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <SystemClock_Config+0xd4>)
 8000d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <SystemClock_Config+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d86:	2307      	movs	r3, #7
 8000d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f006 face 	bl	8007330 <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d9a:	f000 f96d 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fd28 	bl	8007810 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000dc6:	f000 f957 	bl	8001078 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3750      	adds	r7, #80	; 0x50
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <MX_I2C1_Init+0x54>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x58>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_I2C1_Init+0x50>)
 8000e1a:	f004 fa07 	bl	800522c <HAL_I2C_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e24:	f000 f928 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000b30 	.word	0x20000b30
 8000e30:	40005400 	.word	0x40005400
 8000e34:	000186a0 	.word	0x000186a0

08000e38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e56:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <MX_TIM3_Init+0x98>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e5c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e7e:	f006 feb9 	bl	8007bf4 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e88:	f000 f8f6 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000e9a:	f007 f82d 	bl	8007ef8 <HAL_TIM_ConfigClockSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 f8e8 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_TIM3_Init+0x94>)
 8000eb6:	f007 fa19 	bl	80082ec <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f000 f8da 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000b84 	.word	0x20000b84
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_USART2_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f007 fa70 	bl	80083f0 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 f8af 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000c84 	.word	0x20000c84
 8000f24:	40004400 	.word	0x40004400

08000f28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_DMA_Init+0x6c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <MX_DMA_Init+0x6c>)
 8000f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_DMA_Init+0x6c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200b      	movs	r0, #11
 8000f50:	f003 fbd5 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f54:	200b      	movs	r0, #11
 8000f56:	f003 fbee 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2010      	movs	r0, #16
 8000f60:	f003 fbcd 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f64:	2010      	movs	r0, #16
 8000f66:	f003 fbe6 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f003 fbc5 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f74:	2011      	movs	r0, #17
 8000f76:	f003 fbde 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	202f      	movs	r0, #47	; 0x2f
 8000f80:	f003 fbbd 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f84:	202f      	movs	r0, #47	; 0x2f
 8000f86:	f003 fbd6 	bl	8004736 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <MX_GPIO_Init+0xd0>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ExtLED_Pin|LD2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2121      	movs	r1, #33	; 0x21
 8001022:	4812      	ldr	r0, [pc, #72]	; (800106c <MX_GPIO_Init+0xd4>)
 8001024:	f004 f8ce 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_GPIO_Init+0xd8>)
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0xdc>)
 800103e:	f003 ff3f 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ExtLED_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ExtLED_Pin|LD2_Pin;
 8001042:	2321      	movs	r3, #33	; 0x21
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_GPIO_Init+0xd4>)
 800105a:	f003 ff31 	bl	8004ec0 <HAL_GPIO_Init>

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	10210000 	.word	0x10210000
 8001074:	40020800 	.word	0x40020800

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(ExtLED_GPIO_Port, ExtLED_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2101      	movs	r1, #1
 8001080:	4801      	ldr	r0, [pc, #4]	; (8001088 <Error_Handler+0x10>)
 8001082:	f004 f89f 	bl	80051c4 <HAL_GPIO_WritePin>
	while(1);
 8001086:	e7fe      	b.n	8001086 <Error_Handler+0xe>
 8001088:	40020000 	.word	0x40020000

0800108c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	080099a8 	.word	0x080099a8

080010ac <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffd6 	bl	800108c <_ZN3ros3MsgC1Ev>
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3308      	adds	r3, #8
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffdb 	bl	80010ac <_ZN3ros4TimeC1Ev>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80010fa:	611a      	str	r2, [r3, #16]
    {
    }
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08009990 	.word	0x08009990
 800110c:	080096c0 	.word	0x080096c0

08001110 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6859      	ldr	r1, [r3, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	b2ca      	uxtb	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	0a19      	lsrs	r1, r3, #8
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	0c19      	lsrs	r1, r3, #16
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3302      	adds	r3, #2
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4413      	add	r3, r2
 800114c:	b2ca      	uxtb	r2, r1
 800114e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	0e19      	lsrs	r1, r3, #24
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3303      	adds	r3, #3
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3304      	adds	r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6899      	ldr	r1, [r3, #8]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	0a19      	lsrs	r1, r3, #8
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	0c19      	lsrs	r1, r3, #16
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3302      	adds	r3, #2
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	0e19      	lsrs	r1, r3, #24
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3303      	adds	r3, #3
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	b2ca      	uxtb	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3304      	adds	r3, #4
 80011b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68d9      	ldr	r1, [r3, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a19      	lsrs	r1, r3, #8
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	b2ca      	uxtb	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	0c19      	lsrs	r1, r3, #16
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3302      	adds	r3, #2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0e19      	lsrs	r1, r3, #24
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3303      	adds	r3, #3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2ca      	uxtb	r2, r1
 80011f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3304      	adds	r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffe7 	bl	80001d4 <strlen>
 8001206:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4413      	add	r3, r2
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f002 f861 	bl	80032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3304      	adds	r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	18d0      	adds	r0, r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4619      	mov	r1, r3
 800122a:	f008 f8f5 	bl	8009418 <memcpy>
      offset += length_frame_id;
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
      return offset;
 8001236:	68fb      	ldr	r3, [r7, #12]
    }
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	3301      	adds	r3, #1
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	3302      	adds	r3, #2
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	440b      	add	r3, r1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	3303      	adds	r3, #3
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	440b      	add	r3, r1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	061b      	lsls	r3, r3, #24
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	3304      	adds	r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	3301      	adds	r3, #1
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	440b      	add	r3, r1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3302      	adds	r3, #2
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3303      	adds	r3, #3
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	440b      	add	r3, r1
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	3304      	adds	r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	3301      	adds	r3, #1
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	3302      	adds	r3, #2
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	440b      	add	r3, r1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3303      	adds	r3, #3
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	440b      	add	r3, r1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	061b      	lsls	r3, r3, #24
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3304      	adds	r3, #4
 800134e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	441a      	add	r2, r3
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f001 ffd9 	bl	8003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3304      	adds	r3, #4
 8001366:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	d20c      	bcs.n	8001392 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	441a      	add	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3b01      	subs	r3, #1
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	440b      	add	r3, r1
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e7ec      	b.n	800136c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	3b01      	subs	r3, #1
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	441a      	add	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
     return offset;
 80013b6:	693b      	ldr	r3, [r7, #16]
    }
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	080096c4 	.word	0x080096c4

080013dc <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	080096d4 	.word	0x080096d4

080013f8 <_ZN11sensor_msgs13FluidPressureC1Ev>:
      typedef double _fluid_pressure_type;
      _fluid_pressure_type fluid_pressure;
      typedef double _variance_type;
      _variance_type variance;

    FluidPressure():
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
      header(),
      fluid_pressure(0),
      variance(0)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe42 	bl	800108c <_ZN3ros3MsgC1Ev>
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <_ZN11sensor_msgs13FluidPressureC1Ev+0x48>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe5c 	bl	80010d0 <_ZN8std_msgs6HeaderC1Ev>
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	f04f 0400 	mov.w	r4, #0
 8001422:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	f04f 0400 	mov.w	r4, #0
 8001430:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	08009978 	.word	0x08009978

08001444 <_ZNK11sensor_msgs13FluidPressure9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1d18      	adds	r0, r3, #4
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fe57 	bl	8001110 <_ZNK8std_msgs6Header9serializeEPh>
 8001462:	4602      	mov	r2, r0
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_fluid_pressure;
      u_fluid_pressure.real = this->fluid_pressure;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001470:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_fluid_pressure.base >> (8 * 0)) & 0xFF;
 8001474:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	440a      	add	r2, r1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_fluid_pressure.base >> (8 * 1)) & 0xFF;
 8001482:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	f04f 0400 	mov.w	r4, #0
 800148e:	0a0b      	lsrs	r3, r1, #8
 8001490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001494:	0a14      	lsrs	r4, r2, #8
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	3201      	adds	r2, #1
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	440a      	add	r2, r1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_fluid_pressure.base >> (8 * 2)) & 0xFF;
 80014a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	f04f 0400 	mov.w	r4, #0
 80014ae:	0c0b      	lsrs	r3, r1, #16
 80014b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014b4:	0c14      	lsrs	r4, r2, #16
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	3202      	adds	r2, #2
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	440a      	add	r2, r1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_fluid_pressure.base >> (8 * 3)) & 0xFF;
 80014c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	f04f 0400 	mov.w	r4, #0
 80014ce:	0e0b      	lsrs	r3, r1, #24
 80014d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014d4:	0e14      	lsrs	r4, r2, #24
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	3203      	adds	r2, #3
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	440a      	add	r2, r1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_fluid_pressure.base >> (8 * 4)) & 0xFF;
 80014e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	f04f 0400 	mov.w	r4, #0
 80014ee:	0013      	movs	r3, r2
 80014f0:	2400      	movs	r4, #0
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	3204      	adds	r2, #4
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	440a      	add	r2, r1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_fluid_pressure.base >> (8 * 5)) & 0xFF;
 80014fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f04f 0400 	mov.w	r4, #0
 800150a:	0a13      	lsrs	r3, r2, #8
 800150c:	2400      	movs	r4, #0
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	3205      	adds	r2, #5
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	440a      	add	r2, r1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_fluid_pressure.base >> (8 * 6)) & 0xFF;
 800151a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	f04f 0400 	mov.w	r4, #0
 8001526:	0c13      	lsrs	r3, r2, #16
 8001528:	2400      	movs	r4, #0
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	3206      	adds	r2, #6
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	440a      	add	r2, r1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_fluid_pressure.base >> (8 * 7)) & 0xFF;
 8001536:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f04f 0400 	mov.w	r4, #0
 8001542:	0e13      	lsrs	r3, r2, #24
 8001544:	2400      	movs	r4, #0
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	3207      	adds	r2, #7
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	440a      	add	r2, r1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->fluid_pressure);
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3308      	adds	r3, #8
 8001556:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.real = this->variance;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800155e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 8001562:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	440a      	add	r2, r1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 8001570:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	f04f 0400 	mov.w	r4, #0
 800157c:	0a0b      	lsrs	r3, r1, #8
 800157e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001582:	0a14      	lsrs	r4, r2, #8
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	3201      	adds	r2, #1
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	440a      	add	r2, r1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 8001590:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f04f 0400 	mov.w	r4, #0
 800159c:	0c0b      	lsrs	r3, r1, #16
 800159e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015a2:	0c14      	lsrs	r4, r2, #16
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	3202      	adds	r2, #2
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	440a      	add	r2, r1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 80015b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	f04f 0400 	mov.w	r4, #0
 80015bc:	0e0b      	lsrs	r3, r1, #24
 80015be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015c2:	0e14      	lsrs	r4, r2, #24
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	3203      	adds	r2, #3
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	440a      	add	r2, r1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 80015d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	0013      	movs	r3, r2
 80015de:	2400      	movs	r4, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	3204      	adds	r2, #4
 80015e4:	6839      	ldr	r1, [r7, #0]
 80015e6:	440a      	add	r2, r1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 80015ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	f04f 0400 	mov.w	r4, #0
 80015f8:	0a13      	lsrs	r3, r2, #8
 80015fa:	2400      	movs	r4, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	3205      	adds	r2, #5
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	440a      	add	r2, r1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 8001608:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	f04f 0400 	mov.w	r4, #0
 8001614:	0c13      	lsrs	r3, r2, #16
 8001616:	2400      	movs	r4, #0
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	3206      	adds	r2, #6
 800161c:	6839      	ldr	r1, [r7, #0]
 800161e:	440a      	add	r2, r1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 8001624:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	f04f 0400 	mov.w	r4, #0
 8001630:	0e13      	lsrs	r3, r2, #24
 8001632:	2400      	movs	r4, #0
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	3207      	adds	r2, #7
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	440a      	add	r2, r1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->variance);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3308      	adds	r3, #8
 8001644:	61fb      	str	r3, [r7, #28]
      return offset;
 8001646:	69fb      	ldr	r3, [r7, #28]
    }
 8001648:	4618      	mov	r0, r3
 800164a:	3724      	adds	r7, #36	; 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <_ZN11sensor_msgs13FluidPressure11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001654:	b08b      	sub	sp, #44	; 0x2c
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1d18      	adds	r0, r3, #4
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fde8 	bl	8001240 <_ZN8std_msgs6Header11deserializeEPh>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	4413      	add	r3, r2
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_fluid_pressure;
      u_fluid_pressure.base = 0;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	68b8      	ldr	r0, [r7, #8]
 800168c:	4403      	add	r3, r0
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	fa5f fa83 	uxtb.w	sl, r3
 8001694:	f04f 0b00 	mov.w	fp, #0
 8001698:	ea4a 0301 	orr.w	r3, sl, r1
 800169c:	ea4b 0402 	orr.w	r4, fp, r2
 80016a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016a4:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	3301      	adds	r3, #1
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b2d9      	uxtb	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	e9c7 3400 	strd	r3, r4, [r7]
 80016c4:	0213      	lsls	r3, r2, #8
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	020b      	lsls	r3, r1, #8
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016d8:	ea43 030a 	orr.w	r3, r3, sl
 80016dc:	ea44 040b 	orr.w	r4, r4, fp
 80016e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016e4:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3302      	adds	r3, #2
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2d9      	uxtb	r1, r3
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f04f 0400 	mov.w	r4, #0
 8001700:	e9c7 3400 	strd	r3, r4, [r7]
 8001704:	0413      	lsls	r3, r2, #16
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	040b      	lsls	r3, r1, #16
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001718:	ea43 030a 	orr.w	r3, r3, sl
 800171c:	ea44 040b 	orr.w	r4, r4, fp
 8001720:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001724:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3303      	adds	r3, #3
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	4403      	add	r3, r0
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f04f 0400 	mov.w	r4, #0
 8001738:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800173c:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8001740:	ea41 0308 	orr.w	r3, r1, r8
 8001744:	ea42 0409 	orr.w	r4, r2, r9
 8001748:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800174c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	3304      	adds	r3, #4
 8001754:	68b8      	ldr	r0, [r7, #8]
 8001756:	4403      	add	r3, r0
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	fa5f f883 	uxtb.w	r8, r3
 800175e:	f04f 0900 	mov.w	r9, #0
 8001762:	f04f 0a00 	mov.w	sl, #0
 8001766:	f04f 0b00 	mov.w	fp, #0
 800176a:	46c3      	mov	fp, r8
 800176c:	f04f 0a00 	mov.w	sl, #0
 8001770:	ea4a 0301 	orr.w	r3, sl, r1
 8001774:	ea4b 0402 	orr.w	r4, fp, r2
 8001778:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800177c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	3305      	adds	r3, #5
 8001784:	68b8      	ldr	r0, [r7, #8]
 8001786:	4403      	add	r3, r0
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	fa5f f883 	uxtb.w	r8, r3
 800178e:	f04f 0900 	mov.w	r9, #0
 8001792:	f04f 0a00 	mov.w	sl, #0
 8001796:	f04f 0b00 	mov.w	fp, #0
 800179a:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 800179e:	f04f 0a00 	mov.w	sl, #0
 80017a2:	ea4a 0301 	orr.w	r3, sl, r1
 80017a6:	ea4b 0402 	orr.w	r4, fp, r2
 80017aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80017ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3306      	adds	r3, #6
 80017b6:	68b8      	ldr	r0, [r7, #8]
 80017b8:	4403      	add	r3, r0
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	fa5f f883 	uxtb.w	r8, r3
 80017c0:	f04f 0900 	mov.w	r9, #0
 80017c4:	f04f 0a00 	mov.w	sl, #0
 80017c8:	f04f 0b00 	mov.w	fp, #0
 80017cc:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80017d0:	f04f 0a00 	mov.w	sl, #0
 80017d4:	ea4a 0301 	orr.w	r3, sl, r1
 80017d8:	ea4b 0402 	orr.w	r4, fp, r2
 80017dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_fluid_pressure.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80017e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	3307      	adds	r3, #7
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	4403      	add	r3, r0
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	fa5f f883 	uxtb.w	r8, r3
 80017f2:	f04f 0900 	mov.w	r9, #0
 80017f6:	f04f 0a00 	mov.w	sl, #0
 80017fa:	f04f 0b00 	mov.w	fp, #0
 80017fe:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8001802:	f04f 0a00 	mov.w	sl, #0
 8001806:	ea4a 0301 	orr.w	r3, sl, r1
 800180a:	ea4b 0402 	orr.w	r4, fp, r2
 800180e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->fluid_pressure = u_fluid_pressure.real;
 8001812:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->fluid_pressure);
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	3308      	adds	r3, #8
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.base = 0;
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800182e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	4403      	add	r3, r0
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	fa5f f883 	uxtb.w	r8, r3
 800183e:	f04f 0900 	mov.w	r9, #0
 8001842:	ea48 0301 	orr.w	r3, r8, r1
 8001846:	ea49 0402 	orr.w	r4, r9, r2
 800184a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800184e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2d9      	uxtb	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0a00 	mov.w	sl, #0
 8001866:	f04f 0b00 	mov.w	fp, #0
 800186a:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 800186e:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8001872:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8001876:	ea4a 0308 	orr.w	r3, sl, r8
 800187a:	ea4b 0409 	orr.w	r4, fp, r9
 800187e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001882:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3302      	adds	r3, #2
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4413      	add	r3, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2d9      	uxtb	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0a00 	mov.w	sl, #0
 800189a:	f04f 0b00 	mov.w	fp, #0
 800189e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80018a2:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 80018a6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80018aa:	ea4a 0308 	orr.w	r3, sl, r8
 80018ae:	ea4b 0409 	orr.w	r4, fp, r9
 80018b2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3303      	adds	r3, #3
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	4403      	add	r3, r0
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f04f 0400 	mov.w	r4, #0
 80018ca:	0a1e      	lsrs	r6, r3, #8
 80018cc:	061d      	lsls	r5, r3, #24
 80018ce:	ea41 0305 	orr.w	r3, r1, r5
 80018d2:	ea42 0406 	orr.w	r4, r2, r6
 80018d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80018da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	3304      	adds	r3, #4
 80018e2:	68b8      	ldr	r0, [r7, #8]
 80018e4:	4403      	add	r3, r0
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2dd      	uxtb	r5, r3
 80018ea:	f04f 0600 	mov.w	r6, #0
 80018ee:	f04f 0800 	mov.w	r8, #0
 80018f2:	f04f 0900 	mov.w	r9, #0
 80018f6:	46a9      	mov	r9, r5
 80018f8:	f04f 0800 	mov.w	r8, #0
 80018fc:	ea48 0301 	orr.w	r3, r8, r1
 8001900:	ea49 0402 	orr.w	r4, r9, r2
 8001904:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001908:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3305      	adds	r3, #5
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	4403      	add	r3, r0
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2dd      	uxtb	r5, r3
 8001918:	f04f 0600 	mov.w	r6, #0
 800191c:	f04f 0800 	mov.w	r8, #0
 8001920:	f04f 0900 	mov.w	r9, #0
 8001924:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8001928:	f04f 0800 	mov.w	r8, #0
 800192c:	ea48 0301 	orr.w	r3, r8, r1
 8001930:	ea49 0402 	orr.w	r4, r9, r2
 8001934:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001938:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3306      	adds	r3, #6
 8001940:	68b8      	ldr	r0, [r7, #8]
 8001942:	4403      	add	r3, r0
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b2dd      	uxtb	r5, r3
 8001948:	f04f 0600 	mov.w	r6, #0
 800194c:	f04f 0800 	mov.w	r8, #0
 8001950:	f04f 0900 	mov.w	r9, #0
 8001954:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8001958:	f04f 0800 	mov.w	r8, #0
 800195c:	ea48 0301 	orr.w	r3, r8, r1
 8001960:	ea49 0402 	orr.w	r4, r9, r2
 8001964:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001968:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3307      	adds	r3, #7
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	4403      	add	r3, r0
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2dd      	uxtb	r5, r3
 8001978:	f04f 0600 	mov.w	r6, #0
 800197c:	f04f 0800 	mov.w	r8, #0
 8001980:	f04f 0900 	mov.w	r9, #0
 8001984:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8001988:	f04f 0800 	mov.w	r8, #0
 800198c:	ea48 0301 	orr.w	r3, r8, r1
 8001990:	ea49 0402 	orr.w	r4, r9, r2
 8001994:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->variance = u_variance.real;
 8001998:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->variance);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3308      	adds	r3, #8
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80019aa:	4618      	mov	r0, r3
 80019ac:	372c      	adds	r7, #44	; 0x2c
 80019ae:	46bd      	mov	sp, r7
 80019b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019b4 <_ZN11sensor_msgs13FluidPressure7getTypeEv>:

    const char * getType(){ return "sensor_msgs/FluidPressure"; };
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <_ZN11sensor_msgs13FluidPressure7getTypeEv+0x18>)
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	080096f8 	.word	0x080096f8

080019d0 <_ZN11sensor_msgs13FluidPressure6getMD5Ev>:
    const char * getMD5(){ return "804dc5cea1c5306d6a2eb80b9833befe"; };
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <_ZN11sensor_msgs13FluidPressure6getMD5Ev+0x18>)
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	08009714 	.word	0x08009714

080019ec <_ZN11sensor_msgs11TemperatureC1Ev>:
      typedef double _temperature_type;
      _temperature_type temperature;
      typedef double _variance_type;
      _variance_type variance;

    Temperature():
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
      header(),
      temperature(0),
      variance(0)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fb48 	bl	800108c <_ZN3ros3MsgC1Ev>
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <_ZN11sensor_msgs11TemperatureC1Ev+0x48>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb62 	bl	80010d0 <_ZN8std_msgs6HeaderC1Ev>
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f04f 0400 	mov.w	r4, #0
 8001a24:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08009960 	.word	0x08009960

08001a38 <_ZNK11sensor_msgs11Temperature9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1d18      	adds	r0, r3, #4
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff fb5d 	bl	8001110 <_ZNK8std_msgs6Header9serializeEPh>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001a64:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8001a68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	440a      	add	r2, r1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8001a76:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	f04f 0400 	mov.w	r4, #0
 8001a82:	0a0b      	lsrs	r3, r1, #8
 8001a84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a88:	0a14      	lsrs	r4, r2, #8
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	3201      	adds	r2, #1
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	440a      	add	r2, r1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8001a96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f04f 0400 	mov.w	r4, #0
 8001aa2:	0c0b      	lsrs	r3, r1, #16
 8001aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001aa8:	0c14      	lsrs	r4, r2, #16
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	3202      	adds	r2, #2
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	440a      	add	r2, r1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8001ab6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	f04f 0400 	mov.w	r4, #0
 8001ac2:	0e0b      	lsrs	r3, r1, #24
 8001ac4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ac8:	0e14      	lsrs	r4, r2, #24
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	3203      	adds	r2, #3
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	440a      	add	r2, r1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_temperature.base >> (8 * 4)) & 0xFF;
 8001ad6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	f04f 0400 	mov.w	r4, #0
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	2400      	movs	r4, #0
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	3204      	adds	r2, #4
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	440a      	add	r2, r1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_temperature.base >> (8 * 5)) & 0xFF;
 8001af2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	f04f 0400 	mov.w	r4, #0
 8001afe:	0a13      	lsrs	r3, r2, #8
 8001b00:	2400      	movs	r4, #0
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	3205      	adds	r2, #5
 8001b06:	6839      	ldr	r1, [r7, #0]
 8001b08:	440a      	add	r2, r1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_temperature.base >> (8 * 6)) & 0xFF;
 8001b0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f04f 0400 	mov.w	r4, #0
 8001b1a:	0c13      	lsrs	r3, r2, #16
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	3206      	adds	r2, #6
 8001b22:	6839      	ldr	r1, [r7, #0]
 8001b24:	440a      	add	r2, r1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_temperature.base >> (8 * 7)) & 0xFF;
 8001b2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f04f 0400 	mov.w	r4, #0
 8001b36:	0e13      	lsrs	r3, r2, #24
 8001b38:	2400      	movs	r4, #0
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	3207      	adds	r2, #7
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	440a      	add	r2, r1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->temperature);
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3308      	adds	r3, #8
 8001b4a:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.real = this->variance;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001b52:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 8001b56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	440a      	add	r2, r1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 8001b64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f04f 0400 	mov.w	r4, #0
 8001b70:	0a0b      	lsrs	r3, r1, #8
 8001b72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b76:	0a14      	lsrs	r4, r2, #8
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	3201      	adds	r2, #1
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	440a      	add	r2, r1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 8001b84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f04f 0400 	mov.w	r4, #0
 8001b90:	0c0b      	lsrs	r3, r1, #16
 8001b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b96:	0c14      	lsrs	r4, r2, #16
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	3202      	adds	r2, #2
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	440a      	add	r2, r1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 8001ba4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	f04f 0400 	mov.w	r4, #0
 8001bb0:	0e0b      	lsrs	r3, r1, #24
 8001bb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bb6:	0e14      	lsrs	r4, r2, #24
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	3203      	adds	r2, #3
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	440a      	add	r2, r1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 8001bc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	f04f 0400 	mov.w	r4, #0
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	2400      	movs	r4, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	3204      	adds	r2, #4
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	440a      	add	r2, r1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 8001be0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f04f 0400 	mov.w	r4, #0
 8001bec:	0a13      	lsrs	r3, r2, #8
 8001bee:	2400      	movs	r4, #0
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	3205      	adds	r2, #5
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 8001bfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f04f 0400 	mov.w	r4, #0
 8001c08:	0c13      	lsrs	r3, r2, #16
 8001c0a:	2400      	movs	r4, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	3206      	adds	r2, #6
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	440a      	add	r2, r1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 8001c18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	f04f 0400 	mov.w	r4, #0
 8001c24:	0e13      	lsrs	r3, r2, #24
 8001c26:	2400      	movs	r4, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	3207      	adds	r2, #7
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	440a      	add	r2, r1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->variance);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	3308      	adds	r3, #8
 8001c38:	61fb      	str	r3, [r7, #28]
      return offset;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
    }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3724      	adds	r7, #36	; 0x24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}

08001c44 <_ZN11sensor_msgs11Temperature11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c48:	b08b      	sub	sp, #44	; 0x2c
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1d18      	adds	r0, r3, #4
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7ff faee 	bl	8001240 <_ZN8std_msgs6Header11deserializeEPh>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	4413      	add	r3, r2
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_temperature;
      u_temperature.base = 0;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	f04f 0400 	mov.w	r4, #0
 8001c74:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	4403      	add	r3, r0
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	fa5f fa83 	uxtb.w	sl, r3
 8001c88:	f04f 0b00 	mov.w	fp, #0
 8001c8c:	ea4a 0301 	orr.w	r3, sl, r1
 8001c90:	ea4b 0402 	orr.w	r4, fp, r2
 8001c94:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c98:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2d9      	uxtb	r1, r3
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f04f 0400 	mov.w	r4, #0
 8001cb4:	e9c7 3400 	strd	r3, r4, [r7]
 8001cb8:	0213      	lsls	r3, r2, #8
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	020b      	lsls	r3, r1, #8
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ccc:	ea43 030a 	orr.w	r3, r3, sl
 8001cd0:	ea44 040b 	orr.w	r4, r4, fp
 8001cd4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cd8:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	3302      	adds	r3, #2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2d9      	uxtb	r1, r3
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	f04f 0400 	mov.w	r4, #0
 8001cf4:	e9c7 3400 	strd	r3, r4, [r7]
 8001cf8:	0413      	lsls	r3, r2, #16
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	040b      	lsls	r3, r1, #16
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d0c:	ea43 030a 	orr.w	r3, r3, sl
 8001d10:	ea44 040b 	orr.w	r4, r4, fp
 8001d14:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	3303      	adds	r3, #3
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	4403      	add	r3, r0
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f04f 0400 	mov.w	r4, #0
 8001d2c:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8001d30:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8001d34:	ea41 0308 	orr.w	r3, r1, r8
 8001d38:	ea42 0409 	orr.w	r4, r2, r9
 8001d3c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001d40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	3304      	adds	r3, #4
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	4403      	add	r3, r0
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	fa5f f883 	uxtb.w	r8, r3
 8001d52:	f04f 0900 	mov.w	r9, #0
 8001d56:	f04f 0a00 	mov.w	sl, #0
 8001d5a:	f04f 0b00 	mov.w	fp, #0
 8001d5e:	46c3      	mov	fp, r8
 8001d60:	f04f 0a00 	mov.w	sl, #0
 8001d64:	ea4a 0301 	orr.w	r3, sl, r1
 8001d68:	ea4b 0402 	orr.w	r4, fp, r2
 8001d6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001d70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3305      	adds	r3, #5
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	4403      	add	r3, r0
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	fa5f f883 	uxtb.w	r8, r3
 8001d82:	f04f 0900 	mov.w	r9, #0
 8001d86:	f04f 0a00 	mov.w	sl, #0
 8001d8a:	f04f 0b00 	mov.w	fp, #0
 8001d8e:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8001d92:	f04f 0a00 	mov.w	sl, #0
 8001d96:	ea4a 0301 	orr.w	r3, sl, r1
 8001d9a:	ea4b 0402 	orr.w	r4, fp, r2
 8001d9e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001da2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3306      	adds	r3, #6
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	4403      	add	r3, r0
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	fa5f f883 	uxtb.w	r8, r3
 8001db4:	f04f 0900 	mov.w	r9, #0
 8001db8:	f04f 0a00 	mov.w	sl, #0
 8001dbc:	f04f 0b00 	mov.w	fp, #0
 8001dc0:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8001dc4:	f04f 0a00 	mov.w	sl, #0
 8001dc8:	ea4a 0301 	orr.w	r3, sl, r1
 8001dcc:	ea4b 0402 	orr.w	r4, fp, r2
 8001dd0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001dd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	3307      	adds	r3, #7
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	4403      	add	r3, r0
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	fa5f f883 	uxtb.w	r8, r3
 8001de6:	f04f 0900 	mov.w	r9, #0
 8001dea:	f04f 0a00 	mov.w	sl, #0
 8001dee:	f04f 0b00 	mov.w	fp, #0
 8001df2:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8001df6:	f04f 0a00 	mov.w	sl, #0
 8001dfa:	ea4a 0301 	orr.w	r3, sl, r1
 8001dfe:	ea4b 0402 	orr.w	r4, fp, r2
 8001e02:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->temperature = u_temperature.real;
 8001e06:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->temperature);
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3308      	adds	r3, #8
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_variance;
      u_variance.base = 0;
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	4403      	add	r3, r0
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	fa5f f883 	uxtb.w	r8, r3
 8001e32:	f04f 0900 	mov.w	r9, #0
 8001e36:	ea48 0301 	orr.w	r3, r8, r1
 8001e3a:	ea49 0402 	orr.w	r4, r9, r2
 8001e3e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e42:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2d9      	uxtb	r1, r3
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0a00 	mov.w	sl, #0
 8001e5a:	f04f 0b00 	mov.w	fp, #0
 8001e5e:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8001e62:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8001e66:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8001e6a:	ea4a 0308 	orr.w	r3, sl, r8
 8001e6e:	ea4b 0409 	orr.w	r4, fp, r9
 8001e72:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e76:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2d9      	uxtb	r1, r3
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0a00 	mov.w	sl, #0
 8001e8e:	f04f 0b00 	mov.w	fp, #0
 8001e92:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8001e96:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8001e9a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8001e9e:	ea4a 0308 	orr.w	r3, sl, r8
 8001ea2:	ea4b 0409 	orr.w	r4, fp, r9
 8001ea6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001eaa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	4403      	add	r3, r0
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f04f 0400 	mov.w	r4, #0
 8001ebe:	0a1e      	lsrs	r6, r3, #8
 8001ec0:	061d      	lsls	r5, r3, #24
 8001ec2:	ea41 0305 	orr.w	r3, r1, r5
 8001ec6:	ea42 0406 	orr.w	r4, r2, r6
 8001eca:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001ece:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	4403      	add	r3, r0
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2dd      	uxtb	r5, r3
 8001ede:	f04f 0600 	mov.w	r6, #0
 8001ee2:	f04f 0800 	mov.w	r8, #0
 8001ee6:	f04f 0900 	mov.w	r9, #0
 8001eea:	46a9      	mov	r9, r5
 8001eec:	f04f 0800 	mov.w	r8, #0
 8001ef0:	ea48 0301 	orr.w	r3, r8, r1
 8001ef4:	ea49 0402 	orr.w	r4, r9, r2
 8001ef8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001efc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3305      	adds	r3, #5
 8001f04:	68b8      	ldr	r0, [r7, #8]
 8001f06:	4403      	add	r3, r0
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2dd      	uxtb	r5, r3
 8001f0c:	f04f 0600 	mov.w	r6, #0
 8001f10:	f04f 0800 	mov.w	r8, #0
 8001f14:	f04f 0900 	mov.w	r9, #0
 8001f18:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8001f1c:	f04f 0800 	mov.w	r8, #0
 8001f20:	ea48 0301 	orr.w	r3, r8, r1
 8001f24:	ea49 0402 	orr.w	r4, r9, r2
 8001f28:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001f2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	3306      	adds	r3, #6
 8001f34:	68b8      	ldr	r0, [r7, #8]
 8001f36:	4403      	add	r3, r0
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2dd      	uxtb	r5, r3
 8001f3c:	f04f 0600 	mov.w	r6, #0
 8001f40:	f04f 0800 	mov.w	r8, #0
 8001f44:	f04f 0900 	mov.w	r9, #0
 8001f48:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8001f4c:	f04f 0800 	mov.w	r8, #0
 8001f50:	ea48 0301 	orr.w	r3, r8, r1
 8001f54:	ea49 0402 	orr.w	r4, r9, r2
 8001f58:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001f5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3307      	adds	r3, #7
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	4403      	add	r3, r0
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2dd      	uxtb	r5, r3
 8001f6c:	f04f 0600 	mov.w	r6, #0
 8001f70:	f04f 0800 	mov.w	r8, #0
 8001f74:	f04f 0900 	mov.w	r9, #0
 8001f78:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8001f7c:	f04f 0800 	mov.w	r8, #0
 8001f80:	ea48 0301 	orr.w	r3, r8, r1
 8001f84:	ea49 0402 	orr.w	r4, r9, r2
 8001f88:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->variance = u_variance.real;
 8001f8c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->variance);
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3308      	adds	r3, #8
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001fa8 <_ZN11sensor_msgs11Temperature7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Temperature"; };
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <_ZN11sensor_msgs11Temperature7getTypeEv+0x18>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	08009738 	.word	0x08009738

08001fc4 <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    const char * getMD5(){ return "ff71b307acdbe7c871a5a6d7ed359100"; };
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <_ZN11sensor_msgs11Temperature6getMD5Ev+0x18>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	08009750 	.word	0x08009750

08001fe0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
      data()
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f84e 	bl	800108c <_ZN3ros3MsgC1Ev>
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f856 	bl	80010ac <_ZN3ros4TimeC1Ev>
    {
    }
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	08009948 	.word	0x08009948

08002010 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	b2ca      	uxtb	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0a19      	lsrs	r1, r3, #8
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0c19      	lsrs	r1, r3, #16
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3302      	adds	r3, #2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	b2ca      	uxtb	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0e19      	lsrs	r1, r3, #24
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3303      	adds	r3, #3
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0a19      	lsrs	r1, r3, #8
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3301      	adds	r3, #1
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	0c19      	lsrs	r1, r3, #16
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3302      	adds	r3, #2
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4413      	add	r3, r2
 8002096:	b2ca      	uxtb	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0e19      	lsrs	r1, r3, #24
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3303      	adds	r3, #3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3304      	adds	r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80020b2:	68fb      	ldr	r3, [r7, #12]
    }
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	440b      	add	r3, r1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3302      	adds	r3, #2
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	440b      	add	r3, r1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3303      	adds	r3, #3
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	440b      	add	r3, r1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3304      	adds	r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3301      	adds	r3, #1
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	440b      	add	r3, r1
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3302      	adds	r3, #2
 8002150:	6839      	ldr	r1, [r7, #0]
 8002152:	440b      	add	r3, r1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	041b      	lsls	r3, r3, #16
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3303      	adds	r3, #3
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	440b      	add	r3, r1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3304      	adds	r3, #4
 8002178:	60fb      	str	r3, [r7, #12]
     return offset;
 800217a:	68fb      	ldr	r3, [r7, #12]
    }
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	08009774 	.word	0x08009774

080021a4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	08009784 	.word	0x08009784

080021c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ff5e 	bl	800108c <_ZN3ros3MsgC1Ev>
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	809a      	strh	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
    {
    }
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08009930 	.word	0x08009930
 8002204:	080096c0 	.word	0x080096c0

08002208 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8899      	ldrh	r1, [r3, #4]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4413      	add	r3, r2
 8002220:	b2ca      	uxtb	r2, r1
 8002222:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	b299      	uxth	r1, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	b2ca      	uxtb	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3302      	adds	r3, #2
 800223c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fd ffc6 	bl	80001d4 <strlen>
 8002248:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	69b9      	ldr	r1, [r7, #24]
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f840 	bl	80032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3304      	adds	r3, #4
 800225c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	18d0      	adds	r0, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4619      	mov	r1, r3
 800226c:	f007 f8d4 	bl	8009418 <memcpy>
      offset += length_topic_name;
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4413      	add	r3, r2
 8002276:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fd ffa9 	bl	80001d4 <strlen>
 8002282:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	4413      	add	r3, r2
 800228a:	6979      	ldr	r1, [r7, #20]
 800228c:	4618      	mov	r0, r3
 800228e:	f001 f823 	bl	80032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	18d0      	adds	r0, r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f007 f8b7 	bl	8009418 <memcpy>
      offset += length_message_type;
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	4413      	add	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fd ff8c 	bl	80001d4 <strlen>
 80022bc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 f806 	bl	80032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	3304      	adds	r3, #4
 80022d0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	18d0      	adds	r0, r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4619      	mov	r1, r3
 80022e0:	f007 f89a 	bl	8009418 <memcpy>
      offset += length_md5sum;
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0a19      	lsrs	r1, r3, #8
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3301      	adds	r3, #1
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	b2ca      	uxtb	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0c19      	lsrs	r1, r3, #16
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3302      	adds	r3, #2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	b2ca      	uxtb	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	0e19      	lsrs	r1, r3, #24
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3303      	adds	r3, #3
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	61fb      	str	r3, [r7, #28]
      return offset;
 8002334:	69fb      	ldr	r3, [r7, #28]
    }
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800233e:	b580      	push	{r7, lr}
 8002340:	b08a      	sub	sp, #40	; 0x28
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	889b      	ldrh	r3, [r3, #4]
 800235e:	b21a      	sxth	r2, r3
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	3301      	adds	r3, #1
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	440b      	add	r3, r1
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21b      	sxth	r3, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	3302      	adds	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	441a      	add	r2, r3
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 ffc2 	bl	8003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	3304      	adds	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4413      	add	r3, r2
 80023a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	441a      	add	r2, r3
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	440b      	add	r3, r1
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3301      	adds	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	e7ec      	b.n	800239a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4413      	add	r3, r2
 80023c6:	3b01      	subs	r3, #1
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	441a      	add	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	4413      	add	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	441a      	add	r2, r3
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 ff8f 	bl	8003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3304      	adds	r3, #4
 80023fa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	6a3a      	ldr	r2, [r7, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d20c      	bcs.n	8002426 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	441a      	add	r2, r3
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	3b01      	subs	r3, #1
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	440b      	add	r3, r1
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	3301      	adds	r3, #1
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	e7ec      	b.n	8002400 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	3b01      	subs	r3, #1
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	4413      	add	r3, r2
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	3b01      	subs	r3, #1
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	441a      	add	r2, r3
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 ff5c 	bl	8003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	3304      	adds	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	441a      	add	r2, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3b01      	subs	r3, #1
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3301      	adds	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e7ec      	b.n	8002466 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	3b01      	subs	r3, #1
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3b01      	subs	r3, #1
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	441a      	add	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4413      	add	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	440a      	add	r2, r1
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	3301      	adds	r3, #1
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	440b      	add	r3, r1
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3302      	adds	r3, #2
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	440b      	add	r3, r1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	3303      	adds	r3, #3
 80024ec:	6839      	ldr	r1, [r7, #0]
 80024ee:	440b      	add	r3, r1
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	061b      	lsls	r3, r3, #24
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	3304      	adds	r3, #4
 8002502:	61bb      	str	r3, [r7, #24]
     return offset;
 8002504:	69bb      	ldr	r3, [r7, #24]
    }
 8002506:	4618      	mov	r0, r3
 8002508:	3728      	adds	r7, #40	; 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	080097a8 	.word	0x080097a8

0800252c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	080097c4 	.word	0x080097c4

08002548 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fd9a 	bl	800108c <_ZN3ros3MsgC1Ev>
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	711a      	strb	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002568:	609a      	str	r2, [r3, #8]
    {
    }
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	08009918 	.word	0x08009918
 8002578:	080096c0 	.word	0x080096c0

0800257c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	7912      	ldrb	r2, [r2, #4]
 8002594:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fe17 	bl	80001d4 <strlen>
 80025a6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fe91 	bl	80032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	18d0      	adds	r0, r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f006 ff25 	bl	8009418 <memcpy>
      offset += length_msg;
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80025d6:	68fb      	ldr	r3, [r7, #12]
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3301      	adds	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	441a      	add	r2, r3
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fe81 	bl	8003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	3304      	adds	r3, #4
 8002616:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	d20c      	bcs.n	8002642 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	441a      	add	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3b01      	subs	r3, #1
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440b      	add	r3, r1
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e7ec      	b.n	800261c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	3b01      	subs	r3, #1
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	4413      	add	r3, r2
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	3b01      	subs	r3, #1
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
     return offset;
 8002666:	693b      	ldr	r3, [r7, #16]
    }
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	080097e8 	.word	0x080097e8

0800268c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	080097fc 	.word	0x080097fc

080026a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fcea 	bl	800108c <_ZN3ros3MsgC1Ev>
 80026b8:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	08009900 	.word	0x08009900

080026f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b2ca      	uxtb	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0a19      	lsrs	r1, r3, #8
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3301      	adds	r3, #1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0c19      	lsrs	r1, r3, #16
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	3302      	adds	r3, #2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0e19      	lsrs	r1, r3, #24
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	3303      	adds	r3, #3
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	4413      	add	r3, r2
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3304      	adds	r3, #4
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	6a3a      	ldr	r2, [r7, #32]
 8002752:	429a      	cmp	r2, r3
 8002754:	d22b      	bcs.n	80027ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002764:	6939      	ldr	r1, [r7, #16]
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	b2ca      	uxtb	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	0a19      	lsrs	r1, r3, #8
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3301      	adds	r3, #1
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	b2ca      	uxtb	r2, r1
 800277e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	0c19      	lsrs	r1, r3, #16
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	3302      	adds	r3, #2
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	0e19      	lsrs	r1, r3, #24
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	3303      	adds	r3, #3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4413      	add	r3, r2
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3304      	adds	r3, #4
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	3301      	adds	r3, #1
 80027aa:	623b      	str	r3, [r7, #32]
 80027ac:	e7ce      	b.n	800274c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6919      	ldr	r1, [r3, #16]
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	0a19      	lsrs	r1, r3, #8
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	3301      	adds	r3, #1
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	b2ca      	uxtb	r2, r1
 80027cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	0c19      	lsrs	r1, r3, #16
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	3302      	adds	r3, #2
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	0e19      	lsrs	r1, r3, #24
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3303      	adds	r3, #3
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	3304      	adds	r3, #4
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	429a      	cmp	r2, r3
 8002804:	d22b      	bcs.n	800285e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	0a19      	lsrs	r1, r3, #8
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3301      	adds	r3, #1
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	0c19      	lsrs	r1, r3, #16
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3302      	adds	r3, #2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0e19      	lsrs	r1, r3, #24
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3303      	adds	r3, #3
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3304      	adds	r3, #4
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	e7ce      	b.n	80027fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69d9      	ldr	r1, [r3, #28]
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	4413      	add	r3, r2
 8002868:	b2ca      	uxtb	r2, r1
 800286a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	0a19      	lsrs	r1, r3, #8
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3301      	adds	r3, #1
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4413      	add	r3, r2
 800287a:	b2ca      	uxtb	r2, r1
 800287c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	0c19      	lsrs	r1, r3, #16
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	3302      	adds	r3, #2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	b2ca      	uxtb	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	0e19      	lsrs	r1, r3, #24
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	3303      	adds	r3, #3
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4413      	add	r3, r2
 800289e:	b2ca      	uxtb	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3304      	adds	r3, #4
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d228      	bcs.n	8002908 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fc86 	bl	80001d4 <strlen>
 80028c8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fd00 	bl	80032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	3304      	adds	r3, #4
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	18d0      	adds	r0, r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4619      	mov	r1, r3
 80028f4:	f006 fd90 	bl	8009418 <memcpy>
      offset += length_stringsi;
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4413      	add	r3, r2
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	3301      	adds	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	e7d1      	b.n	80028ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800290a:	4618      	mov	r0, r3
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002912:	b580      	push	{r7, lr}
 8002914:	b08e      	sub	sp, #56	; 0x38
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	3301      	adds	r3, #1
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	4313      	orrs	r3, r2
 800293a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	3302      	adds	r3, #2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	4313      	orrs	r3, r2
 800294c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	3303      	adds	r3, #3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	6a3a      	ldr	r2, [r7, #32]
 800295c:	4313      	orrs	r3, r2
 800295e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	3304      	adds	r3, #4
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d90a      	bls.n	8002986 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f006 fd60 	bl	8009440 <realloc>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002996:	429a      	cmp	r2, r3
 8002998:	d236      	bcs.n	8002a08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	440a      	add	r2, r1
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b0:	3301      	adds	r3, #1
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	440b      	add	r3, r1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	3302      	adds	r3, #2
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	440b      	add	r3, r1
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	3303      	adds	r3, #3
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	440b      	add	r3, r1
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	3304      	adds	r3, #4
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	3301      	adds	r3, #1
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
 8002a06:	e7c3      	b.n	8002990 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	3301      	adds	r3, #1
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	3302      	adds	r3, #2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	3303      	adds	r3, #3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d90a      	bls.n	8002a6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f006 fcec 	bl	8009440 <realloc>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d236      	bcs.n	8002af0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	440a      	add	r2, r1
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	3301      	adds	r3, #1
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	3302      	adds	r3, #2
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	440b      	add	r3, r1
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	3303      	adds	r3, #3
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	3214      	adds	r2, #20
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	3301      	adds	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	e7c3      	b.n	8002a78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	3301      	adds	r3, #1
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	3302      	adds	r3, #2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	3303      	adds	r3, #3
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	3304      	adds	r3, #4
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d90a      	bls.n	8002b56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f006 fc78 	bl	8009440 <realloc>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d23f      	bcs.n	8002bea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	441a      	add	r2, r3
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fbcc 	bl	8003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	3304      	adds	r3, #4
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d20c      	bcs.n	8002bac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	441a      	add	r2, r3
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	440b      	add	r3, r1
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8002baa:	e7ec      	b.n	8002b86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	3220      	adds	r2, #32
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	3301      	adds	r3, #1
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be8:	e7ba      	b.n	8002b60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bec:	4618      	mov	r0, r3
 8002bee:	3738      	adds	r7, #56	; 0x38
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	080098b4 	.word	0x080098b4

08002c10 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	08009820 	.word	0x08009820

08002c2c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	611a      	str	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68d8      	ldr	r0, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6891      	ldr	r1, [r2, #8]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	4798      	blx	r3
 8002c78:	4603      	mov	r3, r0
  };
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
  }
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	425b      	negs	r3, r3
 8002cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <_ZN13STM32HardwareC1Ev+0x34>)
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	20000c84 	.word	0x20000c84

08002cf8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f804 	bl	8002d0e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d22:	4619      	mov	r1, r3
 8002d24:	f005 fc1e 	bl	8008564 <HAL_UART_Receive_DMA>
    }
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d3c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ffa8 	bl	8002c9a <_ZN13STM32Hardware10getRdmaIndEv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	429c      	cmp	r4, r3
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d012      	beq.n	8002d80 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d60:	1c59      	adds	r1, r3, #1
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	791b      	ldrb	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002d80:	68fb      	ldr	r3, [r7, #12]
    }
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
	...

08002d8c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d108      	bne.n	8002db4 <_ZN13STM32Hardware5flushEv+0x28>
 8002da2:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	f083 0301 	eor.w	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <_ZN13STM32Hardware5flushEv+0x28>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <_ZN13STM32Hardware5flushEv+0x2a>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03f      	beq.n	8002e3a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d031      	beq.n	8002e34 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d20a      	bcs.n	8002df6 <_ZN13STM32Hardware5flushEv+0x6a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	e006      	b.n	8002e04 <_ZN13STM32Hardware5flushEv+0x78>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	89fa      	ldrh	r2, [r7, #14]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f005 fb36 	bl	800848c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e26:	89fb      	ldrh	r3, [r7, #14]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
      }
    }
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200000a4 	.word	0x200000a4

08002e48 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
      int n = length;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5e:	bfa8      	it	ge
 8002e60:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002e64:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e6c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4293      	cmp	r3, r2
 8002e74:	bf28      	it	cs
 8002e76:	4613      	movcs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f006 fac3 	bl	8009418 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d00b      	beq.n	8002ec6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	18d1      	adds	r1, r2, r3
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f006 faa9 	bl	8009418 <memcpy>
      }

      flush();
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff ff60 	bl	8002d8c <_ZN13STM32Hardware5flushEv>
    }
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	f001 fb06 	bl	80044ec <HAL_GetTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_UART_TxCpltCallback>:

ros::Publisher m_ros_LPS22HB_Pressure_Publisher("LPS22HB_Pressure", &m_ros_LPS22HB_Pressure);				/*	Declare ROS pressure publisher	*/
ros::Publisher m_ros_LPS22HB_Temperature_Publisher("LPS22HB_Temperature", &m_ros_LPS22HB_Temperature);		/*	Declare ROS temperature publisher	*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002ef4:	4805      	ldr	r0, [pc, #20]	; (8002f0c <HAL_UART_TxCpltCallback+0x20>)
 8002ef6:	f000 fac3 	bl	8003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff45 	bl	8002d8c <_ZN13STM32Hardware5flushEv>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000100 	.word	0x20000100

08002f10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002f18:	4805      	ldr	r0, [pc, #20]	; (8002f30 <HAL_UART_RxCpltCallback+0x20>)
 8002f1a:	f000 fab1 	bl	8003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fef4 	bl	8002d0e <_ZN13STM32Hardware10reset_rbufEv>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000100 	.word	0x20000100

08002f34 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2chandle)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8002f3c:	f7fe f89c 	bl	8001078 <Error_Handler>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_I2C_MasterTxCpltCallback>:
/**
 * @brief Call once I2C transmission is complete
 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	//	Check we are not in initialization phase and i2c bus is free
	if(m_b_i2c_lps22hb_initializationSet && (HAL_I2C_STATE_READY == HAL_I2C_GetState(hi2c)))
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_I2C_MasterTxCpltCallback+0x54>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_I2C_MasterTxCpltCallback+0x20>
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f002 ff22 	bl	8005da2 <HAL_I2C_GetState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d101      	bne.n	8002f68 <HAL_I2C_MasterTxCpltCallback+0x20>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_I2C_MasterTxCpltCallback+0x22>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_I2C_MasterTxCpltCallback+0x4a>
	{
		//	DMA pressure and temperature I2C read request
		if(HAL_OK != HAL_I2C_Master_Receive_DMA(hi2c, hi2c->Devaddress, m_st_lps22hbData.rawData, sizeof(Lps322hb_out_data_t)))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	b299      	uxth	r1, r3
 8002f74:	2305      	movs	r3, #5
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f002 fba5 	bl	80056c8 <HAL_I2C_Master_Receive_DMA>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_MasterTxCpltCallback+0x4a>
		{
			//	Fall here if error on I2C bus
			Error_Handler();
 8002f8e:	f7fe f873 	bl	8001078 <Error_Handler>
		}
	}
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200000a5 	.word	0x200000a5
 8002fa0:	200000a8 	.word	0x200000a8

08002fa4 <HAL_I2C_MasterRxCpltCallback>:

/**
 * @brief Call once I2C reception is done
 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	//	Check we are not in initialization phase and i2c bus is free
	if(m_b_i2c_lps22hb_initializationSet && (HAL_I2C_STATE_READY == HAL_I2C_GetState(hi2c)))
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_I2C_MasterRxCpltCallback+0x34>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_I2C_MasterRxCpltCallback+0x20>
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f002 fef4 	bl	8005da2 <HAL_I2C_GetState>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_MasterRxCpltCallback+0x20>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_I2C_MasterRxCpltCallback+0x22>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_I2C_MasterRxCpltCallback+0x2c>
	{
		//	Inform (main) we have new pressure and temperature data to compute
		m_b_i2c_RxComplete = true;
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_I2C_MasterRxCpltCallback+0x38>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
	}
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200000a5 	.word	0x200000a5
 8002fdc:	200000a6 	.word	0x200000a6

08002fe0 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer function called every 1 second (Defined with STM32CubeMX)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	uint8_t l_tu8_press_out_data[1] = {LPS22HB_I2C_REGISTER_ADDR_PRESS_OUT_XL};
 8002fe8:	2328      	movs	r3, #40	; 0x28
 8002fea:	733b      	strb	r3, [r7, #12]

	//	Check we are not in initialization phase
	if(m_b_i2c_lps22hb_initializationSet)
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		//	Send the register from which we want to read of
		if(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, l_tu8_press_out_data, 1))
 8002ff4:	f107 020c 	add.w	r2, r7, #12
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	21ba      	movs	r1, #186	; 0xba
 8002ffc:	480c      	ldr	r0, [pc, #48]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002ffe:	f002 fa4d 	bl	800549c <HAL_I2C_Master_Transmit_DMA>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			//	Fall here if we had an error on I2C bus
			HAL_TIM_Base_Stop_IT(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f004 fe3d 	bl	8007c92 <HAL_TIM_Base_Stop_IT>
			Error_Handler();
 8003018:	f7fe f82e 	bl	8001078 <Error_Handler>
		}
	}

	//	Toggle the green LD on the Nucleo board
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800301c:	2120      	movs	r1, #32
 800301e:	4805      	ldr	r0, [pc, #20]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003020:	f002 f8e9 	bl	80051f6 <HAL_GPIO_TogglePin>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200000a5 	.word	0x200000a5
 8003030:	20000b30 	.word	0x20000b30
 8003034:	40020000 	.word	0x40020000

08003038 <setup>:

void setup(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	/**********************************
	 *	ROS initialization section
	 **********************************/
	 nh.initNode();
 800303c:	485c      	ldr	r0, [pc, #368]	; (80031b0 <setup+0x178>)
 800303e:	f000 fa2b 	bl	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	 m_ros_LPS22HB_Pressure.header.frame_id = "/LPS22HB";
 8003042:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <setup+0x17c>)
 8003044:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <setup+0x180>)
 8003046:	615a      	str	r2, [r3, #20]
	 m_ros_LPS22HB_Temperature.header.frame_id = "/LPS22HB";
 8003048:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <setup+0x184>)
 800304a:	4a5b      	ldr	r2, [pc, #364]	; (80031b8 <setup+0x180>)
 800304c:	615a      	str	r2, [r3, #20]
	 nh.advertise(m_ros_LPS22HB_Pressure_Publisher);
 800304e:	495c      	ldr	r1, [pc, #368]	; (80031c0 <setup+0x188>)
 8003050:	4857      	ldr	r0, [pc, #348]	; (80031b0 <setup+0x178>)
 8003052:	f000 fa3e 	bl	80034d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	 nh.advertise(m_ros_LPS22HB_Temperature_Publisher);
 8003056:	495b      	ldr	r1, [pc, #364]	; (80031c4 <setup+0x18c>)
 8003058:	4855      	ldr	r0, [pc, #340]	; (80031b0 <setup+0x178>)
 800305a:	f000 fa3a 	bl	80034d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	 /*********************************
	  * LPS22HB configuration section
	  *********************************/
	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_ctrl_reg1_data, 2))
 800305e:	2302      	movs	r3, #2
 8003060:	4a59      	ldr	r2, [pc, #356]	; (80031c8 <setup+0x190>)
 8003062:	21ba      	movs	r1, #186	; 0xba
 8003064:	4859      	ldr	r0, [pc, #356]	; (80031cc <setup+0x194>)
 8003066:	f002 fa19 	bl	800549c <HAL_I2C_Master_Transmit_DMA>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <setup+0x5e>
	{
		if(HAL_I2C_GetError(&hi2c1))
 800307a:	4854      	ldr	r0, [pc, #336]	; (80031cc <setup+0x194>)
 800307c:	f002 fe9f 	bl	8005dbe <HAL_I2C_GetError>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0e6      	beq.n	800305e <setup+0x26>
			/*
			 * Error_Handler() function is called when Timout error occurs.
			 * When Acknowledge failure ocucurs (Slave don't acknowledge it's address)
			 * Master restarts communication
			 */
			Error_Handler();
 8003090:	f7fd fff2 	bl	8001078 <Error_Handler>
	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_ctrl_reg1_data, 2))
 8003094:	e7e3      	b.n	800305e <setup+0x26>
	      transfer before starting a new one.
	      For simplicity reasons, this example is just waiting till the end of the
	      transfer, but application may perform other tasks while transfer operation
	      is ongoing.
	      */
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003096:	484d      	ldr	r0, [pc, #308]	; (80031cc <setup+0x194>)
 8003098:	f002 fe83 	bl	8005da2 <HAL_I2C_GetState>
 800309c:	4603      	mov	r3, r0
 800309e:	2b20      	cmp	r3, #32
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d000      	beq.n	80030ae <setup+0x76>
 80030ac:	e7f3      	b.n	8003096 <setup+0x5e>

	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_ctrl_reg2_data, 2))
 80030ae:	2302      	movs	r3, #2
 80030b0:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <setup+0x198>)
 80030b2:	21ba      	movs	r1, #186	; 0xba
 80030b4:	4845      	ldr	r0, [pc, #276]	; (80031cc <setup+0x194>)
 80030b6:	f002 f9f1 	bl	800549c <HAL_I2C_Master_Transmit_DMA>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <setup+0xae>
	{
		if(HAL_I2C_GetError(&hi2c1))
 80030ca:	4840      	ldr	r0, [pc, #256]	; (80031cc <setup+0x194>)
 80030cc:	f002 fe77 	bl	8005dbe <HAL_I2C_GetError>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0e6      	beq.n	80030ae <setup+0x76>
			/*
			 * Error_Handler() function is called when Timout error occurs.
			 * When Acknowledge failure ocucurs (Slave don't acknowledge it's address)
			 * Master restarts communication
			 */
			Error_Handler();
 80030e0:	f7fd ffca 	bl	8001078 <Error_Handler>
	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_ctrl_reg2_data, 2))
 80030e4:	e7e3      	b.n	80030ae <setup+0x76>
		}
	}

	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80030e6:	4839      	ldr	r0, [pc, #228]	; (80031cc <setup+0x194>)
 80030e8:	f002 fe5b 	bl	8005da2 <HAL_I2C_GetState>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d000      	beq.n	80030fe <setup+0xc6>
 80030fc:	e7f3      	b.n	80030e6 <setup+0xae>

	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_fifo_ctrl_data1, 2))
 80030fe:	2302      	movs	r3, #2
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <setup+0x19c>)
 8003102:	21ba      	movs	r1, #186	; 0xba
 8003104:	4831      	ldr	r0, [pc, #196]	; (80031cc <setup+0x194>)
 8003106:	f002 f9c9 	bl	800549c <HAL_I2C_Master_Transmit_DMA>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <setup+0xfe>
	{
		if(HAL_I2C_GetError(&hi2c1))
 800311a:	482c      	ldr	r0, [pc, #176]	; (80031cc <setup+0x194>)
 800311c:	f002 fe4f 	bl	8005dbe <HAL_I2C_GetError>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0e6      	beq.n	80030fe <setup+0xc6>
			/*
			 * Error_Handler() function is called when Timout error occurs.
			 * When Acknowledge failure ocucurs (Slave don't acknowledge it's address)
			 * Master restarts communication
			 */
			Error_Handler();
 8003130:	f7fd ffa2 	bl	8001078 <Error_Handler>
	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_fifo_ctrl_data1, 2))
 8003134:	e7e3      	b.n	80030fe <setup+0xc6>
		}
	}

	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003136:	4825      	ldr	r0, [pc, #148]	; (80031cc <setup+0x194>)
 8003138:	f002 fe33 	bl	8005da2 <HAL_I2C_GetState>
 800313c:	4603      	mov	r3, r0
 800313e:	2b20      	cmp	r3, #32
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d000      	beq.n	800314e <setup+0x116>
 800314c:	e7f3      	b.n	8003136 <setup+0xfe>

	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_fifo_ctrl_data2, 2))
 800314e:	2302      	movs	r3, #2
 8003150:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <setup+0x1a0>)
 8003152:	21ba      	movs	r1, #186	; 0xba
 8003154:	481d      	ldr	r0, [pc, #116]	; (80031cc <setup+0x194>)
 8003156:	f002 f9a1 	bl	800549c <HAL_I2C_Master_Transmit_DMA>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <setup+0x14e>
	{
		if(HAL_I2C_GetError(&hi2c1))
 800316a:	4818      	ldr	r0, [pc, #96]	; (80031cc <setup+0x194>)
 800316c:	f002 fe27 	bl	8005dbe <HAL_I2C_GetError>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0e6      	beq.n	800314e <setup+0x116>
			/*
			 * Error_Handler() function is called when Timout error occurs.
			 * When Acknowledge failure ocucurs (Slave don't acknowledge it's address)
			 * Master restarts communication
			 */
			Error_Handler();
 8003180:	f7fd ff7a 	bl	8001078 <Error_Handler>
	while(HAL_OK != HAL_I2C_Master_Transmit_DMA(&hi2c1, LPS22HB_I2C_DEVICE_ADDRESS, tu8_fifo_ctrl_data2, 2))
 8003184:	e7e3      	b.n	800314e <setup+0x116>
		}
	}

	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003186:	4811      	ldr	r0, [pc, #68]	; (80031cc <setup+0x194>)
 8003188:	f002 fe0b 	bl	8005da2 <HAL_I2C_GetState>
 800318c:	4603      	mov	r3, r0
 800318e:	2b20      	cmp	r3, #32
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d000      	beq.n	800319e <setup+0x166>
 800319c:	e7f3      	b.n	8003186 <setup+0x14e>

	//	Initialization finished
	m_b_i2c_lps22hb_initializationSet = true;
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <setup+0x1a4>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]

	//	Start time 1 Hz TIM3 timer
	HAL_TIM_Base_Start_IT(&htim3);
 80031a4:	480e      	ldr	r0, [pc, #56]	; (80031e0 <setup+0x1a8>)
 80031a6:	f004 fd50 	bl	8007c4a <HAL_TIM_Base_Start_IT>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000100 	.word	0x20000100
 80031b4:	200000d8 	.word	0x200000d8
 80031b8:	08009844 	.word	0x08009844
 80031bc:	200000b0 	.word	0x200000b0
 80031c0:	20000a3c 	.word	0x20000a3c
 80031c4:	20000a50 	.word	0x20000a50
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000b30 	.word	0x20000b30
 80031d0:	20000004 	.word	0x20000004
 80031d4:	20000008 	.word	0x20000008
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	200000a5 	.word	0x200000a5
 80031e0:	20000b84 	.word	0x20000b84

080031e4 <loop>:

void loop(void)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
	//	Check we've received new data from I2C
	if(m_b_i2c_RxComplete)
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <loop+0xcc>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d052      	beq.n	8003298 <loop+0xb4>
	{
		//	Set time stamp
		m_ros_LPS22HB_Pressure.header.stamp = nh.now();
 80031f2:	4c30      	ldr	r4, [pc, #192]	; (80032b4 <loop+0xd0>)
 80031f4:	463b      	mov	r3, r7
 80031f6:	4930      	ldr	r1, [pc, #192]	; (80032b8 <loop+0xd4>)
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f99b 	bl	8003534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80031fe:	f104 030c 	add.w	r3, r4, #12
 8003202:	463a      	mov	r2, r7
 8003204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003208:	e883 0003 	stmia.w	r3, {r0, r1}
		m_ros_LPS22HB_Temperature.header.stamp = nh.now();
 800320c:	4c2b      	ldr	r4, [pc, #172]	; (80032bc <loop+0xd8>)
 800320e:	463b      	mov	r3, r7
 8003210:	4929      	ldr	r1, [pc, #164]	; (80032b8 <loop+0xd4>)
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f98e 	bl	8003534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8003218:	f104 030c 	add.w	r3, r4, #12
 800321c:	463a      	mov	r2, r7
 800321e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003222:	e883 0003 	stmia.w	r3, {r0, r1}

		//	Convert raw pressure and temperature to human understanding
		///////////////////////////////////////////////////////////////
		//	WARNING : THIS CONVERTION DO NOT HANDLE NEGATIVE VALUES	 //
		///////////////////////////////////////////////////////////////
		m_ros_LPS22HB_Pressure.fluid_pressure = (double) ((double)((m_st_lps22hbData.pressureData[2] << 16) | (m_st_lps22hbData.pressureData[1] << 8)| (m_st_lps22hbData.pressureData[0]))/4096);
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <loop+0xdc>)
 8003228:	789b      	ldrb	r3, [r3, #2]
 800322a:	041a      	lsls	r2, r3, #16
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <loop+0xdc>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	4313      	orrs	r3, r2
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <loop+0xdc>)
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f924 	bl	8000488 <__aeabi_i2d>
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <loop+0xe0>)
 8003246:	f7fd fab3 	bl	80007b0 <__aeabi_ddiv>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <loop+0xd0>)
 8003250:	e9c2 3406 	strd	r3, r4, [r2, #24]
		m_ros_LPS22HB_Temperature.temperature = (double) ((double)((m_st_lps22hbData.temperatureData[1] << 8)| (m_st_lps22hbData.temperatureData[0]))/100);
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <loop+0xdc>)
 8003256:	791b      	ldrb	r3, [r3, #4]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <loop+0xdc>)
 800325c:	78d2      	ldrb	r2, [r2, #3]
 800325e:	4313      	orrs	r3, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f911 	bl	8000488 <__aeabi_i2d>
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <loop+0xe4>)
 800326c:	f7fd faa0 	bl	80007b0 <__aeabi_ddiv>
 8003270:	4603      	mov	r3, r0
 8003272:	460c      	mov	r4, r1
 8003274:	4a11      	ldr	r2, [pc, #68]	; (80032bc <loop+0xd8>)
 8003276:	e9c2 3406 	strd	r3, r4, [r2, #24]

		//	Publish ROS pressure frame over UART
		m_ros_LPS22HB_Pressure_Publisher.publish(&m_ros_LPS22HB_Pressure);
 800327a:	490e      	ldr	r1, [pc, #56]	; (80032b4 <loop+0xd0>)
 800327c:	4813      	ldr	r0, [pc, #76]	; (80032cc <loop+0xe8>)
 800327e:	f7ff fcec 	bl	8002c5a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		//	Publish ROS temperarture frame over UART
		m_ros_LPS22HB_Temperature_Publisher.publish(&m_ros_LPS22HB_Temperature);
 8003282:	490e      	ldr	r1, [pc, #56]	; (80032bc <loop+0xd8>)
 8003284:	4812      	ldr	r0, [pc, #72]	; (80032d0 <loop+0xec>)
 8003286:	f7ff fce8 	bl	8002c5a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		//	Toggle an external LED (connected to A0 on Nucleo)
		HAL_GPIO_TogglePin(ExtLED_GPIO_Port, ExtLED_Pin);
 800328a:	2101      	movs	r1, #1
 800328c:	4811      	ldr	r0, [pc, #68]	; (80032d4 <loop+0xf0>)
 800328e:	f001 ffb2 	bl	80051f6 <HAL_GPIO_TogglePin>

		//	Compute complete, we can fetch a new values from LPS22HB
		m_b_i2c_RxComplete = false;
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <loop+0xcc>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
	}

	nh.spinOnce();
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <loop+0xd4>)
 800329a:	f000 f987 	bl	80035ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	HAL_Delay(1000);
 800329e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032a2:	f001 f92f 	bl	8004504 <HAL_Delay>
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200000a6 	.word	0x200000a6
 80032b4:	200000d8 	.word	0x200000d8
 80032b8:	20000100 	.word	0x20000100
 80032bc:	200000b0 	.word	0x200000b0
 80032c0:	200000a8 	.word	0x200000a8
 80032c4:	40b00000 	.word	0x40b00000
 80032c8:	40590000 	.word	0x40590000
 80032cc:	20000a3c 	.word	0x20000a3c
 80032d0:	20000a50 	.word	0x20000a50
 80032d4:	40020000 	.word	0x40020000

080032d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d80d      	bhi.n	8003308 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	fa22 f103 	lsr.w	r1, r2, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	b2ca      	uxtb	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e7ee      	b.n	80032e6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d811      	bhi.n	8003352 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6839      	ldr	r1, [r7, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	440a      	add	r2, r1
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	4611      	mov	r1, r2
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	00d2      	lsls	r2, r2, #3
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e7ea      	b.n	8003328 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	080098ec 	.word	0x080098ec

08003380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff ffe8 	bl	8003360 <_ZN3ros15NodeHandleBase_C1Ev>
 8003390:	4a3a      	ldr	r2, [pc, #232]	; (800347c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fc90 	bl	8002cc0 <_ZN13STM32HardwareC1Ev>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f97a 	bl	80026a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b18      	cmp	r3, #24
 80033bc:	d80b      	bhi.n	80033d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e7f0      	b.n	80033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b18      	cmp	r3, #24
 80033de:	d80a      	bhi.n	80033f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033e8:	2100      	movs	r1, #0
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	3301      	adds	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	e7f1      	b.n	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d20a      	bcs.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e7f0      	b.n	80033fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003422:	d20a      	bcs.n	800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4413      	add	r3, r2
 800342a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	e7f0      	b.n	800341c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	080098d8 	.word	0x080098d8

08003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
  }
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fc27 	bl	8002cf8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b18      	cmp	r3, #24
 80034e4:	dc1e      	bgt.n	8003524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d111      	bne.n	800351c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	60da      	str	r2, [r3, #12]
        return true;
 8003518:	2301      	movs	r3, #1
 800351a:	e004      	b.n	8003526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e7dd      	b.n	80034e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003524:	2300      	movs	r3, #0
  }
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fcc6 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 8003548:	60f8      	str	r0, [r7, #12]
    Time current_time;
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fdae 	bl	80010ac <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099a      	lsrs	r2, r3, #6
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 800356a:	fba3 1302 	umull	r1, r3, r3, r2
 800356e:	099b      	lsrs	r3, r3, #6
 8003570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 800357c:	fb02 f203 	mul.w	r2, r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8003586:	441a      	add	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fb74 	bl	8000c80 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003598:	bf00      	nop
  }
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	10624dd3 	.word	0x10624dd3
 80035a8:	000f4240 	.word	0x000f4240

080035ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fc8b 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 80035be:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d903      	bls.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d903      	bls.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d014      	beq.n	800362c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fc64 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003618:	429a      	cmp	r2, r3
 800361a:	bf8c      	ite	hi
 800361c:	2301      	movhi	r3, #1
 800361e:	2300      	movls	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003626:	f06f 0301 	mvn.w	r3, #1
 800362a:	e197      	b.n	800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fb7d 	bl	8002d30 <_ZN13STM32Hardware4readEv>
 8003636:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f2c0 8177 	blt.w	800392e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	441a      	add	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003656:	2b07      	cmp	r3, #7
 8003658:	d11e      	bne.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003660:	1c59      	adds	r1, r3, #1
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	b2d1      	uxtb	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	460a      	mov	r2, r1
 8003672:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1b4      	bne.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2208      	movs	r2, #8
 8003692:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003696:	e7af      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d128      	bne.n	80036f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2bff      	cmp	r3, #255	; 0xff
 80036a6:	d10d      	bne.n	80036c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f103 0214 	add.w	r2, r3, #20
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80036c2:	e799      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fc03 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	bf8c      	ite	hi
 80036dc:	2301      	movhi	r3, #1
 80036de:	2300      	movls	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d088      	beq.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80036ee:	f06f 0301 	mvn.w	r3, #1
 80036f2:	e133      	b.n	800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d11b      	bne.n	8003736 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2bfe      	cmp	r3, #254	; 0xfe
 8003702:	d107      	bne.n	8003714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003712:	e771      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003722:	f083 0301 	eor.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	f43f af65 	beq.w	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f918 	bl	8003964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003734:	e760      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800373c:	2b02      	cmp	r3, #2
 800373e:	d113      	bne.n	8003768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003766:	e747      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800376e:	2b03      	cmp	r3, #3
 8003770:	d110      	bne.n	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003792:	e731      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800379a:	2b04      	cmp	r3, #4
 800379c:	d116      	bne.n	80037cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80037a4:	425a      	negs	r2, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	bf58      	it	pl
 80037ac:	4253      	negpl	r3, r2
 80037ae:	2bff      	cmp	r3, #255	; 0xff
 80037b0:	d107      	bne.n	80037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80037c0:	e71a      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80037ca:	e715      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d10f      	bne.n	80037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80037f4:	e700      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037fc:	2b06      	cmp	r3, #6
 80037fe:	d117      	bne.n	8003830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	441a      	add	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2207      	movs	r2, #7
 8003816:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f47f aee9 	bne.w	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2208      	movs	r2, #8
 800382a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800382e:	e6e3      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003836:	2b08      	cmp	r3, #8
 8003838:	f47f aede 	bne.w	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800384a:	425a      	negs	r2, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	bf58      	it	pl
 8003852:	4253      	negpl	r3, r2
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	f47f aecf 	bne.w	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d110      	bne.n	8003886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f87d 	bl	8003964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f898 	bl	80039a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003884:	e06a      	b.n	800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800388c:	2b0a      	cmp	r3, #10
 800388e:	d107      	bne.n	80038a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f961 	bl	8003b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800389e:	e6ab      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d10e      	bne.n	80038c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff f82a 	bl	8002912 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80038c6:	e697      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038ce:	2b0b      	cmp	r3, #11
 80038d0:	d104      	bne.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80038da:	e68d      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038e2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f43f ae81 	beq.w	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038fc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003906:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003910:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f202 2222 	addw	r2, r2, #546	; 0x222
 800391a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003928:	4611      	mov	r1, r2
 800392a:	4798      	blx	r3
    while (true)
 800392c:	e664      	b.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800392e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00f      	beq.n	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003948:	4293      	cmp	r3, r2
 800394a:	d906      	bls.n	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f809 	bl	8003964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800395a:	2300      	movs	r3, #0
  }
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fb35 	bl	8001fe0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f107 020c 	add.w	r2, r7, #12
 8003980:	210a      	movs	r1, #10
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	4798      	blx	r3
    rt_time = hardware_.time();
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff faa2 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003998:	bf00      	nop
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b08b      	sub	sp, #44	; 0x2c
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fc07 	bl	80021c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b18      	cmp	r3, #24
 80039ba:	dc63      	bgt.n	8003a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d056      	beq.n	8003a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4608      	mov	r0, r1
 8003a1c:	4798      	blx	r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4798      	blx	r3
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a54:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681c      	ldr	r4, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff f909 	bl	8002c82 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003a70:	4601      	mov	r1, r0
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	461a      	mov	r2, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	3301      	adds	r3, #1
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	e798      	b.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	2b18      	cmp	r3, #24
 8003a8c:	dc5f      	bgt.n	8003b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d053      	beq.n	8003b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4608      	mov	r0, r1
 8003ae0:	4798      	blx	r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003aee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4608      	mov	r0, r1
 8003b06:	4798      	blx	r3
 8003b08:	4603      	mov	r3, r0
 8003b0a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b10:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681c      	ldr	r4, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3304      	adds	r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4608      	mov	r0, r1
 8003b38:	4798      	blx	r3
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	461a      	mov	r2, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	3301      	adds	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	e79c      	b.n	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003b56:	bf00      	nop
 8003b58:	372c      	adds	r7, #44	; 0x2c
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}
	...

08003b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fa36 	bl	8001fe0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f9ab 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe fa95 	bl	80020c0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4915      	ldr	r1, [pc, #84]	; (8003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003b9c:	fba1 1303 	umull	r1, r3, r1, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003bac:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bb6:	fb00 f303 	mul.w	r3, r0, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8a4 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f97b 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003be6:	bf00      	nop
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	10624dd3 	.word	0x10624dd3
 8003bf4:	000f4240 	.word	0x000f4240

08003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b63      	cmp	r3, #99	; 0x63
 8003c08:	dd09      	ble.n	8003c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003c10:	f083 0301 	eor.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e077      	b.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003c2a:	3207      	adds	r2, #7
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
 8003c32:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	22fe      	movs	r2, #254	; 0xfe
 8003c40:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	121b      	asrs	r3, r3, #8
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003c68:	4413      	add	r3, r2
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	121b      	asrs	r3, r3, #8
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c92:	2305      	movs	r3, #5
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	da0d      	bge.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e7ec      	b.n	8003c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3307      	adds	r3, #7
 8003cc0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	425a      	negs	r2, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	bf58      	it	pl
 8003ccc:	4253      	negpl	r3, r2
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	1c59      	adds	r1, r3, #1
 8003cd4:	6179      	str	r1, [r7, #20]
 8003cd6:	43d2      	mvns	r2, r2
 8003cd8:	b2d1      	uxtb	r1, r2
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	460a      	mov	r2, r1
 8003ce0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cea:	dc0a      	bgt.n	8003d02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1d18      	adds	r0, r3, #4
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7ff f8a5 	bl	8002e48 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	e005      	b.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003d02:	4905      	ldr	r1, [pc, #20]	; (8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f849 	bl	8003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	08009850 	.word	0x08009850

08003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff f8d2 	bl	8002ed4 <_ZN13STM32Hardware4timeEv>
 8003d30:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4915      	ldr	r1, [pc, #84]	; (8003d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003d3a:	fba1 1303 	umull	r1, r3, r1, r3
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	1e5a      	subs	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003d52:	fba3 0302 	umull	r0, r3, r3, r2
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d5c:	fb00 f303 	mul.w	r3, r0, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	1aca      	subs	r2, r1, r3
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7fc ff7c 	bl	8000c80 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	10624dd3 	.word	0x10624dd3
 8003d94:	000f4240 	.word	0x000f4240
 8003d98:	3b9aca00 	.word	0x3b9aca00

08003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	2103      	movs	r1, #3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f804 	bl	8003db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003dc6:	f107 0314 	add.w	r3, r7, #20
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fbbc 	bl	8002548 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003dd0:	7afb      	ldrb	r3, [r7, #11]
 8003dd2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f107 0214 	add.w	r2, r7, #20
 8003de2:	2107      	movs	r1, #7
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	4798      	blx	r3
  }
 8003de8:	bf00      	nop
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_Z41__static_initialization_and_destruction_0ii>:
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d119      	bne.n	8003e34 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d114      	bne.n	8003e34 <_Z41__static_initialization_and_destruction_0ii+0x44>
sensor_msgs::Temperature m_ros_LPS22HB_Temperature;								/*	ROS temperature frame	*/
 8003e0a:	480c      	ldr	r0, [pc, #48]	; (8003e3c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003e0c:	f7fd fdee 	bl	80019ec <_ZN11sensor_msgs11TemperatureC1Ev>
sensor_msgs::FluidPressure m_ros_LPS22HB_Pressure;								/*	ROS pressure frame	*/
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003e12:	f7fd faf1 	bl	80013f8 <_ZN11sensor_msgs13FluidPressureC1Ev>
ros::NodeHandle nh;
 8003e16:	480b      	ldr	r0, [pc, #44]	; (8003e44 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003e18:	f7ff fab2 	bl	8003380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Publisher m_ros_LPS22HB_Pressure_Publisher("LPS22HB_Pressure", &m_ros_LPS22HB_Pressure);				/*	Declare ROS pressure publisher	*/
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003e20:	4909      	ldr	r1, [pc, #36]	; (8003e48 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003e22:	480a      	ldr	r0, [pc, #40]	; (8003e4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003e24:	f7fe ff02 	bl	8002c2c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher m_ros_LPS22HB_Temperature_Publisher("LPS22HB_Temperature", &m_ros_LPS22HB_Temperature);		/*	Declare ROS temperature publisher	*/
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003e2c:	4908      	ldr	r1, [pc, #32]	; (8003e50 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003e2e:	4809      	ldr	r0, [pc, #36]	; (8003e54 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003e30:	f7fe fefc 	bl	8002c2c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200000b0 	.word	0x200000b0
 8003e40:	200000d8 	.word	0x200000d8
 8003e44:	20000100 	.word	0x20000100
 8003e48:	0800988c 	.word	0x0800988c
 8003e4c:	20000a3c 	.word	0x20000a3c
 8003e50:	080098a0 	.word	0x080098a0
 8003e54:	20000a50 	.word	0x20000a50

08003e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_GLOBAL__sub_I_tu8_ctrl_reg1_data>:
 8003e72:	b580      	push	{r7, lr}
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7ff ffb8 	bl	8003df0 <_Z41__static_initialization_and_destruction_0ii>
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ec2:	2007      	movs	r0, #7
 8003ec4:	f000 fc10 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_I2C_MspInit+0x160>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 8099 	bne.w	800402a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	4b4e      	ldr	r3, [pc, #312]	; (8004038 <HAL_I2C_MspInit+0x164>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_I2C_MspInit+0x164>)
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	6313      	str	r3, [r2, #48]	; 0x30
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <HAL_I2C_MspInit+0x164>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f1a:	2312      	movs	r3, #18
 8003f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f26:	2304      	movs	r3, #4
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4842      	ldr	r0, [pc, #264]	; (800403c <HAL_I2C_MspInit+0x168>)
 8003f32:	f000 ffc5 	bl	8004ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_I2C_MspInit+0x164>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a3e      	ldr	r2, [pc, #248]	; (8004038 <HAL_I2C_MspInit+0x164>)
 8003f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b3c      	ldr	r3, [pc, #240]	; (8004038 <HAL_I2C_MspInit+0x164>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f54:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <HAL_I2C_MspInit+0x170>)
 8003f56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f60:	4b37      	ldr	r3, [pc, #220]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f66:	4b36      	ldr	r3, [pc, #216]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f72:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f74:	4b32      	ldr	r3, [pc, #200]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003f80:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f86:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003f92:	482b      	ldr	r0, [pc, #172]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003f94:	f000 fbea 	bl	800476c <HAL_DMA_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003f9e:	f7fd f86b 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_I2C_MspInit+0x16c>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <HAL_I2C_MspInit+0x178>)
 8003fb2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fbe:	2240      	movs	r2, #64	; 0x40
 8003fc0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fc2:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8003ff0:	f000 fbbc 	bl	800476c <HAL_DMA_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8003ffa:	f7fd f83d 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8004002:	635a      	str	r2, [r3, #52]	; 0x34
 8004004:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_I2C_MspInit+0x174>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	201f      	movs	r0, #31
 8004010:	f000 fb75 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004014:	201f      	movs	r0, #31
 8004016:	f000 fb8e 	bl	8004736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	2100      	movs	r1, #0
 800401e:	2020      	movs	r0, #32
 8004020:	f000 fb6d 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004024:	2020      	movs	r0, #32
 8004026:	f000 fb86 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800402a:	bf00      	nop
 800402c:	3728      	adds	r7, #40	; 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40005400 	.word	0x40005400
 8004038:	40023800 	.word	0x40023800
 800403c:	40020400 	.word	0x40020400
 8004040:	20000c24 	.word	0x20000c24
 8004044:	40026010 	.word	0x40026010
 8004048:	20000ad0 	.word	0x20000ad0
 800404c:	400260b8 	.word	0x400260b8

08004050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <HAL_TIM_Base_MspInit+0x48>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d115      	bne.n	800408e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_TIM_Base_MspInit+0x4c>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a0c      	ldr	r2, [pc, #48]	; (800409c <HAL_TIM_Base_MspInit+0x4c>)
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_TIM_Base_MspInit+0x4c>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	201d      	movs	r0, #29
 8004084:	f000 fb3b 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004088:	201d      	movs	r0, #29
 800408a:	f000 fb54 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40000400 	.word	0x40000400
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a4b      	ldr	r2, [pc, #300]	; (80041ec <HAL_UART_MspInit+0x14c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f040 8090 	bne.w	80041e4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <HAL_UART_MspInit+0x150>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	4a48      	ldr	r2, [pc, #288]	; (80041f0 <HAL_UART_MspInit+0x150>)
 80040ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d2:	6413      	str	r3, [r2, #64]	; 0x40
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_UART_MspInit+0x150>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <HAL_UART_MspInit+0x150>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	4a41      	ldr	r2, [pc, #260]	; (80041f0 <HAL_UART_MspInit+0x150>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6313      	str	r3, [r2, #48]	; 0x30
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_UART_MspInit+0x150>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040fc:	230c      	movs	r3, #12
 80040fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004108:	2300      	movs	r3, #0
 800410a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800410c:	2307      	movs	r3, #7
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	4619      	mov	r1, r3
 8004116:	4837      	ldr	r0, [pc, #220]	; (80041f4 <HAL_UART_MspInit+0x154>)
 8004118:	f000 fed2 	bl	8004ec0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800411c:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <HAL_UART_MspInit+0x158>)
 800411e:	4a37      	ldr	r2, [pc, #220]	; (80041fc <HAL_UART_MspInit+0x15c>)
 8004120:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004122:	4b35      	ldr	r3, [pc, #212]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004128:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <HAL_UART_MspInit+0x158>)
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004130:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004132:	2200      	movs	r2, #0
 8004134:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004136:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800413c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800414a:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_UART_MspInit+0x158>)
 800414c:	2200      	movs	r2, #0
 800414e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004150:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004152:	2200      	movs	r2, #0
 8004154:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004158:	2200      	movs	r2, #0
 800415a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800415c:	4826      	ldr	r0, [pc, #152]	; (80041f8 <HAL_UART_MspInit+0x158>)
 800415e:	f000 fb05 	bl	800476c <HAL_DMA_Init>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004168:	f7fc ff86 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004170:	635a      	str	r2, [r3, #52]	; 0x34
 8004172:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <HAL_UART_MspInit+0x158>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <HAL_UART_MspInit+0x160>)
 800417a:	4a22      	ldr	r2, [pc, #136]	; (8004204 <HAL_UART_MspInit+0x164>)
 800417c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <HAL_UART_MspInit+0x160>)
 8004180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004184:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <HAL_UART_MspInit+0x160>)
 8004188:	2240      	movs	r2, #64	; 0x40
 800418a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <HAL_UART_MspInit+0x160>)
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_UART_MspInit+0x160>)
 8004194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004198:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_UART_MspInit+0x160>)
 800419c:	2200      	movs	r2, #0
 800419e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80041b8:	4811      	ldr	r0, [pc, #68]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041ba:	f000 fad7 	bl	800476c <HAL_DMA_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80041c4:	f7fc ff58 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
 80041ce:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <HAL_UART_MspInit+0x160>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041d4:	2200      	movs	r2, #0
 80041d6:	2100      	movs	r1, #0
 80041d8:	2026      	movs	r0, #38	; 0x26
 80041da:	f000 fa90 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041de:	2026      	movs	r0, #38	; 0x26
 80041e0:	f000 faa9 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041e4:	bf00      	nop
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40004400 	.word	0x40004400
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40020000 	.word	0x40020000
 80041f8:	20000a70 	.word	0x20000a70
 80041fc:	40026088 	.word	0x40026088
 8004200:	20000bc4 	.word	0x20000bc4
 8004204:	400260a0 	.word	0x400260a0

08004208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800421a:	e7fe      	b.n	800421a <HardFault_Handler+0x4>

0800421c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004220:	e7fe      	b.n	8004220 <MemManage_Handler+0x4>

08004222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004226:	e7fe      	b.n	8004226 <BusFault_Handler+0x4>

08004228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800422c:	e7fe      	b.n	800422c <UsageFault_Handler+0x4>

0800422e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800425c:	f000 f932 	bl	80044c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004268:	4802      	ldr	r0, [pc, #8]	; (8004274 <DMA1_Stream0_IRQHandler+0x10>)
 800426a:	f000 fba7 	bl	80049bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000c24 	.word	0x20000c24

08004278 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800427c:	4802      	ldr	r0, [pc, #8]	; (8004288 <DMA1_Stream5_IRQHandler+0x10>)
 800427e:	f000 fb9d 	bl	80049bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000a70 	.word	0x20000a70

0800428c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004290:	4802      	ldr	r0, [pc, #8]	; (800429c <DMA1_Stream6_IRQHandler+0x10>)
 8004292:	f000 fb93 	bl	80049bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000bc4 	.word	0x20000bc4

080042a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <TIM3_IRQHandler+0x10>)
 80042a6:	f003 fd1f 	bl	8007ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000b84 	.word	0x20000b84

080042b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80042b8:	4802      	ldr	r0, [pc, #8]	; (80042c4 <I2C1_EV_IRQHandler+0x10>)
 80042ba:	f001 fb1b 	bl	80058f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000b30 	.word	0x20000b30

080042c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <I2C1_ER_IRQHandler+0x10>)
 80042ce:	f001 fc77 	bl	8005bc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000b30 	.word	0x20000b30

080042dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042e0:	4802      	ldr	r0, [pc, #8]	; (80042ec <USART2_IRQHandler+0x10>)
 80042e2:	f004 f9bf 	bl	8008664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000c84 	.word	0x20000c84

080042f0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80042f4:	4802      	ldr	r0, [pc, #8]	; (8004300 <DMA1_Stream7_IRQHandler+0x10>)
 80042f6:	f000 fb61 	bl	80049bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000ad0 	.word	0x20000ad0

08004304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
	return 1;
 8004308:	2301      	movs	r3, #1
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_kill>:

int _kill(int pid, int sig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800431e:	f005 f851 	bl	80093c4 <__errno>
 8004322:	4602      	mov	r2, r0
 8004324:	2316      	movs	r3, #22
 8004326:	6013      	str	r3, [r2, #0]
	return -1;
 8004328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_exit>:

void _exit (int status)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800433c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ffe7 	bl	8004314 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004346:	e7fe      	b.n	8004346 <_exit+0x12>

08004348 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <_sbrk+0x50>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <_sbrk+0x16>
		heap_end = &end;
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <_sbrk+0x50>)
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <_sbrk+0x54>)
 800435c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <_sbrk+0x50>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <_sbrk+0x50>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	466a      	mov	r2, sp
 800436e:	4293      	cmp	r3, r2
 8004370:	d907      	bls.n	8004382 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004372:	f005 f827 	bl	80093c4 <__errno>
 8004376:	4602      	mov	r2, r0
 8004378:	230c      	movs	r3, #12
 800437a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004380:	e006      	b.n	8004390 <_sbrk+0x48>
	}

	heap_end += incr;
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <_sbrk+0x50>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	4a03      	ldr	r2, [pc, #12]	; (8004398 <_sbrk+0x50>)
 800438c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000a64 	.word	0x20000a64
 800439c:	20000cd0 	.word	0x20000cd0

080043a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <SystemInit+0x28>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <SystemInit+0x28>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <SystemInit+0x28>)
 80043b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043ba:	609a      	str	r2, [r3, #8]
#endif
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80043cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004404 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043d2:	e003      	b.n	80043dc <LoopCopyDataInit>

080043d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043da:	3104      	adds	r1, #4

080043dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043dc:	480b      	ldr	r0, [pc, #44]	; (800440c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043e4:	d3f6      	bcc.n	80043d4 <CopyDataInit>
  ldr  r2, =_sbss
 80043e6:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043e8:	e002      	b.n	80043f0 <LoopFillZerobss>

080043ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043ec:	f842 3b04 	str.w	r3, [r2], #4

080043f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043f4:	d3f9      	bcc.n	80043ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043f6:	f7ff ffd3 	bl	80043a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043fa:	f004 ffe9 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043fe:	f7fc fc6b 	bl	8000cd8 <main>
  bx  lr    
 8004402:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004404:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8004408:	080099ec 	.word	0x080099ec
  ldr  r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004410:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004414:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8004418:	20000ccc 	.word	0x20000ccc

0800441c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800441c:	e7fe      	b.n	800441c <ADC_IRQHandler>
	...

08004420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <HAL_Init+0x40>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <HAL_Init+0x40>)
 800442a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800442e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_Init+0x40>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <HAL_Init+0x40>)
 8004436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800443a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_Init+0x40>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a07      	ldr	r2, [pc, #28]	; (8004460 <HAL_Init+0x40>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004448:	2003      	movs	r0, #3
 800444a:	f000 f94d 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800444e:	2000      	movs	r0, #0
 8004450:	f000 f808 	bl	8004464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004454:	f7ff fd16 	bl	8003e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023c00 	.word	0x40023c00

08004464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_InitTick+0x54>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_InitTick+0x58>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	4619      	mov	r1, r3
 8004476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800447a:	fbb3 f3f1 	udiv	r3, r3, r1
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f965 	bl	8004752 <HAL_SYSTICK_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e00e      	b.n	80044b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b0f      	cmp	r3, #15
 8004496:	d80a      	bhi.n	80044ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004498:	2200      	movs	r2, #0
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044a0:	f000 f92d 	bl	80046fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a4:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <HAL_InitTick+0x5c>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000010 	.word	0x20000010
 80044bc:	20000018 	.word	0x20000018
 80044c0:	20000014 	.word	0x20000014

080044c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x20>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_IncTick+0x24>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_IncTick+0x24>)
 80044d6:	6013      	str	r3, [r2, #0]
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000018 	.word	0x20000018
 80044e8:	20000cc4 	.word	0x20000cc4

080044ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return uwTick;
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <HAL_GetTick+0x14>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000cc4 	.word	0x20000cc4

08004504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800450c:	f7ff ffee 	bl	80044ec <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800451c:	d005      	beq.n	800452a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_Delay+0x40>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800452a:	bf00      	nop
 800452c:	f7ff ffde 	bl	80044ec <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d8f7      	bhi.n	800452c <HAL_Delay+0x28>
  {
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000018 	.word	0x20000018

08004548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <__NVIC_SetPriorityGrouping+0x44>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800457a:	4a04      	ldr	r2, [pc, #16]	; (800458c <__NVIC_SetPriorityGrouping+0x44>)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	60d3      	str	r3, [r2, #12]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 0307 	and.w	r3, r3, #7
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	db0b      	blt.n	80045d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	f003 021f 	and.w	r2, r3, #31
 80045c4:	4907      	ldr	r1, [pc, #28]	; (80045e4 <__NVIC_EnableIRQ+0x38>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2001      	movs	r0, #1
 80045ce:	fa00 f202 	lsl.w	r2, r0, r2
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db0a      	blt.n	8004612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	490c      	ldr	r1, [pc, #48]	; (8004634 <__NVIC_SetPriority+0x4c>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	440b      	add	r3, r1
 800460c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004610:	e00a      	b.n	8004628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4908      	ldr	r1, [pc, #32]	; (8004638 <__NVIC_SetPriority+0x50>)
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	3b04      	subs	r3, #4
 8004620:	0112      	lsls	r2, r2, #4
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	440b      	add	r3, r1
 8004626:	761a      	strb	r2, [r3, #24]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000e100 	.word	0xe000e100
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f1c3 0307 	rsb	r3, r3, #7
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf28      	it	cs
 800465a:	2304      	movcs	r3, #4
 800465c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3304      	adds	r3, #4
 8004662:	2b06      	cmp	r3, #6
 8004664:	d902      	bls.n	800466c <NVIC_EncodePriority+0x30>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3b03      	subs	r3, #3
 800466a:	e000      	b.n	800466e <NVIC_EncodePriority+0x32>
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	401a      	ands	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43d9      	mvns	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	4313      	orrs	r3, r2
         );
}
 8004696:	4618      	mov	r0, r3
 8004698:	3724      	adds	r7, #36	; 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b4:	d301      	bcc.n	80046ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <SysTick_Config+0x40>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046c2:	210f      	movs	r1, #15
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c8:	f7ff ff8e 	bl	80045e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <SysTick_Config+0x40>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046d2:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <SysTick_Config+0x40>)
 80046d4:	2207      	movs	r2, #7
 80046d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000e010 	.word	0xe000e010

080046e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ff29 	bl	8004548 <__NVIC_SetPriorityGrouping>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	4603      	mov	r3, r0
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004710:	f7ff ff3e 	bl	8004590 <__NVIC_GetPriorityGrouping>
 8004714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7ff ff8e 	bl	800463c <NVIC_EncodePriority>
 8004720:	4602      	mov	r2, r0
 8004722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff5d 	bl	80045e8 <__NVIC_SetPriority>
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	4603      	mov	r3, r0
 800473e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ff31 	bl	80045ac <__NVIC_EnableIRQ>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ffa2 	bl	80046a4 <SysTick_Config>
 8004760:	4603      	mov	r3, r0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004778:	f7ff feb8 	bl	80044ec <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e099      	b.n	80048bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a8:	e00f      	b.n	80047ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047aa:	f7ff fe9f 	bl	80044ec <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d908      	bls.n	80047ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2203      	movs	r2, #3
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e078      	b.n	80048bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e8      	bne.n	80047aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <HAL_DMA_Init+0x158>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b04      	cmp	r3, #4
 8004822:	d107      	bne.n	8004834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4313      	orrs	r3, r2
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b04      	cmp	r3, #4
 800485c:	d117      	bne.n	800488e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00e      	beq.n	800488e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 faab 	bl	8004dcc <DMA_CheckFifoParam>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2240      	movs	r2, #64	; 0x40
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800488a:	2301      	movs	r3, #1
 800488c:	e016      	b.n	80048bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa62 	bl	8004d60 <DMA_CalcBaseAndBitshift>
 800489c:	4603      	mov	r3, r0
 800489e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	223f      	movs	r2, #63	; 0x3f
 80048a6:	409a      	lsls	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	f010803f 	.word	0xf010803f

080048c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_DMA_Start_IT+0x26>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e040      	b.n	8004970 <HAL_DMA_Start_IT+0xa8>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d12f      	bne.n	8004962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f9f4 	bl	8004d04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	223f      	movs	r2, #63	; 0x3f
 8004922:	409a      	lsls	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0216 	orr.w	r2, r2, #22
 8004936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e005      	b.n	800496e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800496a:	2302      	movs	r3, #2
 800496c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2280      	movs	r2, #128	; 0x80
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e00c      	b.n	80049b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2205      	movs	r2, #5
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049c8:	4b92      	ldr	r3, [pc, #584]	; (8004c14 <HAL_DMA_IRQHandler+0x258>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a92      	ldr	r2, [pc, #584]	; (8004c18 <HAL_DMA_IRQHandler+0x25c>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	2208      	movs	r2, #8
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01a      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	2208      	movs	r2, #8
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f043 0202 	orr.w	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	2204      	movs	r2, #4
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d012      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	2204      	movs	r2, #4
 8004a82:	409a      	lsls	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	2210      	movs	r2, #16
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d043      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d03c      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d024      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e01f      	b.n	8004b2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e016      	b.n	8004b2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d107      	bne.n	8004b1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0208 	bic.w	r2, r2, #8
 8004b1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	2220      	movs	r2, #32
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 808e 	beq.w	8004c5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	2220      	movs	r2, #32
 8004b54:	409a      	lsls	r2, r3
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d136      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0216 	bic.w	r2, r2, #22
 8004b74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_DMA_IRQHandler+0x1da>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0208 	bic.w	r2, r2, #8
 8004ba4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	409a      	lsls	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d07d      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
        }
        return;
 8004bd2:	e078      	b.n	8004cc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01c      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d108      	bne.n	8004c02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d030      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	e02b      	b.n	8004c5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d027      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	e022      	b.n	8004c5a <HAL_DMA_IRQHandler+0x29e>
 8004c14:	20000010 	.word	0x20000010
 8004c18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0210 	bic.w	r2, r2, #16
 8004c38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d032      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2205      	movs	r2, #5
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d307      	bcc.n	8004ca2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f2      	bne.n	8004c86 <HAL_DMA_IRQHandler+0x2ca>
 8004ca0:	e000      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ca2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e000      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004cc6:	bf00      	nop
    }
  }
}
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop

08004cd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cde:	b2db      	uxtb	r3, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d108      	bne.n	8004d44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d42:	e007      	b.n	8004d54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	3b10      	subs	r3, #16
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d909      	bls.n	8004da2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004da0:	e007      	b.n	8004db2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	aaaaaaab 	.word	0xaaaaaaab
 8004dc8:	080099d0 	.word	0x080099d0

08004dcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11f      	bne.n	8004e26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d855      	bhi.n	8004e98 <DMA_CheckFifoParam+0xcc>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <DMA_CheckFifoParam+0x28>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e17 	.word	0x08004e17
 8004dfc:	08004e05 	.word	0x08004e05
 8004e00:	08004e99 	.word	0x08004e99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d045      	beq.n	8004e9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e14:	e042      	b.n	8004e9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e1e:	d13f      	bne.n	8004ea0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e24:	e03c      	b.n	8004ea0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2e:	d121      	bne.n	8004e74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d836      	bhi.n	8004ea4 <DMA_CheckFifoParam+0xd8>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <DMA_CheckFifoParam+0x70>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e53 	.word	0x08004e53
 8004e44:	08004e4d 	.word	0x08004e4d
 8004e48:	08004e65 	.word	0x08004e65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e50:	e02f      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d024      	beq.n	8004ea8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e62:	e021      	b.n	8004ea8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e6c:	d11e      	bne.n	8004eac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e72:	e01b      	b.n	8004eac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d902      	bls.n	8004e80 <DMA_CheckFifoParam+0xb4>
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d003      	beq.n	8004e86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e7e:	e018      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e015      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
      break;
 8004e96:	e00b      	b.n	8004eb0 <DMA_CheckFifoParam+0xe4>
      break;
 8004e98:	bf00      	nop
 8004e9a:	e00a      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004e9c:	bf00      	nop
 8004e9e:	e008      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ea0:	bf00      	nop
 8004ea2:	e006      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ea4:	bf00      	nop
 8004ea6:	e004      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      break;   
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004eb0:	bf00      	nop
    }
  } 
  
  return status; 
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	; 0x24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	e159      	b.n	8005190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004edc:	2201      	movs	r2, #1
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	f040 8148 	bne.w	800518a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d00b      	beq.n	8004f1a <HAL_GPIO_Init+0x5a>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d007      	beq.n	8004f1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f0e:	2b11      	cmp	r3, #17
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b12      	cmp	r3, #18
 8004f18:	d130      	bne.n	8004f7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f50:	2201      	movs	r2, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 0201 	and.w	r2, r3, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	2203      	movs	r2, #3
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0xfc>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b12      	cmp	r3, #18
 8004fba:	d123      	bne.n	8005004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	08da      	lsrs	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3208      	adds	r2, #8
 8004fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	220f      	movs	r2, #15
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a2 	beq.w	800518a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <HAL_GPIO_Init+0x2e4>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	4a55      	ldr	r2, [pc, #340]	; (80051a4 <HAL_GPIO_Init+0x2e4>)
 8005050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005054:	6453      	str	r3, [r2, #68]	; 0x44
 8005056:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <HAL_GPIO_Init+0x2e4>)
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005062:	4a51      	ldr	r2, [pc, #324]	; (80051a8 <HAL_GPIO_Init+0x2e8>)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	089b      	lsrs	r3, r3, #2
 8005068:	3302      	adds	r3, #2
 800506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	220f      	movs	r2, #15
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a48      	ldr	r2, [pc, #288]	; (80051ac <HAL_GPIO_Init+0x2ec>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d019      	beq.n	80050c2 <HAL_GPIO_Init+0x202>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a47      	ldr	r2, [pc, #284]	; (80051b0 <HAL_GPIO_Init+0x2f0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_GPIO_Init+0x1fe>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a46      	ldr	r2, [pc, #280]	; (80051b4 <HAL_GPIO_Init+0x2f4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00d      	beq.n	80050ba <HAL_GPIO_Init+0x1fa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a45      	ldr	r2, [pc, #276]	; (80051b8 <HAL_GPIO_Init+0x2f8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <HAL_GPIO_Init+0x1f6>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a44      	ldr	r2, [pc, #272]	; (80051bc <HAL_GPIO_Init+0x2fc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_GPIO_Init+0x1f2>
 80050ae:	2304      	movs	r3, #4
 80050b0:	e008      	b.n	80050c4 <HAL_GPIO_Init+0x204>
 80050b2:	2307      	movs	r3, #7
 80050b4:	e006      	b.n	80050c4 <HAL_GPIO_Init+0x204>
 80050b6:	2303      	movs	r3, #3
 80050b8:	e004      	b.n	80050c4 <HAL_GPIO_Init+0x204>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e002      	b.n	80050c4 <HAL_GPIO_Init+0x204>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_GPIO_Init+0x204>
 80050c2:	2300      	movs	r3, #0
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	f002 0203 	and.w	r2, r2, #3
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	4093      	lsls	r3, r2
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d4:	4934      	ldr	r1, [pc, #208]	; (80051a8 <HAL_GPIO_Init+0x2e8>)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	3302      	adds	r3, #2
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050e2:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <HAL_GPIO_Init+0x300>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005106:	4a2e      	ldr	r2, [pc, #184]	; (80051c0 <HAL_GPIO_Init+0x300>)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800510c:	4b2c      	ldr	r3, [pc, #176]	; (80051c0 <HAL_GPIO_Init+0x300>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_GPIO_Init+0x300>)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_GPIO_Init+0x300>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_GPIO_Init+0x300>)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <HAL_GPIO_Init+0x300>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005184:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <HAL_GPIO_Init+0x300>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	f67f aea2 	bls.w	8004edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005198:	bf00      	nop
 800519a:	3724      	adds	r7, #36	; 0x24
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40013800 	.word	0x40013800
 80051ac:	40020000 	.word	0x40020000
 80051b0:	40020400 	.word	0x40020400
 80051b4:	40020800 	.word	0x40020800
 80051b8:	40020c00 	.word	0x40020c00
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40013c00 	.word	0x40013c00

080051c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
 80051d0:	4613      	mov	r3, r2
 80051d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051d4:	787b      	ldrb	r3, [r7, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051e0:	e003      	b.n	80051ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051e2:	887b      	ldrh	r3, [r7, #2]
 80051e4:	041a      	lsls	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	619a      	str	r2, [r3, #24]
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	401a      	ands	r2, r3
 800520a:	887b      	ldrh	r3, [r7, #2]
 800520c:	429a      	cmp	r2, r3
 800520e:	d104      	bne.n	800521a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	041a      	lsls	r2, r3, #16
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005218:	e002      	b.n	8005220 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e11f      	b.n	800547e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe fe3e 	bl	8003ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800528e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005290:	f002 fc88 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8005294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4a7b      	ldr	r2, [pc, #492]	; (8005488 <HAL_I2C_Init+0x25c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d807      	bhi.n	80052b0 <HAL_I2C_Init+0x84>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a7a      	ldr	r2, [pc, #488]	; (800548c <HAL_I2C_Init+0x260>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bf94      	ite	ls
 80052a8:	2301      	movls	r3, #1
 80052aa:	2300      	movhi	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e006      	b.n	80052be <HAL_I2C_Init+0x92>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a77      	ldr	r2, [pc, #476]	; (8005490 <HAL_I2C_Init+0x264>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	bf94      	ite	ls
 80052b8:	2301      	movls	r3, #1
 80052ba:	2300      	movhi	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0db      	b.n	800547e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a72      	ldr	r2, [pc, #456]	; (8005494 <HAL_I2C_Init+0x268>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	0c9b      	lsrs	r3, r3, #18
 80052d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4a64      	ldr	r2, [pc, #400]	; (8005488 <HAL_I2C_Init+0x25c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d802      	bhi.n	8005300 <HAL_I2C_Init+0xd4>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	3301      	adds	r3, #1
 80052fe:	e009      	b.n	8005314 <HAL_I2C_Init+0xe8>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	4a63      	ldr	r2, [pc, #396]	; (8005498 <HAL_I2C_Init+0x26c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	3301      	adds	r3, #1
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	430b      	orrs	r3, r1
 800531a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4956      	ldr	r1, [pc, #344]	; (8005488 <HAL_I2C_Init+0x25c>)
 8005330:	428b      	cmp	r3, r1
 8005332:	d80d      	bhi.n	8005350 <HAL_I2C_Init+0x124>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1e59      	subs	r1, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005342:	3301      	adds	r3, #1
 8005344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005348:	2b04      	cmp	r3, #4
 800534a:	bf38      	it	cc
 800534c:	2304      	movcc	r3, #4
 800534e:	e04f      	b.n	80053f0 <HAL_I2C_Init+0x1c4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d111      	bne.n	800537c <HAL_I2C_Init+0x150>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1e58      	subs	r0, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	440b      	add	r3, r1
 8005366:	fbb0 f3f3 	udiv	r3, r0, r3
 800536a:	3301      	adds	r3, #1
 800536c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e012      	b.n	80053a2 <HAL_I2C_Init+0x176>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1e58      	subs	r0, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	0099      	lsls	r1, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005392:	3301      	adds	r3, #1
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_I2C_Init+0x17e>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e022      	b.n	80053f0 <HAL_I2C_Init+0x1c4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10e      	bne.n	80053d0 <HAL_I2C_Init+0x1a4>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1e58      	subs	r0, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6859      	ldr	r1, [r3, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	440b      	add	r3, r1
 80053c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c4:	3301      	adds	r3, #1
 80053c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ce:	e00f      	b.n	80053f0 <HAL_I2C_Init+0x1c4>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1e58      	subs	r0, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6859      	ldr	r1, [r3, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	0099      	lsls	r1, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	6809      	ldr	r1, [r1, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800541e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6911      	ldr	r1, [r2, #16]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	4311      	orrs	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	430b      	orrs	r3, r1
 8005432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	000186a0 	.word	0x000186a0
 800548c:	001e847f 	.word	0x001e847f
 8005490:	003d08ff 	.word	0x003d08ff
 8005494:	431bde83 	.word	0x431bde83
 8005498:	10624dd3 	.word	0x10624dd3

0800549c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	461a      	mov	r2, r3
 80054a8:	460b      	mov	r3, r1
 80054aa:	817b      	strh	r3, [r7, #10]
 80054ac:	4613      	mov	r3, r2
 80054ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b20      	cmp	r3, #32
 80054be:	f040 80f4 	bne.w	80056aa <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80054c2:	4b7c      	ldr	r3, [pc, #496]	; (80056b4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	08db      	lsrs	r3, r3, #3
 80054c8:	4a7b      	ldr	r2, [pc, #492]	; (80056b8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0a1a      	lsrs	r2, r3, #8
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009a      	lsls	r2, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3b01      	subs	r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0ca      	b.n	80056ac <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d0db      	beq.n	80054dc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_I2C_Master_Transmit_DMA+0x96>
 800552e:	2302      	movs	r3, #2
 8005530:	e0bc      	b.n	80056ac <HAL_I2C_Master_Transmit_DMA+0x210>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d007      	beq.n	8005558 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2221      	movs	r2, #33	; 0x21
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2210      	movs	r2, #16
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	893a      	ldrh	r2, [r7, #8]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a49      	ldr	r2, [pc, #292]	; (80056bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800559a:	897a      	ldrh	r2, [r7, #10]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d062      	beq.n	800566e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	4a44      	ldr	r2, [pc, #272]	; (80056c0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80055ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	4a43      	ldr	r2, [pc, #268]	; (80056c4 <HAL_I2C_Master_Transmit_DMA+0x228>)
 80055b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	2200      	movs	r2, #0
 80055be:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	2200      	movs	r2, #0
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	2200      	movs	r2, #0
 80055ce:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	2200      	movs	r2, #0
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	4619      	mov	r1, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3310      	adds	r3, #16
 80055e8:	461a      	mov	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	f7ff f96b 	bl	80048c8 <HAL_DMA_Start_IT>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d124      	bne.n	8005646 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800560a:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561a:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005632:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	e02f      	b.n	80056a6 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0210 	orr.w	r2, r3, #16
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e01e      	b.n	80056ac <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80056a4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000010 	.word	0x20000010
 80056b8:	14f8b589 	.word	0x14f8b589
 80056bc:	ffff0000 	.word	0xffff0000
 80056c0:	08006fd9 	.word	0x08006fd9
 80056c4:	08007183 	.word	0x08007183

080056c8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	461a      	mov	r2, r3
 80056d4:	460b      	mov	r3, r1
 80056d6:	817b      	strh	r3, [r7, #10]
 80056d8:	4613      	mov	r3, r2
 80056da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	f040 80f4 	bne.w	80058d6 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056ee:	4b7c      	ldr	r3, [pc, #496]	; (80058e0 <HAL_I2C_Master_Receive_DMA+0x218>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	4a7b      	ldr	r2, [pc, #492]	; (80058e4 <HAL_I2C_Master_Receive_DMA+0x21c>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	0a1a      	lsrs	r2, r3, #8
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009a      	lsls	r2, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	3b01      	subs	r3, #1
 800570c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e0ca      	b.n	80058d8 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b02      	cmp	r3, #2
 800574e:	d0db      	beq.n	8005708 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_I2C_Master_Receive_DMA+0x96>
 800575a:	2302      	movs	r3, #2
 800575c:	e0bc      	b.n	80058d8 <HAL_I2C_Master_Receive_DMA+0x210>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d007      	beq.n	8005784 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005792:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2222      	movs	r2, #34	; 0x22
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2210      	movs	r2, #16
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	893a      	ldrh	r2, [r7, #8]
 80057b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a49      	ldr	r2, [pc, #292]	; (80058e8 <HAL_I2C_Master_Receive_DMA+0x220>)
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80057c6:	897a      	ldrh	r2, [r7, #10]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d062      	beq.n	800589a <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	4a44      	ldr	r2, [pc, #272]	; (80058ec <HAL_I2C_Master_Receive_DMA+0x224>)
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	4a43      	ldr	r2, [pc, #268]	; (80058f0 <HAL_I2C_Master_Receive_DMA+0x228>)
 80057e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2200      	movs	r2, #0
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	2200      	movs	r2, #0
 80057fa:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	2200      	movs	r2, #0
 8005802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3310      	adds	r3, #16
 800580e:	4619      	mov	r1, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	461a      	mov	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	f7ff f855 	bl	80048c8 <HAL_DMA_Start_IT>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d124      	bne.n	8005872 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005836:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005846:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800585e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800586e:	605a      	str	r2, [r3, #4]
 8005870:	e02f      	b.n	80058d2 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f043 0210 	orr.w	r2, r3, #16
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e01e      	b.n	80058d8 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058a8:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b8:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80058d0:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000010 	.word	0x20000010
 80058e4:	14f8b589 	.word	0x14f8b589
 80058e8:	ffff0000 	.word	0xffff0000
 80058ec:	08006fd9 	.word	0x08006fd9
 80058f0:	08007183 	.word	0x08007183

080058f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005914:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b10      	cmp	r3, #16
 8005922:	d003      	beq.n	800592c <HAL_I2C_EV_IRQHandler+0x38>
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	f040 80b6 	bne.w	8005a98 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10d      	bne.n	8005962 <HAL_I2C_EV_IRQHandler+0x6e>
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800594c:	d003      	beq.n	8005956 <HAL_I2C_EV_IRQHandler+0x62>
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005954:	d101      	bne.n	800595a <HAL_I2C_EV_IRQHandler+0x66>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x68>
 800595a:	2300      	movs	r3, #0
 800595c:	2b01      	cmp	r3, #1
 800595e:	f000 8127 	beq.w	8005bb0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <HAL_I2C_EV_IRQHandler+0x92>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	0a5b      	lsrs	r3, r3, #9
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 fcbe 	bl	80072fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fd18 	bl	80063b4 <I2C_Master_SB>
 8005984:	e087      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_I2C_EV_IRQHandler+0xb2>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	0a5b      	lsrs	r3, r3, #9
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fd8e 	bl	80064c0 <I2C_Master_ADD10>
 80059a4:	e077      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_I2C_EV_IRQHandler+0xd2>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	0a5b      	lsrs	r3, r3, #9
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fda8 	bl	8006514 <I2C_Master_ADDR>
 80059c4:	e067      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d030      	beq.n	8005a34 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e0:	f000 80e8 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	09db      	lsrs	r3, r3, #7
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00f      	beq.n	8005a10 <HAL_I2C_EV_IRQHandler+0x11c>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	0a9b      	lsrs	r3, r3, #10
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <HAL_I2C_EV_IRQHandler+0x11c>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f9e4 	bl	8005dd6 <I2C_MasterTransmit_TXE>
 8005a0e:	e042      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80cb 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	0a5b      	lsrs	r3, r3, #9
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80c4 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa6e 	bl	8005f0e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a32:	e0bf      	b.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a42:	f000 80b7 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <HAL_I2C_EV_IRQHandler+0x17e>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	0a9b      	lsrs	r3, r3, #10
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_I2C_EV_IRQHandler+0x17e>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fb36 	bl	80060dc <I2C_MasterReceive_RXNE>
 8005a70:	e011      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 809a 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	0a5b      	lsrs	r3, r3, #9
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8093 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fba6 	bl	80061e0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a94:	e08e      	b.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005a96:	e08d      	b.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	e007      	b.n	8005aba <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d012      	beq.n	8005aec <HAL_I2C_EV_IRQHandler+0x1f8>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	0a5b      	lsrs	r3, r3, #9
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005ae2:	69b9      	ldr	r1, [r7, #24]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 ff64 	bl	80069b2 <I2C_Slave_ADDR>
 8005aea:	e066      	b.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_I2C_EV_IRQHandler+0x218>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	0a5b      	lsrs	r3, r3, #9
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 ff99 	bl	8006a3c <I2C_Slave_STOPF>
 8005b0a:	e056      	b.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	2b21      	cmp	r3, #33	; 0x21
 8005b10:	d002      	beq.n	8005b18 <HAL_I2C_EV_IRQHandler+0x224>
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b29      	cmp	r3, #41	; 0x29
 8005b16:	d125      	bne.n	8005b64 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	09db      	lsrs	r3, r3, #7
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00f      	beq.n	8005b44 <HAL_I2C_EV_IRQHandler+0x250>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_I2C_EV_IRQHandler+0x250>
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fe7a 	bl	8006836 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b42:	e039      	b.n	8005bb8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d033      	beq.n	8005bb8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	0a5b      	lsrs	r3, r3, #9
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d02d      	beq.n	8005bb8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fea7 	bl	80068b0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b62:	e029      	b.n	8005bb8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00f      	beq.n	8005b90 <HAL_I2C_EV_IRQHandler+0x29c>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	0a9b      	lsrs	r3, r3, #10
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d009      	beq.n	8005b90 <HAL_I2C_EV_IRQHandler+0x29c>
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d103      	bne.n	8005b90 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 feb2 	bl	80068f2 <I2C_SlaveReceive_RXNE>
 8005b8e:	e014      	b.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	0a5b      	lsrs	r3, r3, #9
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fee0 	bl	800696e <I2C_SlaveReceive_BTF>
 8005bae:	e004      	b.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bb8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <HAL_I2C_ER_IRQHandler+0x4e>
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	0a5b      	lsrs	r3, r3, #9
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00e      	beq.n	8005c38 <HAL_I2C_ER_IRQHandler+0x78>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d008      	beq.n	8005c38 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005c36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d03f      	beq.n	8005cc4 <HAL_I2C_ER_IRQHandler+0x104>
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d039      	beq.n	8005cc4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005c50:	7efb      	ldrb	r3, [r7, #27]
 8005c52:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c62:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005c6a:	7ebb      	ldrb	r3, [r7, #26]
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d112      	bne.n	8005c96 <HAL_I2C_ER_IRQHandler+0xd6>
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <HAL_I2C_ER_IRQHandler+0xd6>
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	2b21      	cmp	r3, #33	; 0x21
 8005c7a:	d008      	beq.n	8005c8e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005c7c:	7cfb      	ldrb	r3, [r7, #19]
 8005c7e:	2b29      	cmp	r3, #41	; 0x29
 8005c80:	d005      	beq.n	8005c8e <HAL_I2C_ER_IRQHandler+0xce>
 8005c82:	7cfb      	ldrb	r3, [r7, #19]
 8005c84:	2b28      	cmp	r3, #40	; 0x28
 8005c86:	d106      	bne.n	8005c96 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b21      	cmp	r3, #33	; 0x21
 8005c8c:	d103      	bne.n	8005c96 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 f804 	bl	8006c9c <I2C_Slave_AF>
 8005c94:	e016      	b.n	8005cc4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c9e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	f043 0304 	orr.w	r3, r3, #4
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ca8:	7efb      	ldrb	r3, [r7, #27]
 8005caa:	2b10      	cmp	r3, #16
 8005cac:	d002      	beq.n	8005cb4 <HAL_I2C_ER_IRQHandler+0xf4>
 8005cae:	7efb      	ldrb	r3, [r7, #27]
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	d107      	bne.n	8005cc4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	0adb      	lsrs	r3, r3, #11
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <HAL_I2C_ER_IRQHandler+0x12e>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	f043 0308 	orr.w	r3, r3, #8
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005cec:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 f83b 	bl	8006d7c <I2C_ITError>
  }
}
 8005d06:	bf00      	nop
 8005d08:	3728      	adds	r7, #40	; 0x28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70fb      	strb	r3, [r7, #3]
 8005d42:	4613      	mov	r3, r2
 8005d44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dec:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d150      	bne.n	8005e9e <I2C_MasterTransmit_TXE+0xc8>
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b21      	cmp	r3, #33	; 0x21
 8005e00:	d14d      	bne.n	8005e9e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d01d      	beq.n	8005e44 <I2C_MasterTransmit_TXE+0x6e>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d01a      	beq.n	8005e44 <I2C_MasterTransmit_TXE+0x6e>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e14:	d016      	beq.n	8005e44 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e24:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2211      	movs	r2, #17
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fd f883 	bl	8002f48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e42:	e060      	b.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e52:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e62:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d107      	bne.n	8005e8e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff6d 	bl	8005d66 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e8c:	e03b      	b.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fd f856 	bl	8002f48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e9c:	e033      	b.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b21      	cmp	r3, #33	; 0x21
 8005ea2:	d005      	beq.n	8005eb0 <I2C_MasterTransmit_TXE+0xda>
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d12d      	bne.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b22      	cmp	r3, #34	; 0x22
 8005eae:	d12a      	bne.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d108      	bne.n	8005ecc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005eca:	e01c      	b.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d103      	bne.n	8005ee0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f898 	bl	800600e <I2C_MemoryTransmit_TXE_BTF>
}
 8005ede:	e012      	b.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f04:	e7ff      	b.n	8005f06 <I2C_MasterTransmit_TXE+0x130>
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b21      	cmp	r3, #33	; 0x21
 8005f26:	d165      	bne.n	8005ff4 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d012      	beq.n	8005f58 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005f56:	e056      	b.n	8006006 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d01d      	beq.n	8005f9a <I2C_MasterTransmit_BTF+0x8c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d01a      	beq.n	8005f9a <I2C_MasterTransmit_BTF+0x8c>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f6a:	d016      	beq.n	8005f9a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f7a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2211      	movs	r2, #17
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc ffd8 	bl	8002f48 <HAL_I2C_MasterTxCpltCallback>
}
 8005f98:	e035      	b.n	8006006 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fa8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d107      	bne.n	8005fe4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fec2 	bl	8005d66 <HAL_I2C_MemTxCpltCallback>
}
 8005fe2:	e010      	b.n	8006006 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fc ffab 	bl	8002f48 <HAL_I2C_MasterTxCpltCallback>
}
 8005ff2:	e008      	b.n	8006006 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d102      	bne.n	8006006 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f804 	bl	800600e <I2C_MemoryTransmit_TXE_BTF>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11d      	bne.n	800605a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10b      	bne.n	800603e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602a:	b2da      	uxtb	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800603c:	e048      	b.n	80060d0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006042:	b29b      	uxth	r3, r3
 8006044:	121b      	asrs	r3, r3, #8
 8006046:	b2da      	uxtb	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006058:	e03a      	b.n	80060d0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10b      	bne.n	800607a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006066:	b2da      	uxtb	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006078:	e02a      	b.n	80060d0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	2b02      	cmp	r3, #2
 8006080:	d126      	bne.n	80060d0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b22      	cmp	r3, #34	; 0x22
 800608c:	d108      	bne.n	80060a0 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	e017      	b.n	80060d0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b21      	cmp	r3, #33	; 0x21
 80060aa:	d111      	bne.n	80060d0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b22      	cmp	r3, #34	; 0x22
 80060ee:	d173      	bne.n	80061d8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d920      	bls.n	8006140 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d154      	bne.n	80061d8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800613e:	e04b      	b.n	80061d8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	2b02      	cmp	r3, #2
 8006146:	d047      	beq.n	80061d8 <I2C_MasterReceive_RXNE+0xfc>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d002      	beq.n	8006154 <I2C_MasterReceive_RXNE+0x78>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d141      	bne.n	80061d8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006162:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006172:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d10a      	bne.n	80061c4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff fddc 	bl	8005d7a <HAL_I2C_MemRxCpltCallback>
}
 80061c2:	e009      	b.n	80061d8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2212      	movs	r2, #18
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fc fee6 	bl	8002fa4 <HAL_I2C_MasterRxCpltCallback>
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d11b      	bne.n	8006230 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006206:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800622e:	e0bd      	b.n	80063ac <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d129      	bne.n	800628e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006248:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d00a      	beq.n	8006266 <I2C_MasterReceive_BTF+0x86>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d007      	beq.n	8006266 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006264:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800628c:	e08e      	b.n	80063ac <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d176      	bne.n	8006386 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d002      	beq.n	80062a4 <I2C_MasterReceive_BTF+0xc4>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d108      	bne.n	80062b6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e019      	b.n	80062ea <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d002      	beq.n	80062c2 <I2C_MasterReceive_BTF+0xe2>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d108      	bne.n	80062d4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e00a      	b.n	80062ea <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d007      	beq.n	80062ea <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006344:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d10a      	bne.n	8006370 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fd06 	bl	8005d7a <HAL_I2C_MemRxCpltCallback>
}
 800636e:	e01d      	b.n	80063ac <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2212      	movs	r2, #18
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fe10 	bl	8002fa4 <HAL_I2C_MasterRxCpltCallback>
}
 8006384:	e012      	b.n	80063ac <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d117      	bne.n	80063f8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063e0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80063e2:	e067      	b.n	80064b4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	611a      	str	r2, [r3, #16]
}
 80063f6:	e05d      	b.n	80064b4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006400:	d133      	bne.n	800646a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b21      	cmp	r3, #33	; 0x21
 800640c:	d109      	bne.n	8006422 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800641e:	611a      	str	r2, [r3, #16]
 8006420:	e008      	b.n	8006434 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	b2da      	uxtb	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <I2C_Master_SB+0x92>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d108      	bne.n	8006458 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	2b00      	cmp	r3, #0
 800644c:	d032      	beq.n	80064b4 <I2C_Master_SB+0x100>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02d      	beq.n	80064b4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006466:	605a      	str	r2, [r3, #4]
}
 8006468:	e024      	b.n	80064b4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10e      	bne.n	8006490 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	b29b      	uxth	r3, r3
 8006478:	11db      	asrs	r3, r3, #7
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 0306 	and.w	r3, r3, #6
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f063 030f 	orn	r3, r3, #15
 8006486:	b2da      	uxtb	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	611a      	str	r2, [r3, #16]
}
 800648e:	e011      	b.n	80064b4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10d      	bne.n	80064b4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	b29b      	uxth	r3, r3
 800649e:	11db      	asrs	r3, r3, #7
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0306 	and.w	r3, r3, #6
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f063 030e 	orn	r3, r3, #14
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	611a      	str	r2, [r3, #16]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <I2C_Master_ADD10+0x24>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d011      	beq.n	8006508 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <I2C_Master_ADD10+0x38>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006506:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b091      	sub	sp, #68	; 0x44
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006522:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b22      	cmp	r3, #34	; 0x22
 800653c:	f040 8169 	bne.w	8006812 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10f      	bne.n	8006568 <I2C_Master_ADDR+0x54>
 8006548:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d10b      	bne.n	8006568 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006550:	2300      	movs	r3, #0
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	633b      	str	r3, [r7, #48]	; 0x30
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	e160      	b.n	800682a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11d      	bne.n	80065ac <I2C_Master_ADDR+0x98>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006578:	d118      	bne.n	80065ac <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657a:	2300      	movs	r3, #0
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800659e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50
 80065aa:	e13e      	b.n	800682a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d113      	bne.n	80065de <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b6:	2300      	movs	r3, #0
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e115      	b.n	800680a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	f040 808a 	bne.w	80066fe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065f0:	d137      	bne.n	8006662 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006600:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006610:	d113      	bne.n	800663a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006620:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	e0e7      	b.n	800680a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663a:	2300      	movs	r3, #0
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	623b      	str	r3, [r7, #32]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	e0d3      	b.n	800680a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b08      	cmp	r3, #8
 8006666:	d02e      	beq.n	80066c6 <I2C_Master_ADDR+0x1b2>
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	2b20      	cmp	r3, #32
 800666c:	d02b      	beq.n	80066c6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	2b12      	cmp	r3, #18
 8006672:	d102      	bne.n	800667a <I2C_Master_ADDR+0x166>
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	2b01      	cmp	r3, #1
 8006678:	d125      	bne.n	80066c6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	2b04      	cmp	r3, #4
 800667e:	d00e      	beq.n	800669e <I2C_Master_ADDR+0x18a>
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	2b02      	cmp	r3, #2
 8006684:	d00b      	beq.n	800669e <I2C_Master_ADDR+0x18a>
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b10      	cmp	r3, #16
 800668a:	d008      	beq.n	800669e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e007      	b.n	80066ae <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	e0a1      	b.n	800680a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e085      	b.n	800680a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d14d      	bne.n	80067a4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	2b04      	cmp	r3, #4
 800670c:	d016      	beq.n	800673c <I2C_Master_ADDR+0x228>
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	2b02      	cmp	r3, #2
 8006712:	d013      	beq.n	800673c <I2C_Master_ADDR+0x228>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	2b10      	cmp	r3, #16
 8006718:	d010      	beq.n	800673c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006728:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e007      	b.n	800674c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800674a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675a:	d117      	bne.n	800678c <I2C_Master_ADDR+0x278>
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006762:	d00b      	beq.n	800677c <I2C_Master_ADDR+0x268>
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	2b01      	cmp	r3, #1
 8006768:	d008      	beq.n	800677c <I2C_Master_ADDR+0x268>
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	2b08      	cmp	r3, #8
 800676e:	d005      	beq.n	800677c <I2C_Master_ADDR+0x268>
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	2b10      	cmp	r3, #16
 8006774:	d002      	beq.n	800677c <I2C_Master_ADDR+0x268>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2b20      	cmp	r3, #32
 800677a:	d107      	bne.n	800678c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800678a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	e032      	b.n	800680a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067b2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c2:	d117      	bne.n	80067f4 <I2C_Master_ADDR+0x2e0>
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067ca:	d00b      	beq.n	80067e4 <I2C_Master_ADDR+0x2d0>
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d008      	beq.n	80067e4 <I2C_Master_ADDR+0x2d0>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d005      	beq.n	80067e4 <I2C_Master_ADDR+0x2d0>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d002      	beq.n	80067e4 <I2C_Master_ADDR+0x2d0>
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d107      	bne.n	80067f4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006810:	e00b      	b.n	800682a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
}
 8006828:	e7ff      	b.n	800682a <I2C_Master_ADDR+0x316>
 800682a:	bf00      	nop
 800682c:	3744      	adds	r7, #68	; 0x44
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d02b      	beq.n	80068a8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d114      	bne.n	80068a8 <I2C_SlaveTransmit_TXE+0x72>
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2b29      	cmp	r3, #41	; 0x29
 8006882:	d111      	bne.n	80068a8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006892:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2221      	movs	r2, #33	; 0x21
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2228      	movs	r2, #40	; 0x28
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fa33 	bl	8005d0e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d011      	beq.n	80068e6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d02c      	beq.n	8006966 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d114      	bne.n	8006966 <I2C_SlaveReceive_RXNE+0x74>
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b2a      	cmp	r3, #42	; 0x2a
 8006940:	d111      	bne.n	8006966 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006950:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2222      	movs	r2, #34	; 0x22
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2228      	movs	r2, #40	; 0x28
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff f9de 	bl	8005d22 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d012      	beq.n	80069a6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069cc:	2b28      	cmp	r3, #40	; 0x28
 80069ce:	d127      	bne.n	8006a20 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069de:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	81bb      	strh	r3, [r7, #12]
 8006a02:	e002      	b.n	8006a0a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a12:	89ba      	ldrh	r2, [r7, #12]
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff f98c 	bl	8005d36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a1e:	e008      	b.n	8006a32 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0202 	mvn.w	r2, #2
 8006a28:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a98:	d172      	bne.n	8006b80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b22      	cmp	r3, #34	; 0x22
 8006a9e:	d002      	beq.n	8006aa6 <I2C_Slave_STOPF+0x6a>
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa4:	d135      	bne.n	8006b12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ad8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe f8f6 	bl	8004cd0 <HAL_DMA_GetState>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d049      	beq.n	8006b7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	4a69      	ldr	r2, [pc, #420]	; (8006c94 <I2C_Slave_STOPF+0x258>)
 8006af0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd ff3e 	bl	8004978 <HAL_DMA_Abort_IT>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d03d      	beq.n	8006b7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b10:	e035      	b.n	8006b7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	f043 0204 	orr.w	r2, r3, #4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe f8c0 	bl	8004cd0 <HAL_DMA_GetState>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d014      	beq.n	8006b80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	4a4e      	ldr	r2, [pc, #312]	; (8006c94 <I2C_Slave_STOPF+0x258>)
 8006b5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fd ff08 	bl	8004978 <HAL_DMA_Abort_IT>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	e000      	b.n	8006b80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d03e      	beq.n	8006c08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d112      	bne.n	8006bbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d112      	bne.n	8006bf2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	f043 0204 	orr.w	r2, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8b3 	bl	8006d7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c16:	e039      	b.n	8006c8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1c:	d109      	bne.n	8006c32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2228      	movs	r2, #40	; 0x28
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff f878 	bl	8005d22 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b28      	cmp	r3, #40	; 0x28
 8006c3c:	d111      	bne.n	8006c62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <I2C_Slave_STOPF+0x25c>)
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff f879 	bl	8005d52 <HAL_I2C_ListenCpltCallback>
}
 8006c60:	e014      	b.n	8006c8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	2b22      	cmp	r3, #34	; 0x22
 8006c68:	d002      	beq.n	8006c70 <I2C_Slave_STOPF+0x234>
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b22      	cmp	r3, #34	; 0x22
 8006c6e:	d10d      	bne.n	8006c8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff f84b 	bl	8005d22 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	080071fd 	.word	0x080071fd
 8006c98:	ffff0000 	.word	0xffff0000

08006c9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d002      	beq.n	8006cbe <I2C_Slave_AF+0x22>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d129      	bne.n	8006d12 <I2C_Slave_AF+0x76>
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	2b28      	cmp	r3, #40	; 0x28
 8006cc2:	d126      	bne.n	8006d12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a2c      	ldr	r2, [pc, #176]	; (8006d78 <I2C_Slave_AF+0xdc>)
 8006cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cd8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ce2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff f821 	bl	8005d52 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d10:	e02e      	b.n	8006d70 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	2b21      	cmp	r3, #33	; 0x21
 8006d16:	d126      	bne.n	8006d66 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <I2C_Slave_AF+0xdc>)
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2221      	movs	r2, #33	; 0x21
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fe ffd5 	bl	8005d0e <HAL_I2C_SlaveTxCpltCallback>
}
 8006d64:	e004      	b.n	8006d70 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6e:	615a      	str	r2, [r3, #20]
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	ffff0000 	.word	0xffff0000

08006d7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d10a      	bne.n	8006dae <I2C_ITError+0x32>
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b22      	cmp	r3, #34	; 0x22
 8006d9c:	d107      	bne.n	8006dae <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006db4:	2b28      	cmp	r3, #40	; 0x28
 8006db6:	d107      	bne.n	8006dc8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2228      	movs	r2, #40	; 0x28
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dc6:	e015      	b.n	8006df4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd6:	d006      	beq.n	8006de6 <I2C_ITError+0x6a>
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b60      	cmp	r3, #96	; 0x60
 8006ddc:	d003      	beq.n	8006de6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d162      	bne.n	8006eca <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d020      	beq.n	8006e64 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	4a6a      	ldr	r2, [pc, #424]	; (8006fd0 <I2C_ITError+0x254>)
 8006e28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fd fda2 	bl	8004978 <HAL_DMA_Abort_IT>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 8089 	beq.w	8006f4e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4798      	blx	r3
 8006e62:	e074      	b.n	8006f4e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	4a59      	ldr	r2, [pc, #356]	; (8006fd0 <I2C_ITError+0x254>)
 8006e6a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd fd81 	bl	8004978 <HAL_DMA_Abort_IT>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d068      	beq.n	8006f4e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d10b      	bne.n	8006ea2 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	e041      	b.n	8006f4e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b60      	cmp	r3, #96	; 0x60
 8006ed4:	d125      	bne.n	8006f22 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d10b      	bne.n	8006f0a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fe ff37 	bl	8005d8e <HAL_I2C_AbortCpltCallback>
 8006f20:	e015      	b.n	8006f4e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d10b      	bne.n	8006f48 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fb fff3 	bl	8002f34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10e      	bne.n	8006f7c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f8a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d113      	bne.n	8006fc8 <I2C_ITError+0x24c>
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b28      	cmp	r3, #40	; 0x28
 8006fa4:	d110      	bne.n	8006fc8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <I2C_ITError+0x258>)
 8006faa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fe fec5 	bl	8005d52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	080071fd 	.word	0x080071fd
 8006fd4:	ffff0000 	.word	0xffff0000

08006fd8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800700a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	2200      	movs	r2, #0
 800701a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	2200      	movs	r2, #0
 800702a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800702c:	7cfb      	ldrb	r3, [r7, #19]
 800702e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007032:	2b21      	cmp	r3, #33	; 0x21
 8007034:	d007      	beq.n	8007046 <I2C_DMAXferCplt+0x6e>
 8007036:	7cfb      	ldrb	r3, [r7, #19]
 8007038:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800703c:	2b22      	cmp	r3, #34	; 0x22
 800703e:	d131      	bne.n	80070a4 <I2C_DMAXferCplt+0xcc>
 8007040:	7cbb      	ldrb	r3, [r7, #18]
 8007042:	2b20      	cmp	r3, #32
 8007044:	d12e      	bne.n	80070a4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007054:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2200      	movs	r2, #0
 800705a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800705c:	7cfb      	ldrb	r3, [r7, #19]
 800705e:	2b29      	cmp	r3, #41	; 0x29
 8007060:	d10a      	bne.n	8007078 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2221      	movs	r2, #33	; 0x21
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2228      	movs	r2, #40	; 0x28
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f7fe fe4c 	bl	8005d0e <HAL_I2C_SlaveTxCpltCallback>
 8007076:	e00c      	b.n	8007092 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	2b2a      	cmp	r3, #42	; 0x2a
 800707c:	d109      	bne.n	8007092 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2222      	movs	r2, #34	; 0x22
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2228      	movs	r2, #40	; 0x28
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800708c:	6978      	ldr	r0, [r7, #20]
 800708e:	f7fe fe48 	bl	8005d22 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80070a0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80070a2:	e06a      	b.n	800717a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d064      	beq.n	800717a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d107      	bne.n	80070ca <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070d8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070e0:	d009      	beq.n	80070f6 <I2C_DMAXferCplt+0x11e>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d006      	beq.n	80070f6 <I2C_DMAXferCplt+0x11e>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80070ee:	d002      	beq.n	80070f6 <I2C_DMAXferCplt+0x11e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d107      	bne.n	8007106 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007104:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007114:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007124:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2200      	movs	r2, #0
 800712a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007134:	6978      	ldr	r0, [r7, #20]
 8007136:	f7fb fefd 	bl	8002f34 <HAL_I2C_ErrorCallback>
}
 800713a:	e01e      	b.n	800717a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d10a      	bne.n	8007166 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800715e:	6978      	ldr	r0, [r7, #20]
 8007160:	f7fe fe0b 	bl	8005d7a <HAL_I2C_MemRxCpltCallback>
}
 8007164:	e009      	b.n	800717a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2212      	movs	r2, #18
 8007172:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f7fb ff15 	bl	8002fa4 <HAL_I2C_MasterRxCpltCallback>
}
 800717a:	bf00      	nop
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719c:	2200      	movs	r2, #0
 800719e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	2200      	movs	r2, #0
 80071ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fd fd9b 	bl	8004cec <HAL_DMA_GetError>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d01b      	beq.n	80071f4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ca:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f043 0210 	orr.w	r2, r3, #16
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7fb fea0 	bl	8002f34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071f4:	bf00      	nop
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007210:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	2200      	movs	r2, #0
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	2200      	movs	r2, #0
 8007230:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007240:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007254:	2200      	movs	r2, #0
 8007256:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	2200      	movs	r2, #0
 8007266:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0201 	bic.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b60      	cmp	r3, #96	; 0x60
 8007282:	d10e      	bne.n	80072a2 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7fe fd77 	bl	8005d8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072a0:	e027      	b.n	80072f2 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072a8:	2b28      	cmp	r3, #40	; 0x28
 80072aa:	d117      	bne.n	80072dc <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2228      	movs	r2, #40	; 0x28
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072da:	e007      	b.n	80072ec <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7fb fe21 	bl	8002f34 <HAL_I2C_ErrorCallback>
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800730a:	d103      	bne.n	8007314 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007312:	e007      	b.n	8007324 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800731c:	d102      	bne.n	8007324 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2208      	movs	r2, #8
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e25b      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d075      	beq.n	800743a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800734e:	4ba3      	ldr	r3, [pc, #652]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b04      	cmp	r3, #4
 8007358:	d00c      	beq.n	8007374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800735a:	4ba0      	ldr	r3, [pc, #640]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007362:	2b08      	cmp	r3, #8
 8007364:	d112      	bne.n	800738c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007366:	4b9d      	ldr	r3, [pc, #628]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800736e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007372:	d10b      	bne.n	800738c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007374:	4b99      	ldr	r3, [pc, #612]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d05b      	beq.n	8007438 <HAL_RCC_OscConfig+0x108>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d157      	bne.n	8007438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e236      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007394:	d106      	bne.n	80073a4 <HAL_RCC_OscConfig+0x74>
 8007396:	4b91      	ldr	r3, [pc, #580]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a90      	ldr	r2, [pc, #576]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 800739c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	e01d      	b.n	80073e0 <HAL_RCC_OscConfig+0xb0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073ac:	d10c      	bne.n	80073c8 <HAL_RCC_OscConfig+0x98>
 80073ae:	4b8b      	ldr	r3, [pc, #556]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a8a      	ldr	r2, [pc, #552]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	4b88      	ldr	r3, [pc, #544]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a87      	ldr	r2, [pc, #540]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e00b      	b.n	80073e0 <HAL_RCC_OscConfig+0xb0>
 80073c8:	4b84      	ldr	r3, [pc, #528]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a83      	ldr	r2, [pc, #524]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	4b81      	ldr	r3, [pc, #516]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a80      	ldr	r2, [pc, #512]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80073da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d013      	beq.n	8007410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e8:	f7fd f880 	bl	80044ec <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073f0:	f7fd f87c 	bl	80044ec <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b64      	cmp	r3, #100	; 0x64
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e1fb      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007402:	4b76      	ldr	r3, [pc, #472]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0xc0>
 800740e:	e014      	b.n	800743a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fd f86c 	bl	80044ec <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007418:	f7fd f868 	bl	80044ec <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b64      	cmp	r3, #100	; 0x64
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e1e7      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800742a:	4b6c      	ldr	r3, [pc, #432]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0xe8>
 8007436:	e000      	b.n	800743a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d063      	beq.n	800750e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007446:	4b65      	ldr	r3, [pc, #404]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007452:	4b62      	ldr	r3, [pc, #392]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800745a:	2b08      	cmp	r3, #8
 800745c:	d11c      	bne.n	8007498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800745e:	4b5f      	ldr	r3, [pc, #380]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d116      	bne.n	8007498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800746a:	4b5c      	ldr	r3, [pc, #368]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_RCC_OscConfig+0x152>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d001      	beq.n	8007482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e1bb      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007482:	4b56      	ldr	r3, [pc, #344]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4952      	ldr	r1, [pc, #328]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007492:	4313      	orrs	r3, r2
 8007494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007496:	e03a      	b.n	800750e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d020      	beq.n	80074e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074a0:	4b4f      	ldr	r3, [pc, #316]	; (80075e0 <HAL_RCC_OscConfig+0x2b0>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a6:	f7fd f821 	bl	80044ec <HAL_GetTick>
 80074aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ac:	e008      	b.n	80074c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074ae:	f7fd f81d 	bl	80044ec <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e19c      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c0:	4b46      	ldr	r3, [pc, #280]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0f0      	beq.n	80074ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074cc:	4b43      	ldr	r3, [pc, #268]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4940      	ldr	r1, [pc, #256]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	600b      	str	r3, [r1, #0]
 80074e0:	e015      	b.n	800750e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074e2:	4b3f      	ldr	r3, [pc, #252]	; (80075e0 <HAL_RCC_OscConfig+0x2b0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fd f800 	bl	80044ec <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074f0:	f7fc fffc 	bl	80044ec <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e17b      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007502:	4b36      	ldr	r3, [pc, #216]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d030      	beq.n	800757c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d016      	beq.n	8007550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007522:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <HAL_RCC_OscConfig+0x2b4>)
 8007524:	2201      	movs	r2, #1
 8007526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007528:	f7fc ffe0 	bl	80044ec <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007530:	f7fc ffdc 	bl	80044ec <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e15b      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007542:	4b26      	ldr	r3, [pc, #152]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <HAL_RCC_OscConfig+0x200>
 800754e:	e015      	b.n	800757c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007550:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <HAL_RCC_OscConfig+0x2b4>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007556:	f7fc ffc9 	bl	80044ec <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800755e:	f7fc ffc5 	bl	80044ec <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e144      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f0      	bne.n	800755e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80a0 	beq.w	80076ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800758e:	4b13      	ldr	r3, [pc, #76]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10f      	bne.n	80075ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	4a0e      	ldr	r2, [pc, #56]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6413      	str	r3, [r2, #64]	; 0x40
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <HAL_RCC_OscConfig+0x2ac>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b2:	60bb      	str	r3, [r7, #8]
 80075b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ba:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <HAL_RCC_OscConfig+0x2b8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d121      	bne.n	800760a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075c6:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <HAL_RCC_OscConfig+0x2b8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <HAL_RCC_OscConfig+0x2b8>)
 80075cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075d2:	f7fc ff8b 	bl	80044ec <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d8:	e011      	b.n	80075fe <HAL_RCC_OscConfig+0x2ce>
 80075da:	bf00      	nop
 80075dc:	40023800 	.word	0x40023800
 80075e0:	42470000 	.word	0x42470000
 80075e4:	42470e80 	.word	0x42470e80
 80075e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ec:	f7fc ff7e 	bl	80044ec <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e0fd      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075fe:	4b81      	ldr	r3, [pc, #516]	; (8007804 <HAL_RCC_OscConfig+0x4d4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d106      	bne.n	8007620 <HAL_RCC_OscConfig+0x2f0>
 8007612:	4b7d      	ldr	r3, [pc, #500]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	4a7c      	ldr	r2, [pc, #496]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	6713      	str	r3, [r2, #112]	; 0x70
 800761e:	e01c      	b.n	800765a <HAL_RCC_OscConfig+0x32a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b05      	cmp	r3, #5
 8007626:	d10c      	bne.n	8007642 <HAL_RCC_OscConfig+0x312>
 8007628:	4b77      	ldr	r3, [pc, #476]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 800762a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762c:	4a76      	ldr	r2, [pc, #472]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 800762e:	f043 0304 	orr.w	r3, r3, #4
 8007632:	6713      	str	r3, [r2, #112]	; 0x70
 8007634:	4b74      	ldr	r3, [pc, #464]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	4a73      	ldr	r2, [pc, #460]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6713      	str	r3, [r2, #112]	; 0x70
 8007640:	e00b      	b.n	800765a <HAL_RCC_OscConfig+0x32a>
 8007642:	4b71      	ldr	r3, [pc, #452]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007646:	4a70      	ldr	r2, [pc, #448]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	6713      	str	r3, [r2, #112]	; 0x70
 800764e:	4b6e      	ldr	r3, [pc, #440]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007652:	4a6d      	ldr	r2, [pc, #436]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007654:	f023 0304 	bic.w	r3, r3, #4
 8007658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d015      	beq.n	800768e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007662:	f7fc ff43 	bl	80044ec <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007668:	e00a      	b.n	8007680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7fc ff3f 	bl	80044ec <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	; 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e0bc      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007680:	4b61      	ldr	r3, [pc, #388]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0ee      	beq.n	800766a <HAL_RCC_OscConfig+0x33a>
 800768c:	e014      	b.n	80076b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fc ff2d 	bl	80044ec <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007694:	e00a      	b.n	80076ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fc ff29 	bl	80044ec <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e0a6      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ac:	4b56      	ldr	r3, [pc, #344]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 80076ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ee      	bne.n	8007696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d105      	bne.n	80076ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076be:	4b52      	ldr	r3, [pc, #328]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	4a51      	ldr	r2, [pc, #324]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8092 	beq.w	80077f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076d4:	4b4c      	ldr	r3, [pc, #304]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d05c      	beq.n	800779a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d141      	bne.n	800776c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e8:	4b48      	ldr	r3, [pc, #288]	; (800780c <HAL_RCC_OscConfig+0x4dc>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ee:	f7fc fefd 	bl	80044ec <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076f6:	f7fc fef9 	bl	80044ec <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e078      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007708:	4b3f      	ldr	r3, [pc, #252]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f0      	bne.n	80076f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	019b      	lsls	r3, r3, #6
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	3b01      	subs	r3, #1
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	061b      	lsls	r3, r3, #24
 8007738:	4933      	ldr	r1, [pc, #204]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 800773a:	4313      	orrs	r3, r2
 800773c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800773e:	4b33      	ldr	r3, [pc, #204]	; (800780c <HAL_RCC_OscConfig+0x4dc>)
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007744:	f7fc fed2 	bl	80044ec <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800774c:	f7fc fece 	bl	80044ec <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e04d      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800775e:	4b2a      	ldr	r3, [pc, #168]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f0      	beq.n	800774c <HAL_RCC_OscConfig+0x41c>
 800776a:	e045      	b.n	80077f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800776c:	4b27      	ldr	r3, [pc, #156]	; (800780c <HAL_RCC_OscConfig+0x4dc>)
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007772:	f7fc febb 	bl	80044ec <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800777a:	f7fc feb7 	bl	80044ec <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e036      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800778c:	4b1e      	ldr	r3, [pc, #120]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <HAL_RCC_OscConfig+0x44a>
 8007798:	e02e      	b.n	80077f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e029      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <HAL_RCC_OscConfig+0x4d8>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d11c      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d115      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077ce:	4013      	ands	r3, r2
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10d      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d106      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d001      	beq.n	80077f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40007000 	.word	0x40007000
 8007808:	40023800 	.word	0x40023800
 800780c:	42470060 	.word	0x42470060

08007810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e0cc      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007824:	4b68      	ldr	r3, [pc, #416]	; (80079c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d90c      	bls.n	800784c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007832:	4b65      	ldr	r3, [pc, #404]	; (80079c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800783a:	4b63      	ldr	r3, [pc, #396]	; (80079c8 <HAL_RCC_ClockConfig+0x1b8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d001      	beq.n	800784c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e0b8      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d020      	beq.n	800789a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007864:	4b59      	ldr	r3, [pc, #356]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	4a58      	ldr	r2, [pc, #352]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 800786a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800786e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800787c:	4b53      	ldr	r3, [pc, #332]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	4a52      	ldr	r2, [pc, #328]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007888:	4b50      	ldr	r3, [pc, #320]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	494d      	ldr	r1, [pc, #308]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007896:	4313      	orrs	r3, r2
 8007898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d044      	beq.n	8007930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d107      	bne.n	80078be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ae:	4b47      	ldr	r3, [pc, #284]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d119      	bne.n	80078ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e07f      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d003      	beq.n	80078ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d107      	bne.n	80078de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ce:	4b3f      	ldr	r3, [pc, #252]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e06f      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078de:	4b3b      	ldr	r3, [pc, #236]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e067      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ee:	4b37      	ldr	r3, [pc, #220]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f023 0203 	bic.w	r2, r3, #3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4934      	ldr	r1, [pc, #208]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007900:	f7fc fdf4 	bl	80044ec <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007906:	e00a      	b.n	800791e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007908:	f7fc fdf0 	bl	80044ec <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	f241 3288 	movw	r2, #5000	; 0x1388
 8007916:	4293      	cmp	r3, r2
 8007918:	d901      	bls.n	800791e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e04f      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800791e:	4b2b      	ldr	r3, [pc, #172]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 020c 	and.w	r2, r3, #12
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	429a      	cmp	r2, r3
 800792e:	d1eb      	bne.n	8007908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007930:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d20c      	bcs.n	8007958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800793e:	4b22      	ldr	r3, [pc, #136]	; (80079c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007946:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d001      	beq.n	8007958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e032      	b.n	80079be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007964:	4b19      	ldr	r3, [pc, #100]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	4916      	ldr	r1, [pc, #88]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	4313      	orrs	r3, r2
 8007974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	490e      	ldr	r1, [pc, #56]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 8007992:	4313      	orrs	r3, r2
 8007994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007996:	f000 f821 	bl	80079dc <HAL_RCC_GetSysClockFreq>
 800799a:	4601      	mov	r1, r0
 800799c:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <HAL_RCC_ClockConfig+0x1bc>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	091b      	lsrs	r3, r3, #4
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <HAL_RCC_ClockConfig+0x1c0>)
 80079a8:	5cd3      	ldrb	r3, [r2, r3]
 80079aa:	fa21 f303 	lsr.w	r3, r1, r3
 80079ae:	4a09      	ldr	r2, [pc, #36]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 80079b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079b2:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fc fd54 	bl	8004464 <HAL_InitTick>

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40023c00 	.word	0x40023c00
 80079cc:	40023800 	.word	0x40023800
 80079d0:	080099b8 	.word	0x080099b8
 80079d4:	20000010 	.word	0x20000010
 80079d8:	20000014 	.word	0x20000014

080079dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	2300      	movs	r3, #0
 80079ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079f2:	4b63      	ldr	r3, [pc, #396]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 030c 	and.w	r3, r3, #12
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d007      	beq.n	8007a0e <HAL_RCC_GetSysClockFreq+0x32>
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d008      	beq.n	8007a14 <HAL_RCC_GetSysClockFreq+0x38>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 80b4 	bne.w	8007b70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a08:	4b5e      	ldr	r3, [pc, #376]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a0a:	60bb      	str	r3, [r7, #8]
       break;
 8007a0c:	e0b3      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a0e:	4b5e      	ldr	r3, [pc, #376]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007a10:	60bb      	str	r3, [r7, #8]
      break;
 8007a12:	e0b0      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a14:	4b5a      	ldr	r3, [pc, #360]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a1e:	4b58      	ldr	r3, [pc, #352]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d04a      	beq.n	8007ac0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a2a:	4b55      	ldr	r3, [pc, #340]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	099b      	lsrs	r3, r3, #6
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	ea03 0501 	and.w	r5, r3, r1
 8007a40:	ea04 0602 	and.w	r6, r4, r2
 8007a44:	4629      	mov	r1, r5
 8007a46:	4632      	mov	r2, r6
 8007a48:	f04f 0300 	mov.w	r3, #0
 8007a4c:	f04f 0400 	mov.w	r4, #0
 8007a50:	0154      	lsls	r4, r2, #5
 8007a52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a56:	014b      	lsls	r3, r1, #5
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4622      	mov	r2, r4
 8007a5c:	1b49      	subs	r1, r1, r5
 8007a5e:	eb62 0206 	sbc.w	r2, r2, r6
 8007a62:	f04f 0300 	mov.w	r3, #0
 8007a66:	f04f 0400 	mov.w	r4, #0
 8007a6a:	0194      	lsls	r4, r2, #6
 8007a6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a70:	018b      	lsls	r3, r1, #6
 8007a72:	1a5b      	subs	r3, r3, r1
 8007a74:	eb64 0402 	sbc.w	r4, r4, r2
 8007a78:	f04f 0100 	mov.w	r1, #0
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	00e2      	lsls	r2, r4, #3
 8007a82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a86:	00d9      	lsls	r1, r3, #3
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4614      	mov	r4, r2
 8007a8c:	195b      	adds	r3, r3, r5
 8007a8e:	eb44 0406 	adc.w	r4, r4, r6
 8007a92:	f04f 0100 	mov.w	r1, #0
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	0262      	lsls	r2, r4, #9
 8007a9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007aa0:	0259      	lsls	r1, r3, #9
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f04f 0400 	mov.w	r4, #0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4623      	mov	r3, r4
 8007ab4:	f7f8 ff64 	bl	8000980 <__aeabi_uldivmod>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e049      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ac0:	4b2f      	ldr	r3, [pc, #188]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	099b      	lsrs	r3, r3, #6
 8007ac6:	f04f 0400 	mov.w	r4, #0
 8007aca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ace:	f04f 0200 	mov.w	r2, #0
 8007ad2:	ea03 0501 	and.w	r5, r3, r1
 8007ad6:	ea04 0602 	and.w	r6, r4, r2
 8007ada:	4629      	mov	r1, r5
 8007adc:	4632      	mov	r2, r6
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	f04f 0400 	mov.w	r4, #0
 8007ae6:	0154      	lsls	r4, r2, #5
 8007ae8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007aec:	014b      	lsls	r3, r1, #5
 8007aee:	4619      	mov	r1, r3
 8007af0:	4622      	mov	r2, r4
 8007af2:	1b49      	subs	r1, r1, r5
 8007af4:	eb62 0206 	sbc.w	r2, r2, r6
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	0194      	lsls	r4, r2, #6
 8007b02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007b06:	018b      	lsls	r3, r1, #6
 8007b08:	1a5b      	subs	r3, r3, r1
 8007b0a:	eb64 0402 	sbc.w	r4, r4, r2
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	00e2      	lsls	r2, r4, #3
 8007b18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b1c:	00d9      	lsls	r1, r3, #3
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	195b      	adds	r3, r3, r5
 8007b24:	eb44 0406 	adc.w	r4, r4, r6
 8007b28:	f04f 0100 	mov.w	r1, #0
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	02a2      	lsls	r2, r4, #10
 8007b32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007b36:	0299      	lsls	r1, r3, #10
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	4621      	mov	r1, r4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f04f 0400 	mov.w	r4, #0
 8007b46:	461a      	mov	r2, r3
 8007b48:	4623      	mov	r3, r4
 8007b4a:	f7f8 ff19 	bl	8000980 <__aeabi_uldivmod>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	0c1b      	lsrs	r3, r3, #16
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	60bb      	str	r3, [r7, #8]
      break;
 8007b6e:	e002      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007b72:	60bb      	str	r3, [r7, #8]
      break;
 8007b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b76:	68bb      	ldr	r3, [r7, #8]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b80:	40023800 	.word	0x40023800
 8007b84:	00f42400 	.word	0x00f42400
 8007b88:	007a1200 	.word	0x007a1200

08007b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b90:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b92:	681b      	ldr	r3, [r3, #0]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20000010 	.word	0x20000010

08007ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ba8:	f7ff fff0 	bl	8007b8c <HAL_RCC_GetHCLKFreq>
 8007bac:	4601      	mov	r1, r0
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	0a9b      	lsrs	r3, r3, #10
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	4a03      	ldr	r2, [pc, #12]	; (8007bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bba:	5cd3      	ldrb	r3, [r2, r3]
 8007bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	080099c8 	.word	0x080099c8

08007bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bd0:	f7ff ffdc 	bl	8007b8c <HAL_RCC_GetHCLKFreq>
 8007bd4:	4601      	mov	r1, r0
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	0b5b      	lsrs	r3, r3, #13
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	4a03      	ldr	r2, [pc, #12]	; (8007bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007be2:	5cd3      	ldrb	r3, [r2, r3]
 8007be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40023800 	.word	0x40023800
 8007bf0:	080099c8 	.word	0x080099c8

08007bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e01d      	b.n	8007c42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fc fa18 	bl	8004050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f000 fa40 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b06      	cmp	r3, #6
 8007c72:	d007      	beq.n	8007c84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0201 	orr.w	r2, r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6a1a      	ldr	r2, [r3, #32]
 8007cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10f      	bne.n	8007cda <HAL_TIM_Base_Stop_IT+0x48>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a1a      	ldr	r2, [r3, #32]
 8007cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <HAL_TIM_Base_Stop_IT+0x48>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d122      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d11b      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0202 	mvn.w	r2, #2
 8007d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9a5 	bl	800807a <HAL_TIM_IC_CaptureCallback>
 8007d30:	e005      	b.n	8007d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f997 	bl	8008066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f9a8 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d122      	bne.n	8007d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d11b      	bne.n	8007d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0204 	mvn.w	r2, #4
 8007d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f97b 	bl	800807a <HAL_TIM_IC_CaptureCallback>
 8007d84:	e005      	b.n	8007d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f96d 	bl	8008066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f97e 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d122      	bne.n	8007dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d11b      	bne.n	8007dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0208 	mvn.w	r2, #8
 8007dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f951 	bl	800807a <HAL_TIM_IC_CaptureCallback>
 8007dd8:	e005      	b.n	8007de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f943 	bl	8008066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f954 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d122      	bne.n	8007e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d11b      	bne.n	8007e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0210 	mvn.w	r2, #16
 8007e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2208      	movs	r2, #8
 8007e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f927 	bl	800807a <HAL_TIM_IC_CaptureCallback>
 8007e2c:	e005      	b.n	8007e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f919 	bl	8008066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f92a 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d10e      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d107      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f06f 0201 	mvn.w	r2, #1
 8007e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fb f8ba 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	d10e      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d107      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 faa2 	bl	80083dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d10e      	bne.n	8007ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d107      	bne.n	8007ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f8ef 	bl	80080a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d10e      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d107      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0220 	mvn.w	r2, #32
 8007ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa6c 	bl	80083c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_TIM_ConfigClockSource+0x18>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e0a6      	b.n	800805e <HAL_TIM_ConfigClockSource+0x166>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d067      	beq.n	8008018 <HAL_TIM_ConfigClockSource+0x120>
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d80b      	bhi.n	8007f64 <HAL_TIM_ConfigClockSource+0x6c>
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d073      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x140>
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	d802      	bhi.n	8007f5a <HAL_TIM_ConfigClockSource+0x62>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d06f      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f58:	e078      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d06c      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x140>
 8007f5e:	2b30      	cmp	r3, #48	; 0x30
 8007f60:	d06a      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f62:	e073      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f64:	2b70      	cmp	r3, #112	; 0x70
 8007f66:	d00d      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x8c>
 8007f68:	2b70      	cmp	r3, #112	; 0x70
 8007f6a:	d804      	bhi.n	8007f76 <HAL_TIM_ConfigClockSource+0x7e>
 8007f6c:	2b50      	cmp	r3, #80	; 0x50
 8007f6e:	d033      	beq.n	8007fd8 <HAL_TIM_ConfigClockSource+0xe0>
 8007f70:	2b60      	cmp	r3, #96	; 0x60
 8007f72:	d041      	beq.n	8007ff8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f74:	e06a      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7a:	d066      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x152>
 8007f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f80:	d017      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f82:	e063      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	6899      	ldr	r1, [r3, #8]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f000 f98a 	bl	80082ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	609a      	str	r2, [r3, #8]
      break;
 8007fb0:	e04c      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6899      	ldr	r1, [r3, #8]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f000 f973 	bl	80082ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fd4:	609a      	str	r2, [r3, #8]
      break;
 8007fd6:	e039      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	6859      	ldr	r1, [r3, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f000 f8e7 	bl	80081b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2150      	movs	r1, #80	; 0x50
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f940 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8007ff6:	e029      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6818      	ldr	r0, [r3, #0]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	6859      	ldr	r1, [r3, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	461a      	mov	r2, r3
 8008006:	f000 f906 	bl	8008216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2160      	movs	r1, #96	; 0x60
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f930 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8008016:	e019      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6859      	ldr	r1, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	461a      	mov	r2, r3
 8008026:	f000 f8c7 	bl	80081b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2140      	movs	r1, #64	; 0x40
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f920 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8008036:	e009      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f000 f917 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8008048:	e000      	b.n	800804c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800804a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a34      	ldr	r2, [pc, #208]	; (800819c <TIM_Base_SetConfig+0xe4>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00f      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d6:	d00b      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a31      	ldr	r2, [pc, #196]	; (80081a0 <TIM_Base_SetConfig+0xe8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a30      	ldr	r2, [pc, #192]	; (80081a4 <TIM_Base_SetConfig+0xec>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a2f      	ldr	r2, [pc, #188]	; (80081a8 <TIM_Base_SetConfig+0xf0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d108      	bne.n	8008102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a25      	ldr	r2, [pc, #148]	; (800819c <TIM_Base_SetConfig+0xe4>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01b      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008110:	d017      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a22      	ldr	r2, [pc, #136]	; (80081a0 <TIM_Base_SetConfig+0xe8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <TIM_Base_SetConfig+0xec>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00f      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a20      	ldr	r2, [pc, #128]	; (80081a8 <TIM_Base_SetConfig+0xf0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00b      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <TIM_Base_SetConfig+0xf4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d007      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a1e      	ldr	r2, [pc, #120]	; (80081b0 <TIM_Base_SetConfig+0xf8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <TIM_Base_SetConfig+0xfc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d108      	bne.n	8008154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a08      	ldr	r2, [pc, #32]	; (800819c <TIM_Base_SetConfig+0xe4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d103      	bne.n	8008188 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	615a      	str	r2, [r3, #20]
}
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40014000 	.word	0x40014000
 80081b0:	40014400 	.word	0x40014400
 80081b4:	40014800 	.word	0x40014800

080081b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f023 0201 	bic.w	r2, r3, #1
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 030a 	bic.w	r3, r3, #10
 80081f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008216:	b480      	push	{r7}
 8008218:	b087      	sub	sp, #28
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	f023 0210 	bic.w	r2, r3, #16
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	031b      	lsls	r3, r3, #12
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	f043 0307 	orr.w	r3, r3, #7
 8008298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	609a      	str	r2, [r3, #8]
}
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	021a      	lsls	r2, r3, #8
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	609a      	str	r2, [r3, #8]
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008300:	2302      	movs	r3, #2
 8008302:	e050      	b.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008350:	d013      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a16      	ldr	r2, [pc, #88]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a15      	ldr	r2, [pc, #84]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a13      	ldr	r2, [pc, #76]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d10c      	bne.n	8008394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4313      	orrs	r3, r2
 800838a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40000400 	.word	0x40000400
 80083bc:	40000800 	.word	0x40000800
 80083c0:	40000c00 	.word	0x40000c00
 80083c4:	40014000 	.word	0x40014000

080083c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e03f      	b.n	8008482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7fb fe42 	bl	80040a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2224      	movs	r2, #36	; 0x24
 8008420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc2d 	bl	8008c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695a      	ldr	r2, [r3, #20]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d153      	bne.n	800854e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <HAL_UART_Transmit_DMA+0x26>
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e04c      	b.n	8008550 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d101      	bne.n	80084c4 <HAL_UART_Transmit_DMA+0x38>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e045      	b.n	8008550 <HAL_UART_Transmit_DMA+0xc4>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	88fa      	ldrh	r2, [r7, #6]
 80084d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	88fa      	ldrh	r2, [r7, #6]
 80084dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2221      	movs	r2, #33	; 0x21
 80084e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	4a19      	ldr	r2, [pc, #100]	; (8008558 <HAL_UART_Transmit_DMA+0xcc>)
 80084f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f8:	4a18      	ldr	r2, [pc, #96]	; (800855c <HAL_UART_Transmit_DMA+0xd0>)
 80084fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	4a17      	ldr	r2, [pc, #92]	; (8008560 <HAL_UART_Transmit_DMA+0xd4>)
 8008502:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008508:	2200      	movs	r2, #0
 800850a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800850c:	f107 0308 	add.w	r3, r7, #8
 8008510:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6819      	ldr	r1, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3304      	adds	r3, #4
 8008520:	461a      	mov	r2, r3
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	f7fc f9d0 	bl	80048c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008530:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695a      	ldr	r2, [r3, #20]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008548:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	e000      	b.n	8008550 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800854e:	2302      	movs	r3, #2
  }
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	080088a1 	.word	0x080088a1
 800855c:	080088f3 	.word	0x080088f3
 8008560:	08008993 	.word	0x08008993

08008564 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b20      	cmp	r3, #32
 800857c:	d166      	bne.n	800864c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_UART_Receive_DMA+0x26>
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e05f      	b.n	800864e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_UART_Receive_DMA+0x38>
 8008598:	2302      	movs	r3, #2
 800859a:	e058      	b.n	800864e <HAL_UART_Receive_DMA+0xea>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2222      	movs	r2, #34	; 0x22
 80085ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	4a25      	ldr	r2, [pc, #148]	; (8008658 <HAL_UART_Receive_DMA+0xf4>)
 80085c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ca:	4a24      	ldr	r2, [pc, #144]	; (800865c <HAL_UART_Receive_DMA+0xf8>)
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	4a23      	ldr	r2, [pc, #140]	; (8008660 <HAL_UART_Receive_DMA+0xfc>)
 80085d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	2200      	movs	r2, #0
 80085dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3304      	adds	r3, #4
 80085ee:	4619      	mov	r1, r3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	f7fc f967 	bl	80048c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	613b      	str	r3, [r7, #16]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	613b      	str	r3, [r7, #16]
 800860e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008626:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695a      	ldr	r2, [r3, #20]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0201 	orr.w	r2, r2, #1
 8008636:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008646:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	0800890f 	.word	0x0800890f
 800865c:	08008977 	.word	0x08008977
 8008660:	08008993 	.word	0x08008993

08008664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10d      	bne.n	80086b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <HAL_UART_IRQHandler+0x52>
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa6f 	bl	8008b92 <UART_Receive_IT>
      return;
 80086b4:	e0d1      	b.n	800885a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80b0 	beq.w	800881e <HAL_UART_IRQHandler+0x1ba>
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <HAL_UART_IRQHandler+0x70>
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80a5 	beq.w	800881e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <HAL_UART_IRQHandler+0x90>
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ec:	f043 0201 	orr.w	r2, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <HAL_UART_IRQHandler+0xb0>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870c:	f043 0202 	orr.w	r2, r3, #2
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <HAL_UART_IRQHandler+0xd0>
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872c:	f043 0204 	orr.w	r2, r3, #4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00f      	beq.n	800875e <HAL_UART_IRQHandler+0xfa>
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d104      	bne.n	8008752 <HAL_UART_IRQHandler+0xee>
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008756:	f043 0208 	orr.w	r2, r3, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d078      	beq.n	8008858 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <HAL_UART_IRQHandler+0x11c>
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa09 	bl	8008b92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	bf0c      	ite	eq
 800878e:	2301      	moveq	r3, #1
 8008790:	2300      	movne	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d102      	bne.n	80087a8 <HAL_UART_IRQHandler+0x144>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d031      	beq.n	800880c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f952 	bl	8008a52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d123      	bne.n	8008804 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695a      	ldr	r2, [r3, #20]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d013      	beq.n	80087fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d8:	4a21      	ldr	r2, [pc, #132]	; (8008860 <HAL_UART_IRQHandler+0x1fc>)
 80087da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fc f8c9 	bl	8004978 <HAL_DMA_Abort_IT>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087f6:	4610      	mov	r0, r2
 80087f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fa:	e00e      	b.n	800881a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f845 	bl	800888c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	e00a      	b.n	800881a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f841 	bl	800888c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880a:	e006      	b.n	800881a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f83d 	bl	800888c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008818:	e01e      	b.n	8008858 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881a:	bf00      	nop
    return;
 800881c:	e01c      	b.n	8008858 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <HAL_UART_IRQHandler+0x1d6>
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f93f 	bl	8008ab6 <UART_Transmit_IT>
    return;
 8008838:	e00f      	b.n	800885a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <HAL_UART_IRQHandler+0x1f6>
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f987 	bl	8008b62 <UART_EndTransmit_IT>
    return;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008858:	bf00      	nop
  }
}
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	08008a8f 	.word	0x08008a8f

08008864 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d113      	bne.n	80088e4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	695a      	ldr	r2, [r3, #20]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088e2:	e002      	b.n	80088ea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7fa fb01 	bl	8002eec <HAL_UART_TxCpltCallback>
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff ffaf 	bl	8008864 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008926:	2b00      	cmp	r3, #0
 8008928:	d11e      	bne.n	8008968 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800893e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695a      	ldr	r2, [r3, #20]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800895e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7fa fad1 	bl	8002f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff ff77 	bl	8008878 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ae:	2b80      	cmp	r3, #128	; 0x80
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b21      	cmp	r3, #33	; 0x21
 80089c4:	d108      	bne.n	80089d8 <UART_DMAError+0x46>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2200      	movs	r2, #0
 80089d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80089d2:	68b8      	ldr	r0, [r7, #8]
 80089d4:	f000 f827 	bl	8008a26 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	bf0c      	ite	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	2300      	movne	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b22      	cmp	r3, #34	; 0x22
 80089f8:	d108      	bne.n	8008a0c <UART_DMAError+0x7a>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a06:	68b8      	ldr	r0, [r7, #8]
 8008a08:	f000 f823 	bl	8008a52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a10:	f043 0210 	orr.w	r2, r3, #16
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f7ff ff37 	bl	800888c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008a3c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff feef 	bl	800888c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b21      	cmp	r3, #33	; 0x21
 8008ac8:	d144      	bne.n	8008b54 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad2:	d11a      	bne.n	8008b0a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ae8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	1c9a      	adds	r2, r3, #2
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	621a      	str	r2, [r3, #32]
 8008afc:	e00e      	b.n	8008b1c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]
 8008b08:	e008      	b.n	8008b1c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	1c59      	adds	r1, r3, #1
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6211      	str	r1, [r2, #32]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10f      	bne.n	8008b50 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
  }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fa f9b2 	bl	8002eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b22      	cmp	r3, #34	; 0x22
 8008ba4:	d171      	bne.n	8008c8a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bae:	d123      	bne.n	8008bf8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10e      	bne.n	8008bdc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	1c9a      	adds	r2, r3, #2
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8008bda:	e029      	b.n	8008c30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8008bf6:	e01b      	b.n	8008c30 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6858      	ldr	r0, [r3, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	1c59      	adds	r1, r3, #1
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6291      	str	r1, [r2, #40]	; 0x28
 8008c10:	b2c2      	uxtb	r2, r0
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	e00c      	b.n	8008c30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	1c58      	adds	r0, r3, #1
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	6288      	str	r0, [r1, #40]	; 0x28
 8008c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d120      	bne.n	8008c86 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0220 	bic.w	r2, r2, #32
 8008c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695a      	ldr	r2, [r3, #20]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0201 	bic.w	r2, r2, #1
 8008c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fa f947 	bl	8002f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	e002      	b.n	8008c8c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e000      	b.n	8008c8c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008c8a:	2302      	movs	r3, #2
  }
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	b085      	sub	sp, #20
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008cd6:	f023 030c 	bic.w	r3, r3, #12
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d02:	f040 818b 	bne.w	800901c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4ac1      	ldr	r2, [pc, #772]	; (8009010 <UART_SetConfig+0x37c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d005      	beq.n	8008d1c <UART_SetConfig+0x88>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4abf      	ldr	r2, [pc, #764]	; (8009014 <UART_SetConfig+0x380>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	f040 80bd 	bne.w	8008e96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d1c:	f7fe ff56 	bl	8007bcc <HAL_RCC_GetPCLK2Freq>
 8008d20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	461d      	mov	r5, r3
 8008d26:	f04f 0600 	mov.w	r6, #0
 8008d2a:	46a8      	mov	r8, r5
 8008d2c:	46b1      	mov	r9, r6
 8008d2e:	eb18 0308 	adds.w	r3, r8, r8
 8008d32:	eb49 0409 	adc.w	r4, r9, r9
 8008d36:	4698      	mov	r8, r3
 8008d38:	46a1      	mov	r9, r4
 8008d3a:	eb18 0805 	adds.w	r8, r8, r5
 8008d3e:	eb49 0906 	adc.w	r9, r9, r6
 8008d42:	f04f 0100 	mov.w	r1, #0
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d56:	4688      	mov	r8, r1
 8008d58:	4691      	mov	r9, r2
 8008d5a:	eb18 0005 	adds.w	r0, r8, r5
 8008d5e:	eb49 0106 	adc.w	r1, r9, r6
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	461d      	mov	r5, r3
 8008d68:	f04f 0600 	mov.w	r6, #0
 8008d6c:	196b      	adds	r3, r5, r5
 8008d6e:	eb46 0406 	adc.w	r4, r6, r6
 8008d72:	461a      	mov	r2, r3
 8008d74:	4623      	mov	r3, r4
 8008d76:	f7f7 fe03 	bl	8000980 <__aeabi_uldivmod>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4ba5      	ldr	r3, [pc, #660]	; (8009018 <UART_SetConfig+0x384>)
 8008d82:	fba3 2302 	umull	r2, r3, r3, r2
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	461d      	mov	r5, r3
 8008d90:	f04f 0600 	mov.w	r6, #0
 8008d94:	46a9      	mov	r9, r5
 8008d96:	46b2      	mov	sl, r6
 8008d98:	eb19 0309 	adds.w	r3, r9, r9
 8008d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8008da0:	4699      	mov	r9, r3
 8008da2:	46a2      	mov	sl, r4
 8008da4:	eb19 0905 	adds.w	r9, r9, r5
 8008da8:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dac:	f04f 0100 	mov.w	r1, #0
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	4692      	mov	sl, r2
 8008dc4:	eb19 0005 	adds.w	r0, r9, r5
 8008dc8:	eb4a 0106 	adc.w	r1, sl, r6
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	461d      	mov	r5, r3
 8008dd2:	f04f 0600 	mov.w	r6, #0
 8008dd6:	196b      	adds	r3, r5, r5
 8008dd8:	eb46 0406 	adc.w	r4, r6, r6
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4623      	mov	r3, r4
 8008de0:	f7f7 fdce 	bl	8000980 <__aeabi_uldivmod>
 8008de4:	4603      	mov	r3, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	461a      	mov	r2, r3
 8008dea:	4b8b      	ldr	r3, [pc, #556]	; (8009018 <UART_SetConfig+0x384>)
 8008dec:	fba3 1302 	umull	r1, r3, r3, r2
 8008df0:	095b      	lsrs	r3, r3, #5
 8008df2:	2164      	movs	r1, #100	; 0x64
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	3332      	adds	r3, #50	; 0x32
 8008dfe:	4a86      	ldr	r2, [pc, #536]	; (8009018 <UART_SetConfig+0x384>)
 8008e00:	fba2 2303 	umull	r2, r3, r2, r3
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e0c:	4498      	add	r8, r3
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	461d      	mov	r5, r3
 8008e12:	f04f 0600 	mov.w	r6, #0
 8008e16:	46a9      	mov	r9, r5
 8008e18:	46b2      	mov	sl, r6
 8008e1a:	eb19 0309 	adds.w	r3, r9, r9
 8008e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8008e22:	4699      	mov	r9, r3
 8008e24:	46a2      	mov	sl, r4
 8008e26:	eb19 0905 	adds.w	r9, r9, r5
 8008e2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e2e:	f04f 0100 	mov.w	r1, #0
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e42:	4689      	mov	r9, r1
 8008e44:	4692      	mov	sl, r2
 8008e46:	eb19 0005 	adds.w	r0, r9, r5
 8008e4a:	eb4a 0106 	adc.w	r1, sl, r6
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	461d      	mov	r5, r3
 8008e54:	f04f 0600 	mov.w	r6, #0
 8008e58:	196b      	adds	r3, r5, r5
 8008e5a:	eb46 0406 	adc.w	r4, r6, r6
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4623      	mov	r3, r4
 8008e62:	f7f7 fd8d 	bl	8000980 <__aeabi_uldivmod>
 8008e66:	4603      	mov	r3, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4b6a      	ldr	r3, [pc, #424]	; (8009018 <UART_SetConfig+0x384>)
 8008e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	2164      	movs	r1, #100	; 0x64
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	3332      	adds	r3, #50	; 0x32
 8008e80:	4a65      	ldr	r2, [pc, #404]	; (8009018 <UART_SetConfig+0x384>)
 8008e82:	fba2 2303 	umull	r2, r3, r2, r3
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	f003 0207 	and.w	r2, r3, #7
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4442      	add	r2, r8
 8008e92:	609a      	str	r2, [r3, #8]
 8008e94:	e26f      	b.n	8009376 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e96:	f7fe fe85 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8008e9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	f04f 0600 	mov.w	r6, #0
 8008ea4:	46a8      	mov	r8, r5
 8008ea6:	46b1      	mov	r9, r6
 8008ea8:	eb18 0308 	adds.w	r3, r8, r8
 8008eac:	eb49 0409 	adc.w	r4, r9, r9
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	46a1      	mov	r9, r4
 8008eb4:	eb18 0805 	adds.w	r8, r8, r5
 8008eb8:	eb49 0906 	adc.w	r9, r9, r6
 8008ebc:	f04f 0100 	mov.w	r1, #0
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ec8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ecc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ed0:	4688      	mov	r8, r1
 8008ed2:	4691      	mov	r9, r2
 8008ed4:	eb18 0005 	adds.w	r0, r8, r5
 8008ed8:	eb49 0106 	adc.w	r1, r9, r6
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	461d      	mov	r5, r3
 8008ee2:	f04f 0600 	mov.w	r6, #0
 8008ee6:	196b      	adds	r3, r5, r5
 8008ee8:	eb46 0406 	adc.w	r4, r6, r6
 8008eec:	461a      	mov	r2, r3
 8008eee:	4623      	mov	r3, r4
 8008ef0:	f7f7 fd46 	bl	8000980 <__aeabi_uldivmod>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4b47      	ldr	r3, [pc, #284]	; (8009018 <UART_SetConfig+0x384>)
 8008efc:	fba3 2302 	umull	r2, r3, r3, r2
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	461d      	mov	r5, r3
 8008f0a:	f04f 0600 	mov.w	r6, #0
 8008f0e:	46a9      	mov	r9, r5
 8008f10:	46b2      	mov	sl, r6
 8008f12:	eb19 0309 	adds.w	r3, r9, r9
 8008f16:	eb4a 040a 	adc.w	r4, sl, sl
 8008f1a:	4699      	mov	r9, r3
 8008f1c:	46a2      	mov	sl, r4
 8008f1e:	eb19 0905 	adds.w	r9, r9, r5
 8008f22:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f26:	f04f 0100 	mov.w	r1, #0
 8008f2a:	f04f 0200 	mov.w	r2, #0
 8008f2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f3a:	4689      	mov	r9, r1
 8008f3c:	4692      	mov	sl, r2
 8008f3e:	eb19 0005 	adds.w	r0, r9, r5
 8008f42:	eb4a 0106 	adc.w	r1, sl, r6
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	461d      	mov	r5, r3
 8008f4c:	f04f 0600 	mov.w	r6, #0
 8008f50:	196b      	adds	r3, r5, r5
 8008f52:	eb46 0406 	adc.w	r4, r6, r6
 8008f56:	461a      	mov	r2, r3
 8008f58:	4623      	mov	r3, r4
 8008f5a:	f7f7 fd11 	bl	8000980 <__aeabi_uldivmod>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	460c      	mov	r4, r1
 8008f62:	461a      	mov	r2, r3
 8008f64:	4b2c      	ldr	r3, [pc, #176]	; (8009018 <UART_SetConfig+0x384>)
 8008f66:	fba3 1302 	umull	r1, r3, r3, r2
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	2164      	movs	r1, #100	; 0x64
 8008f6e:	fb01 f303 	mul.w	r3, r1, r3
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	3332      	adds	r3, #50	; 0x32
 8008f78:	4a27      	ldr	r2, [pc, #156]	; (8009018 <UART_SetConfig+0x384>)
 8008f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f86:	4498      	add	r8, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	461d      	mov	r5, r3
 8008f8c:	f04f 0600 	mov.w	r6, #0
 8008f90:	46a9      	mov	r9, r5
 8008f92:	46b2      	mov	sl, r6
 8008f94:	eb19 0309 	adds.w	r3, r9, r9
 8008f98:	eb4a 040a 	adc.w	r4, sl, sl
 8008f9c:	4699      	mov	r9, r3
 8008f9e:	46a2      	mov	sl, r4
 8008fa0:	eb19 0905 	adds.w	r9, r9, r5
 8008fa4:	eb4a 0a06 	adc.w	sl, sl, r6
 8008fa8:	f04f 0100 	mov.w	r1, #0
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fbc:	4689      	mov	r9, r1
 8008fbe:	4692      	mov	sl, r2
 8008fc0:	eb19 0005 	adds.w	r0, r9, r5
 8008fc4:	eb4a 0106 	adc.w	r1, sl, r6
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	461d      	mov	r5, r3
 8008fce:	f04f 0600 	mov.w	r6, #0
 8008fd2:	196b      	adds	r3, r5, r5
 8008fd4:	eb46 0406 	adc.w	r4, r6, r6
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4623      	mov	r3, r4
 8008fdc:	f7f7 fcd0 	bl	8000980 <__aeabi_uldivmod>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <UART_SetConfig+0x384>)
 8008fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fec:	095b      	lsrs	r3, r3, #5
 8008fee:	2164      	movs	r1, #100	; 0x64
 8008ff0:	fb01 f303 	mul.w	r3, r1, r3
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	3332      	adds	r3, #50	; 0x32
 8008ffa:	4a07      	ldr	r2, [pc, #28]	; (8009018 <UART_SetConfig+0x384>)
 8008ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8009000:	095b      	lsrs	r3, r3, #5
 8009002:	f003 0207 	and.w	r2, r3, #7
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4442      	add	r2, r8
 800900c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800900e:	e1b2      	b.n	8009376 <UART_SetConfig+0x6e2>
 8009010:	40011000 	.word	0x40011000
 8009014:	40011400 	.word	0x40011400
 8009018:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4ad7      	ldr	r2, [pc, #860]	; (8009380 <UART_SetConfig+0x6ec>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d005      	beq.n	8009032 <UART_SetConfig+0x39e>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4ad6      	ldr	r2, [pc, #856]	; (8009384 <UART_SetConfig+0x6f0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	f040 80d1 	bne.w	80091d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009032:	f7fe fdcb 	bl	8007bcc <HAL_RCC_GetPCLK2Freq>
 8009036:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	469a      	mov	sl, r3
 800903c:	f04f 0b00 	mov.w	fp, #0
 8009040:	46d0      	mov	r8, sl
 8009042:	46d9      	mov	r9, fp
 8009044:	eb18 0308 	adds.w	r3, r8, r8
 8009048:	eb49 0409 	adc.w	r4, r9, r9
 800904c:	4698      	mov	r8, r3
 800904e:	46a1      	mov	r9, r4
 8009050:	eb18 080a 	adds.w	r8, r8, sl
 8009054:	eb49 090b 	adc.w	r9, r9, fp
 8009058:	f04f 0100 	mov.w	r1, #0
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009064:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009068:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800906c:	4688      	mov	r8, r1
 800906e:	4691      	mov	r9, r2
 8009070:	eb1a 0508 	adds.w	r5, sl, r8
 8009074:	eb4b 0609 	adc.w	r6, fp, r9
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4619      	mov	r1, r3
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	f04f 0400 	mov.w	r4, #0
 800908a:	0094      	lsls	r4, r2, #2
 800908c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009090:	008b      	lsls	r3, r1, #2
 8009092:	461a      	mov	r2, r3
 8009094:	4623      	mov	r3, r4
 8009096:	4628      	mov	r0, r5
 8009098:	4631      	mov	r1, r6
 800909a:	f7f7 fc71 	bl	8000980 <__aeabi_uldivmod>
 800909e:	4603      	mov	r3, r0
 80090a0:	460c      	mov	r4, r1
 80090a2:	461a      	mov	r2, r3
 80090a4:	4bb8      	ldr	r3, [pc, #736]	; (8009388 <UART_SetConfig+0x6f4>)
 80090a6:	fba3 2302 	umull	r2, r3, r3, r2
 80090aa:	095b      	lsrs	r3, r3, #5
 80090ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	469b      	mov	fp, r3
 80090b4:	f04f 0c00 	mov.w	ip, #0
 80090b8:	46d9      	mov	r9, fp
 80090ba:	46e2      	mov	sl, ip
 80090bc:	eb19 0309 	adds.w	r3, r9, r9
 80090c0:	eb4a 040a 	adc.w	r4, sl, sl
 80090c4:	4699      	mov	r9, r3
 80090c6:	46a2      	mov	sl, r4
 80090c8:	eb19 090b 	adds.w	r9, r9, fp
 80090cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80090d0:	f04f 0100 	mov.w	r1, #0
 80090d4:	f04f 0200 	mov.w	r2, #0
 80090d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090e4:	4689      	mov	r9, r1
 80090e6:	4692      	mov	sl, r2
 80090e8:	eb1b 0509 	adds.w	r5, fp, r9
 80090ec:	eb4c 060a 	adc.w	r6, ip, sl
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4619      	mov	r1, r3
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	f04f 0400 	mov.w	r4, #0
 8009102:	0094      	lsls	r4, r2, #2
 8009104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009108:	008b      	lsls	r3, r1, #2
 800910a:	461a      	mov	r2, r3
 800910c:	4623      	mov	r3, r4
 800910e:	4628      	mov	r0, r5
 8009110:	4631      	mov	r1, r6
 8009112:	f7f7 fc35 	bl	8000980 <__aeabi_uldivmod>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	461a      	mov	r2, r3
 800911c:	4b9a      	ldr	r3, [pc, #616]	; (8009388 <UART_SetConfig+0x6f4>)
 800911e:	fba3 1302 	umull	r1, r3, r3, r2
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	2164      	movs	r1, #100	; 0x64
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	3332      	adds	r3, #50	; 0x32
 8009130:	4a95      	ldr	r2, [pc, #596]	; (8009388 <UART_SetConfig+0x6f4>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800913c:	4498      	add	r8, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	469b      	mov	fp, r3
 8009142:	f04f 0c00 	mov.w	ip, #0
 8009146:	46d9      	mov	r9, fp
 8009148:	46e2      	mov	sl, ip
 800914a:	eb19 0309 	adds.w	r3, r9, r9
 800914e:	eb4a 040a 	adc.w	r4, sl, sl
 8009152:	4699      	mov	r9, r3
 8009154:	46a2      	mov	sl, r4
 8009156:	eb19 090b 	adds.w	r9, r9, fp
 800915a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800915e:	f04f 0100 	mov.w	r1, #0
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800916a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800916e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009172:	4689      	mov	r9, r1
 8009174:	4692      	mov	sl, r2
 8009176:	eb1b 0509 	adds.w	r5, fp, r9
 800917a:	eb4c 060a 	adc.w	r6, ip, sl
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	4619      	mov	r1, r3
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	f04f 0400 	mov.w	r4, #0
 8009190:	0094      	lsls	r4, r2, #2
 8009192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009196:	008b      	lsls	r3, r1, #2
 8009198:	461a      	mov	r2, r3
 800919a:	4623      	mov	r3, r4
 800919c:	4628      	mov	r0, r5
 800919e:	4631      	mov	r1, r6
 80091a0:	f7f7 fbee 	bl	8000980 <__aeabi_uldivmod>
 80091a4:	4603      	mov	r3, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	461a      	mov	r2, r3
 80091aa:	4b77      	ldr	r3, [pc, #476]	; (8009388 <UART_SetConfig+0x6f4>)
 80091ac:	fba3 1302 	umull	r1, r3, r3, r2
 80091b0:	095b      	lsrs	r3, r3, #5
 80091b2:	2164      	movs	r1, #100	; 0x64
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	3332      	adds	r3, #50	; 0x32
 80091be:	4a72      	ldr	r2, [pc, #456]	; (8009388 <UART_SetConfig+0x6f4>)
 80091c0:	fba2 2303 	umull	r2, r3, r2, r3
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	f003 020f 	and.w	r2, r3, #15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4442      	add	r2, r8
 80091d0:	609a      	str	r2, [r3, #8]
 80091d2:	e0d0      	b.n	8009376 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80091d4:	f7fe fce6 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 80091d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	469a      	mov	sl, r3
 80091de:	f04f 0b00 	mov.w	fp, #0
 80091e2:	46d0      	mov	r8, sl
 80091e4:	46d9      	mov	r9, fp
 80091e6:	eb18 0308 	adds.w	r3, r8, r8
 80091ea:	eb49 0409 	adc.w	r4, r9, r9
 80091ee:	4698      	mov	r8, r3
 80091f0:	46a1      	mov	r9, r4
 80091f2:	eb18 080a 	adds.w	r8, r8, sl
 80091f6:	eb49 090b 	adc.w	r9, r9, fp
 80091fa:	f04f 0100 	mov.w	r1, #0
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009206:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800920a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800920e:	4688      	mov	r8, r1
 8009210:	4691      	mov	r9, r2
 8009212:	eb1a 0508 	adds.w	r5, sl, r8
 8009216:	eb4b 0609 	adc.w	r6, fp, r9
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	4619      	mov	r1, r3
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	f04f 0400 	mov.w	r4, #0
 800922c:	0094      	lsls	r4, r2, #2
 800922e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009232:	008b      	lsls	r3, r1, #2
 8009234:	461a      	mov	r2, r3
 8009236:	4623      	mov	r3, r4
 8009238:	4628      	mov	r0, r5
 800923a:	4631      	mov	r1, r6
 800923c:	f7f7 fba0 	bl	8000980 <__aeabi_uldivmod>
 8009240:	4603      	mov	r3, r0
 8009242:	460c      	mov	r4, r1
 8009244:	461a      	mov	r2, r3
 8009246:	4b50      	ldr	r3, [pc, #320]	; (8009388 <UART_SetConfig+0x6f4>)
 8009248:	fba3 2302 	umull	r2, r3, r3, r2
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	469b      	mov	fp, r3
 8009256:	f04f 0c00 	mov.w	ip, #0
 800925a:	46d9      	mov	r9, fp
 800925c:	46e2      	mov	sl, ip
 800925e:	eb19 0309 	adds.w	r3, r9, r9
 8009262:	eb4a 040a 	adc.w	r4, sl, sl
 8009266:	4699      	mov	r9, r3
 8009268:	46a2      	mov	sl, r4
 800926a:	eb19 090b 	adds.w	r9, r9, fp
 800926e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800927e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009286:	4689      	mov	r9, r1
 8009288:	4692      	mov	sl, r2
 800928a:	eb1b 0509 	adds.w	r5, fp, r9
 800928e:	eb4c 060a 	adc.w	r6, ip, sl
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	4619      	mov	r1, r3
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	f04f 0400 	mov.w	r4, #0
 80092a4:	0094      	lsls	r4, r2, #2
 80092a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092aa:	008b      	lsls	r3, r1, #2
 80092ac:	461a      	mov	r2, r3
 80092ae:	4623      	mov	r3, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	4631      	mov	r1, r6
 80092b4:	f7f7 fb64 	bl	8000980 <__aeabi_uldivmod>
 80092b8:	4603      	mov	r3, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	461a      	mov	r2, r3
 80092be:	4b32      	ldr	r3, [pc, #200]	; (8009388 <UART_SetConfig+0x6f4>)
 80092c0:	fba3 1302 	umull	r1, r3, r3, r2
 80092c4:	095b      	lsrs	r3, r3, #5
 80092c6:	2164      	movs	r1, #100	; 0x64
 80092c8:	fb01 f303 	mul.w	r3, r1, r3
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	3332      	adds	r3, #50	; 0x32
 80092d2:	4a2d      	ldr	r2, [pc, #180]	; (8009388 <UART_SetConfig+0x6f4>)
 80092d4:	fba2 2303 	umull	r2, r3, r2, r3
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092de:	4498      	add	r8, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	469b      	mov	fp, r3
 80092e4:	f04f 0c00 	mov.w	ip, #0
 80092e8:	46d9      	mov	r9, fp
 80092ea:	46e2      	mov	sl, ip
 80092ec:	eb19 0309 	adds.w	r3, r9, r9
 80092f0:	eb4a 040a 	adc.w	r4, sl, sl
 80092f4:	4699      	mov	r9, r3
 80092f6:	46a2      	mov	sl, r4
 80092f8:	eb19 090b 	adds.w	r9, r9, fp
 80092fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800930c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009314:	4689      	mov	r9, r1
 8009316:	4692      	mov	sl, r2
 8009318:	eb1b 0509 	adds.w	r5, fp, r9
 800931c:	eb4c 060a 	adc.w	r6, ip, sl
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4619      	mov	r1, r3
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	f04f 0400 	mov.w	r4, #0
 8009332:	0094      	lsls	r4, r2, #2
 8009334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009338:	008b      	lsls	r3, r1, #2
 800933a:	461a      	mov	r2, r3
 800933c:	4623      	mov	r3, r4
 800933e:	4628      	mov	r0, r5
 8009340:	4631      	mov	r1, r6
 8009342:	f7f7 fb1d 	bl	8000980 <__aeabi_uldivmod>
 8009346:	4603      	mov	r3, r0
 8009348:	460c      	mov	r4, r1
 800934a:	461a      	mov	r2, r3
 800934c:	4b0e      	ldr	r3, [pc, #56]	; (8009388 <UART_SetConfig+0x6f4>)
 800934e:	fba3 1302 	umull	r1, r3, r3, r2
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	2164      	movs	r1, #100	; 0x64
 8009356:	fb01 f303 	mul.w	r3, r1, r3
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	011b      	lsls	r3, r3, #4
 800935e:	3332      	adds	r3, #50	; 0x32
 8009360:	4a09      	ldr	r2, [pc, #36]	; (8009388 <UART_SetConfig+0x6f4>)
 8009362:	fba2 2303 	umull	r2, r3, r2, r3
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4442      	add	r2, r8
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	e7ff      	b.n	8009376 <UART_SetConfig+0x6e2>
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009380:	40011000 	.word	0x40011000
 8009384:	40011400 	.word	0x40011400
 8009388:	51eb851f 	.word	0x51eb851f

0800938c <__cxa_pure_virtual>:
 800938c:	b508      	push	{r3, lr}
 800938e:	f000 f80d 	bl	80093ac <_ZSt9terminatev>

08009392 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009392:	b508      	push	{r3, lr}
 8009394:	4780      	blx	r0
 8009396:	f000 f80e 	bl	80093b6 <abort>
	...

0800939c <_ZSt13get_terminatev>:
 800939c:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <_ZSt13get_terminatev+0xc>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	f3bf 8f5b 	dmb	ish
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	2000001c 	.word	0x2000001c

080093ac <_ZSt9terminatev>:
 80093ac:	b508      	push	{r3, lr}
 80093ae:	f7ff fff5 	bl	800939c <_ZSt13get_terminatev>
 80093b2:	f7ff ffee 	bl	8009392 <_ZN10__cxxabiv111__terminateEPFvvE>

080093b6 <abort>:
 80093b6:	b508      	push	{r3, lr}
 80093b8:	2006      	movs	r0, #6
 80093ba:	f000 f871 	bl	80094a0 <raise>
 80093be:	2001      	movs	r0, #1
 80093c0:	f7fa ffb8 	bl	8004334 <_exit>

080093c4 <__errno>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <__errno+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20000020 	.word	0x20000020

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4e0d      	ldr	r6, [pc, #52]	; (8009408 <__libc_init_array+0x38>)
 80093d4:	4c0d      	ldr	r4, [pc, #52]	; (800940c <__libc_init_array+0x3c>)
 80093d6:	1ba4      	subs	r4, r4, r6
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	2500      	movs	r5, #0
 80093dc:	42a5      	cmp	r5, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	4e0b      	ldr	r6, [pc, #44]	; (8009410 <__libc_init_array+0x40>)
 80093e2:	4c0c      	ldr	r4, [pc, #48]	; (8009414 <__libc_init_array+0x44>)
 80093e4:	f000 f960 	bl	80096a8 <_init>
 80093e8:	1ba4      	subs	r4, r4, r6
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	2500      	movs	r5, #0
 80093ee:	42a5      	cmp	r5, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093f8:	4798      	blx	r3
 80093fa:	3501      	adds	r5, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009402:	4798      	blx	r3
 8009404:	3501      	adds	r5, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	080099e0 	.word	0x080099e0
 800940c:	080099e0 	.word	0x080099e0
 8009410:	080099e0 	.word	0x080099e0
 8009414:	080099e8 	.word	0x080099e8

08009418 <memcpy>:
 8009418:	b510      	push	{r4, lr}
 800941a:	1e43      	subs	r3, r0, #1
 800941c:	440a      	add	r2, r1
 800941e:	4291      	cmp	r1, r2
 8009420:	d100      	bne.n	8009424 <memcpy+0xc>
 8009422:	bd10      	pop	{r4, pc}
 8009424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800942c:	e7f7      	b.n	800941e <memcpy+0x6>

0800942e <memset>:
 800942e:	4402      	add	r2, r0
 8009430:	4603      	mov	r3, r0
 8009432:	4293      	cmp	r3, r2
 8009434:	d100      	bne.n	8009438 <memset+0xa>
 8009436:	4770      	bx	lr
 8009438:	f803 1b01 	strb.w	r1, [r3], #1
 800943c:	e7f9      	b.n	8009432 <memset+0x4>
	...

08009440 <realloc>:
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <realloc+0xc>)
 8009442:	460a      	mov	r2, r1
 8009444:	4601      	mov	r1, r0
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	f000 b8a0 	b.w	800958c <_realloc_r>
 800944c:	20000020 	.word	0x20000020

08009450 <_raise_r>:
 8009450:	291f      	cmp	r1, #31
 8009452:	b538      	push	{r3, r4, r5, lr}
 8009454:	4604      	mov	r4, r0
 8009456:	460d      	mov	r5, r1
 8009458:	d904      	bls.n	8009464 <_raise_r+0x14>
 800945a:	2316      	movs	r3, #22
 800945c:	6003      	str	r3, [r0, #0]
 800945e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009466:	b112      	cbz	r2, 800946e <_raise_r+0x1e>
 8009468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800946c:	b94b      	cbnz	r3, 8009482 <_raise_r+0x32>
 800946e:	4620      	mov	r0, r4
 8009470:	f000 f830 	bl	80094d4 <_getpid_r>
 8009474:	462a      	mov	r2, r5
 8009476:	4601      	mov	r1, r0
 8009478:	4620      	mov	r0, r4
 800947a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800947e:	f000 b817 	b.w	80094b0 <_kill_r>
 8009482:	2b01      	cmp	r3, #1
 8009484:	d00a      	beq.n	800949c <_raise_r+0x4c>
 8009486:	1c59      	adds	r1, r3, #1
 8009488:	d103      	bne.n	8009492 <_raise_r+0x42>
 800948a:	2316      	movs	r3, #22
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	2001      	movs	r0, #1
 8009490:	e7e7      	b.n	8009462 <_raise_r+0x12>
 8009492:	2400      	movs	r4, #0
 8009494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009498:	4628      	mov	r0, r5
 800949a:	4798      	blx	r3
 800949c:	2000      	movs	r0, #0
 800949e:	e7e0      	b.n	8009462 <_raise_r+0x12>

080094a0 <raise>:
 80094a0:	4b02      	ldr	r3, [pc, #8]	; (80094ac <raise+0xc>)
 80094a2:	4601      	mov	r1, r0
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	f7ff bfd3 	b.w	8009450 <_raise_r>
 80094aa:	bf00      	nop
 80094ac:	20000020 	.word	0x20000020

080094b0 <_kill_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4c07      	ldr	r4, [pc, #28]	; (80094d0 <_kill_r+0x20>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4605      	mov	r5, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	4611      	mov	r1, r2
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	f7fa ff29 	bl	8004314 <_kill>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	d102      	bne.n	80094cc <_kill_r+0x1c>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	b103      	cbz	r3, 80094cc <_kill_r+0x1c>
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
 80094ce:	bf00      	nop
 80094d0:	20000cc8 	.word	0x20000cc8

080094d4 <_getpid_r>:
 80094d4:	f7fa bf16 	b.w	8004304 <_getpid>

080094d8 <_malloc_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	1ccd      	adds	r5, r1, #3
 80094dc:	f025 0503 	bic.w	r5, r5, #3
 80094e0:	3508      	adds	r5, #8
 80094e2:	2d0c      	cmp	r5, #12
 80094e4:	bf38      	it	cc
 80094e6:	250c      	movcc	r5, #12
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	4606      	mov	r6, r0
 80094ec:	db01      	blt.n	80094f2 <_malloc_r+0x1a>
 80094ee:	42a9      	cmp	r1, r5
 80094f0:	d903      	bls.n	80094fa <_malloc_r+0x22>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	2000      	movs	r0, #0
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	f000 f87d 	bl	80095f8 <__malloc_lock>
 80094fe:	4a21      	ldr	r2, [pc, #132]	; (8009584 <_malloc_r+0xac>)
 8009500:	6814      	ldr	r4, [r2, #0]
 8009502:	4621      	mov	r1, r4
 8009504:	b991      	cbnz	r1, 800952c <_malloc_r+0x54>
 8009506:	4c20      	ldr	r4, [pc, #128]	; (8009588 <_malloc_r+0xb0>)
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	b91b      	cbnz	r3, 8009514 <_malloc_r+0x3c>
 800950c:	4630      	mov	r0, r6
 800950e:	f000 f863 	bl	80095d8 <_sbrk_r>
 8009512:	6020      	str	r0, [r4, #0]
 8009514:	4629      	mov	r1, r5
 8009516:	4630      	mov	r0, r6
 8009518:	f000 f85e 	bl	80095d8 <_sbrk_r>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d124      	bne.n	800956a <_malloc_r+0x92>
 8009520:	230c      	movs	r3, #12
 8009522:	6033      	str	r3, [r6, #0]
 8009524:	4630      	mov	r0, r6
 8009526:	f000 f868 	bl	80095fa <__malloc_unlock>
 800952a:	e7e4      	b.n	80094f6 <_malloc_r+0x1e>
 800952c:	680b      	ldr	r3, [r1, #0]
 800952e:	1b5b      	subs	r3, r3, r5
 8009530:	d418      	bmi.n	8009564 <_malloc_r+0x8c>
 8009532:	2b0b      	cmp	r3, #11
 8009534:	d90f      	bls.n	8009556 <_malloc_r+0x7e>
 8009536:	600b      	str	r3, [r1, #0]
 8009538:	50cd      	str	r5, [r1, r3]
 800953a:	18cc      	adds	r4, r1, r3
 800953c:	4630      	mov	r0, r6
 800953e:	f000 f85c 	bl	80095fa <__malloc_unlock>
 8009542:	f104 000b 	add.w	r0, r4, #11
 8009546:	1d23      	adds	r3, r4, #4
 8009548:	f020 0007 	bic.w	r0, r0, #7
 800954c:	1ac3      	subs	r3, r0, r3
 800954e:	d0d3      	beq.n	80094f8 <_malloc_r+0x20>
 8009550:	425a      	negs	r2, r3
 8009552:	50e2      	str	r2, [r4, r3]
 8009554:	e7d0      	b.n	80094f8 <_malloc_r+0x20>
 8009556:	428c      	cmp	r4, r1
 8009558:	684b      	ldr	r3, [r1, #4]
 800955a:	bf16      	itet	ne
 800955c:	6063      	strne	r3, [r4, #4]
 800955e:	6013      	streq	r3, [r2, #0]
 8009560:	460c      	movne	r4, r1
 8009562:	e7eb      	b.n	800953c <_malloc_r+0x64>
 8009564:	460c      	mov	r4, r1
 8009566:	6849      	ldr	r1, [r1, #4]
 8009568:	e7cc      	b.n	8009504 <_malloc_r+0x2c>
 800956a:	1cc4      	adds	r4, r0, #3
 800956c:	f024 0403 	bic.w	r4, r4, #3
 8009570:	42a0      	cmp	r0, r4
 8009572:	d005      	beq.n	8009580 <_malloc_r+0xa8>
 8009574:	1a21      	subs	r1, r4, r0
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f82e 	bl	80095d8 <_sbrk_r>
 800957c:	3001      	adds	r0, #1
 800957e:	d0cf      	beq.n	8009520 <_malloc_r+0x48>
 8009580:	6025      	str	r5, [r4, #0]
 8009582:	e7db      	b.n	800953c <_malloc_r+0x64>
 8009584:	20000a68 	.word	0x20000a68
 8009588:	20000a6c 	.word	0x20000a6c

0800958c <_realloc_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	4607      	mov	r7, r0
 8009590:	4614      	mov	r4, r2
 8009592:	460e      	mov	r6, r1
 8009594:	b921      	cbnz	r1, 80095a0 <_realloc_r+0x14>
 8009596:	4611      	mov	r1, r2
 8009598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800959c:	f7ff bf9c 	b.w	80094d8 <_malloc_r>
 80095a0:	b922      	cbnz	r2, 80095ac <_realloc_r+0x20>
 80095a2:	f000 f82b 	bl	80095fc <_free_r>
 80095a6:	4625      	mov	r5, r4
 80095a8:	4628      	mov	r0, r5
 80095aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ac:	f000 f874 	bl	8009698 <_malloc_usable_size_r>
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d20f      	bcs.n	80095d4 <_realloc_r+0x48>
 80095b4:	4621      	mov	r1, r4
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ff8e 	bl	80094d8 <_malloc_r>
 80095bc:	4605      	mov	r5, r0
 80095be:	2800      	cmp	r0, #0
 80095c0:	d0f2      	beq.n	80095a8 <_realloc_r+0x1c>
 80095c2:	4631      	mov	r1, r6
 80095c4:	4622      	mov	r2, r4
 80095c6:	f7ff ff27 	bl	8009418 <memcpy>
 80095ca:	4631      	mov	r1, r6
 80095cc:	4638      	mov	r0, r7
 80095ce:	f000 f815 	bl	80095fc <_free_r>
 80095d2:	e7e9      	b.n	80095a8 <_realloc_r+0x1c>
 80095d4:	4635      	mov	r5, r6
 80095d6:	e7e7      	b.n	80095a8 <_realloc_r+0x1c>

080095d8 <_sbrk_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4c06      	ldr	r4, [pc, #24]	; (80095f4 <_sbrk_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4605      	mov	r5, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	f7fa feb0 	bl	8004348 <_sbrk>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_sbrk_r+0x1a>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_sbrk_r+0x1a>
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20000cc8 	.word	0x20000cc8

080095f8 <__malloc_lock>:
 80095f8:	4770      	bx	lr

080095fa <__malloc_unlock>:
 80095fa:	4770      	bx	lr

080095fc <_free_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4605      	mov	r5, r0
 8009600:	2900      	cmp	r1, #0
 8009602:	d045      	beq.n	8009690 <_free_r+0x94>
 8009604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009608:	1f0c      	subs	r4, r1, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	bfb8      	it	lt
 800960e:	18e4      	addlt	r4, r4, r3
 8009610:	f7ff fff2 	bl	80095f8 <__malloc_lock>
 8009614:	4a1f      	ldr	r2, [pc, #124]	; (8009694 <_free_r+0x98>)
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	4610      	mov	r0, r2
 800961a:	b933      	cbnz	r3, 800962a <_free_r+0x2e>
 800961c:	6063      	str	r3, [r4, #4]
 800961e:	6014      	str	r4, [r2, #0]
 8009620:	4628      	mov	r0, r5
 8009622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009626:	f7ff bfe8 	b.w	80095fa <__malloc_unlock>
 800962a:	42a3      	cmp	r3, r4
 800962c:	d90c      	bls.n	8009648 <_free_r+0x4c>
 800962e:	6821      	ldr	r1, [r4, #0]
 8009630:	1862      	adds	r2, r4, r1
 8009632:	4293      	cmp	r3, r2
 8009634:	bf04      	itt	eq
 8009636:	681a      	ldreq	r2, [r3, #0]
 8009638:	685b      	ldreq	r3, [r3, #4]
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	bf04      	itt	eq
 800963e:	1852      	addeq	r2, r2, r1
 8009640:	6022      	streq	r2, [r4, #0]
 8009642:	6004      	str	r4, [r0, #0]
 8009644:	e7ec      	b.n	8009620 <_free_r+0x24>
 8009646:	4613      	mov	r3, r2
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	b10a      	cbz	r2, 8009650 <_free_r+0x54>
 800964c:	42a2      	cmp	r2, r4
 800964e:	d9fa      	bls.n	8009646 <_free_r+0x4a>
 8009650:	6819      	ldr	r1, [r3, #0]
 8009652:	1858      	adds	r0, r3, r1
 8009654:	42a0      	cmp	r0, r4
 8009656:	d10b      	bne.n	8009670 <_free_r+0x74>
 8009658:	6820      	ldr	r0, [r4, #0]
 800965a:	4401      	add	r1, r0
 800965c:	1858      	adds	r0, r3, r1
 800965e:	4282      	cmp	r2, r0
 8009660:	6019      	str	r1, [r3, #0]
 8009662:	d1dd      	bne.n	8009620 <_free_r+0x24>
 8009664:	6810      	ldr	r0, [r2, #0]
 8009666:	6852      	ldr	r2, [r2, #4]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	4401      	add	r1, r0
 800966c:	6019      	str	r1, [r3, #0]
 800966e:	e7d7      	b.n	8009620 <_free_r+0x24>
 8009670:	d902      	bls.n	8009678 <_free_r+0x7c>
 8009672:	230c      	movs	r3, #12
 8009674:	602b      	str	r3, [r5, #0]
 8009676:	e7d3      	b.n	8009620 <_free_r+0x24>
 8009678:	6820      	ldr	r0, [r4, #0]
 800967a:	1821      	adds	r1, r4, r0
 800967c:	428a      	cmp	r2, r1
 800967e:	bf04      	itt	eq
 8009680:	6811      	ldreq	r1, [r2, #0]
 8009682:	6852      	ldreq	r2, [r2, #4]
 8009684:	6062      	str	r2, [r4, #4]
 8009686:	bf04      	itt	eq
 8009688:	1809      	addeq	r1, r1, r0
 800968a:	6021      	streq	r1, [r4, #0]
 800968c:	605c      	str	r4, [r3, #4]
 800968e:	e7c7      	b.n	8009620 <_free_r+0x24>
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	20000a68 	.word	0x20000a68

08009698 <_malloc_usable_size_r>:
 8009698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969c:	1f18      	subs	r0, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfbc      	itt	lt
 80096a2:	580b      	ldrlt	r3, [r1, r0]
 80096a4:	18c0      	addlt	r0, r0, r3
 80096a6:	4770      	bx	lr

080096a8 <_init>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	bf00      	nop
 80096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ae:	bc08      	pop	{r3}
 80096b0:	469e      	mov	lr, r3
 80096b2:	4770      	bx	lr

080096b4 <_fini>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr
